@model Corum.Models.OrderNavigationResult<Corum.Models.ViewModels.OrderConcurs.OrderCompetitiveListViewModel>


@using System.Linq
@using GridMvc.Html
@using Corum.Models.Tender;
@{ ViewBag.Title = "Работа с конкурентным листом";
    Layout = "~/Views/Shared/_Layout.cshtml"; }


<style type="text/css">
    #jqxgridAddConcurs .jqx-grid-cell-pinned, #jqxgridAddConcurs .jqx-grid-column-header {
        background-color: #f7b662;
        font-size: 10px;
    }
</style>

<style>
    .select2-container {
        width: 80%;
    }
</style>

@Html.Partial("_PartialModul", Model.tenderForma)


@helper TPagging(string action, string controller, Corum.Models.NavigationInfo navInfo, WebViewPage page)
{
    <div class="table-footer clearfix">

        @{ var proc = string.Concat("OnPageSizeTemplateChange('", page.Url.Action(@action, @controller), "');"); }

        <div class="pull-left dropdown-footer">
            @page.Html.DropDownListFor(model => navInfo.PageSize,
                                                               (List<System.Web.Mvc.SelectListItem>)navInfo.PageSizeTemplates,
                                                                                 new { @id = "PageSizeTemplates", onchange = proc })
        </div>
    </div>

}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 main">
            <h2 style="margin-top: 0px !important;">Конкурентный лист (@Model.currentStatus.StepShortCode)</h2> <br>

            @Html.Partial("_OrderCompetitiveListInfo", Model.CompetitiveListInfo)

            <hr>

            <div class="table-header clearfix">

                <div class="col-md-8">
                    @Html.Partial("_ResultsTendersKL")
                    @Html.ActionLink("В заявку", "UpdateOrder", "Orders", new { Id = Model.CompetitiveListInfo.Id }, new { @class = "btn btn-success", @style = "margin-bottom:10px" })
                    @Html.ActionLink("Реестр заявок", "Orders", "Orders", null, new { @class = "btn btn-success", @style = "margin-bottom:10px" })
                    @Html.ActionLink("В excel", "ConcursAsExcel", "ExportToExcel", new { OrderId = Model.CompetitiveListInfo.Id }, new { @class = "delete_link btn btn-success", @style = "margin-bottom:10px" })&nbsp;

                    @if (Model.currentStatus.StepId < 4)
                    {
                        <a style="margin-bottom: 10px;" class="delete_link btn btn-primary" onclick="AddConcurs(@Model.CompetitiveListInfo.Id)">
                            <span class="tooltip-message">Выбор услуг</span>
                        </a>}
                    @Html.ActionLink("Ставки дисконт-я", "ConcursDiscountRate", "OrderConcurs", new { OrderId = Model.CompetitiveListInfo.Id }, new { @class = "delete_link btn btn-success", @style = "margin-bottom:10px" })
                    @Html.ActionLink("Реестр тендеров", "TenderReport", "OrderTender", null, new
               {
                   @id = "BtnReestTendersKL",
                   @class = "delete_link btn btn-success",
                   @style = "margin-bottom:10px",
                   @onclick = "OnIndexCall(this)"
               })

                    @if (Model.DisplayValues.Count() > 0)
                    {
                        @Html.Partial("_SetListStatusButton")
                        @Html.ActionLink("Тайм-лайн", "GetListTimeline", "OrderConcurs", new { OrderId = Model.CompetitiveListInfo.Id }, new { @class = "delete_link btn btn-success", @style = "margin-bottom:10px" })}

                </div>
                @Html.Partial("_OrderCompetitiveTarifInfo")


                <img src="/Content/images/ajax-loader-gray.gif" id="loading-indicator" style="position: fixed; left: 45%; top: 45%; display: none" />
                <div id="detailValuesGrid" class="table-header clearfix col-md-12" style="font-size: 11px;">

                    <table class="table table-striped table-bordered no-footer grid-table" style="height: 100%;">
                        <thead>
                            <tr>
                                <th rowspan="2" class="grid-header centered_column new_columns_block_start" style="white-space: nowrap;">
                                    <span style="color: transparent">________</span>
                                    Наименование услуги
                                    <span style="color: transparent">________</span>
                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                    Перевозчик/<br>Экспедитор
                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                    Грузо-<br>подъемность<br>автомобиля, тонн
                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                    Предложено<br>транс-ных<br>единиц, шт.
                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                    Акцептовано<br>транс-ных<br>единиц, шт.
                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                    НДС
                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                    Стоимость одного<br>автомобиля, грн.<br>без НДС (согласно договору)
                                </th>

                                @if (Model.CompetitiveListInfo.currentStep.StepId >= 2)
                                {
                                    <th rowspan="2" class="grid-header centered_column">
                                        <a class="tarash-i update_link tooltips" href="#">
                                            <span class="tooltip-message">
                                                Стоимость одного автомобиля, грн. без  НДС (согласно КП-1)<br>
                                                <strong>региональные:</strong> 1 тур рассылка первому ранжированному перевозчику или <br>
                                                <strong>экспорт, спецтр-т</strong> – 1 этап редукцион<br>
                                            </span>
                                            Стоимость одного<br>автомобиля, грн.<br>без НДС (согласно КП-1)
                                        </a>
                                    </th>
                                }
                                else
                                {
                                    <th rowspan="2" class="grid-header centered_column" style="display: none;">
                                        <a class="tarash-i update_link tooltips" href="#">
                                            <span class="tooltip-message">
                                                Стоимость одного автомобиля, грн. без  НДС (согласно КП-1)<br>
                                                <strong>региональные:</strong> 1 тур рассылка первому ранжированному перевозчику или <br>
                                                <strong>экспорт, спецтр-т</strong> – 1 этап редукцион<br>
                                            </span>
                                            Стоимость одного<br>автомобиля, грн.<br>без НДС (согласно КП-1)
                                        </a>
                                    </th>
                                }
                                @if (Model.CompetitiveListInfo.currentStep.StepId >= 3)
                                {
                                    <th rowspan="2" class="grid-header centered_column">
                                        <a class="tarash-i update_link tooltips" href="#">
                                            <span class="tooltip-message">
                                                Стоимость одного автомобиля, грн. без  НДС (согласно КП-2)<br>
                                                <strong>региональные:</strong> 2 тур рассылка на всех перевозчиков) или <br>
                                                <strong>экспорт, спецтр-т</strong> – 2 этап редукцион
                                            </span>
                                            Стоимость одного автомобиля, грн.<br>без НДС (согласно КП-2)
                                        </a>
                                    </th>
                                }
                                else
                                {
                                    <th rowspan="2" class="grid-header centered_column" style="display: none;">
                                        <a class="tarash-i update_link tooltips" href="#">
                                            <span class="tooltip-message">
                                                Стоимость одного автомобиля, грн. без  НДС (согласно КП-2)<br>
                                                <strong>региональные:</strong> 2 тур рассылка на всех перевозчиков) или <br>
                                                <strong>экспорт, спецтр-т</strong> – 2 этап редукцион
                                            </span>
                                            Стоимость одного<br>автомобиля, грн.<br>без НДС (согласно КП-2)
                                        </a>
                                    </th>
                                }


                                <th rowspan="2" class="grid-header centered_column">
                                    Отсрочка платежей<br>(договорная/КП1/КП2)
                                </th>
                                <th colspan="5" class="grid-header centered_column">
                                    Приведение стоимости
                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                    Примечание
                                </th>
                                <th rowspan="2" class="grid-header centered_column">

                                    <a class="tarash-i update_link tooltips" href="#">
                                        <span class="tooltip-message">
                                            Расчет:<br> 16 колонка / Расстояние, км
                                        </span>
                                        Средняя цена<br>за грн./км.
                                    </a>


                                </th>
                                <th rowspan="2" class="grid-header centered_column">
                                </th>

                                <th rowspan="2" class="grid-header centered_column new_columns_block_end">
                                    Действия
                                    <span style="color: transparent">_________________</span>
                                </th>
                            </tr>
                            <tr>
                                <th class="grid-header centered_column">

                                    <a class="tarash-i update_link tooltips" href="#">
                                        <span class="tooltip-message">
                                            Расчет:<br>(7(8,9) колонка - 13 колонка)*Ставка дисконтирования*10 колонка/365
                                        </span>
                                        эффект от отсрочки
                                    </a>

                                </th>
                                <th class="grid-header centered_column">
                                    предоплата дней
                                </th>
                                <th class="grid-header centered_column">
                                    сумма предоплаты
                                </th>
                                <th class="grid-header centered_column">

                                    <a class="tarash-i update_link tooltips" href="#">
                                        <span class="tooltip-message">
                                            Расчет:<br>-13 колонка*Ставка дисконтирования*12 колонка/365
                                        </span>
                                        эффект от предоплаты
                                    </a>
                                </th>
                                <th class="grid-header centered_column">

                                    <a class="tarash-i update_link tooltips" href="#">
                                        <span class="tooltip-message">
                                            Стоимость одного<br>автомобиля грн.<br>с учетом стоимости<br>денег<br>
                                            (Базис приведения-<br>оплата по факту <br>перевозки без отсрочкой<br>платежа)<br>
                                            Расчет: 7(8,9) колонка - 11 колонка - 14 колонка
                                        </span>
                                        Стоимость одного<br>автомобиля грн.<br>с учетом стоимости<br>денег
                                    </a>
                                </th>
                            </tr>
                            <tr style="padding: 0px!important;">
                                <th class="grid-header centered_column new_columns_block_start">
                                    1
                                </th>
                                <th class="grid-header centered_column">
                                    2
                                </th>
                                <th class="grid-header centered_column">
                                    3
                                </th>
                                <th class="grid-header centered_column">
                                    4
                                </th>
                                <th class="grid-header centered_column">
                                    5
                                </th>
                                <th class="grid-header centered_column">
                                    6
                                </th>
                                <th class="grid-header centered_column">
                                    7
                                </th>

                                @if (Model.CompetitiveListInfo.currentStep.StepId >= 2)
                                {
                                    <th class="grid-header centered_column">
                                        8
                                    </th>
                                }
                                else
                                {
                                    <th class="grid-header centered_column" style="display:none;">
                                        8
                                    </th>
                                }

                                @if (Model.CompetitiveListInfo.currentStep.StepId >= 3)
                                {
                                    <th class="grid-header centered_column">
                                        9
                                    </th>
                                }
                                else
                                {
                                    <th class="grid-header centered_column" style="display:none;">
                                        9
                                    </th>
                                }

                                <th class="grid-header centered_column">
                                    10
                                </th>
                                <th class="grid-header centered_column">
                                    11
                                </th>
                                <th class="grid-header centered_column">
                                    12
                                </th>
                                <th class="grid-header centered_column">
                                    13
                                </th>
                                <th class="grid-header centered_column">
                                    14
                                </th>
                                <!--  <th class="grid-header centered_column">
                                    14
                                </th>-->
                                <th class="grid-header centered_column">
                                    16
                                </th>
                                <th class="grid-header centered_column">
                                    17
                                </th>
                                <th class="grid-header centered_column">
                                    18
                                </th>
                                <th class="grid-header centered_column">
                                    19
                                </th>
                                <th class="grid-header centered_column new_columns_block_end ">
                                    20
                                </th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.DisplayValues)
                            {

                                string style = @item.IsSelectedId ? "font-weight: bold" : "";
                                string stylecolor = @item.GenId == 1 ? "color: blue" : @item.GenId == 2 ? "color: black" : @item.GenId == 3 ? "color: black" : @item.GenId == 5 ? "color: green" : "";
                                string backgroundColor = @item.IsZeroTarif ? "background : red" : "";
                                style = style + "; " + stylecolor + "; " + backgroundColor;
                                <tr style="@style">
                                    <td class="grid-cell rigth_column new_columns_block_start" style="width:20%">@item.NameSpecification</td>
                                    <td class="grid-cell rigth_column">@item.ExpeditorName</td>
                                    <td class="grid-cell rigth_column"> @item.CarryCapacity </td>
                                    <td class="grid-cell rigth_column"> @item.CarsOffered </td>
                                    <td class="grid-cell rigth_column"> @item.CarsAccepted </td>
                                    <td class="grid-cell rigth_column"> @item.NDS </td>
                                    <td class="grid-cell rigth_column">
                                        <a class="tarash-i update_link tooltips" href="#">
                                            <span class="tooltip200down-message">@item.NameCarCostDog</span>
                                            @item.CarCostDog
                                        </a>
                                    </td>
                                    @if (Model.CompetitiveListInfo.currentStep.StepId >= 2)
                                    {
                                        <td class="grid-cell rigth_column"> @item.CarCost7 </td>
                                    }
                                    else
                                    {
                                        <td class="grid-cell rigth_column" style="display:none;"> @item.CarCost7 </td>
                                    }

                                    @if (Model.CompetitiveListInfo.currentStep.StepId >= 3)
                                    {
                                        <td class="grid-cell rigth_column"> @item.CarCost </td>
                                    }
                                    else
                                    {
                                        <td class="grid-cell rigth_column" style="display:none;"> @item.CarCost </td>
                                    }
                                    <td class="grid-cell rigth_column"> @item.DaysDelaySteps </td>
                                    <td class="grid-cell rigth_column"> @item.DelayEffect </td>

                                    <td class="grid-cell rigth_column"> @item.Prepayment</td>
                                    <td class="grid-cell rigth_column"></td>
                                    <td class="grid-cell rigth_column"> @item.PrepaymentEffect</td>

                                    <!--<td class="grid-cell rigth_column"> @*@item.PrepaymentEffect2*@</td>-->

                                    <td class="grid-cell rigth_column"> @item.CarCostWithMoneyCost </td>
                                    <td class="grid-cell rigth_column">
                                        <a class="tarash-i update_link tooltips" href="#">
                                            <span class="tooltip200down-message">@item.Comments</span>
                                            @item.Comments_Cut
                                        </a>
                                    </td>
                                    <td class="grid-cell rigth_column"> @item.AverageCost </td>

                                    <td class="grid-cell rigth_column">
                                        @*@Html.CheckBox(@item.Id.ToString(), @item.IsSelectedId, new { disabled = "disabled", @readonly = "readonly" })*@


                                        <a class="tarash-i update_link tooltips" href="#">
                                            <span class="tooltip200down-message">@item.NameSpecification</span>
                                            @item.SelectedItem
                                        </a>
                                    </td>

                                    <td class="grid-cell rigth_column new_columns_block_end">
                                        @if (Model.currentStatus.StepId < 4)
                                        {
                                            <a class="tarash-i update_link tooltips" href="@Url.Action("UpdateConcurs", "OrderConcurs", new {Id = @item.Id, OrderId = @item.OrderId})">
                                                <span class="tooltip-message">
                                                    Изменить запись
                                                </span>
                                                <span class="glyphicon glyphicon-pencil"></span>
                                            </a>

                                            <a class="tarash-i tooltips" href="@Url.Action("CloneConcurs", "OrderConcurs", new  {Id = @item.Id, OrderId = @item.OrderId})">
                                                <span class="tooltip-message">Клонировать запись</span>
                                                <span class="glyphicon glyphicon-plus-sign"></span>
                                            </a>

                                            <a onclick="window.open('@Url.Action("ConcursHistory", "OrderConcurs", new {Id = @item.Id, ShowAll = false, OrderId = @item.OrderId})', '_blank', 'location=false, scrollbars=yes,status=yes');"
                                               class="tarash-i tooltips">
                                                <span class="tooltip-message">История конкурентных листов</span>
                                                <span class="glyphicon glyphicon-th-list"></span>
                                            </a>
                                            <a class="tarash-i tooltips" href="@Url.Action("DeleteConcurs", "OrderConcurs", new { Id = @item.Id, OrderId = @item.OrderId })" onclick="return confirm('Хотите удалить запись?');">
                                                <span class="tooltip-message">Удалить запись</span>
                                                <span class="glyphicon glyphicon-trash"></span>
                                            </a>}
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
    </div>
    @Html.Partial("_OrderCompetitive")
</div>


@section scripts
{
    <script>

        function AddConcurs(orderId) {

            $('#addconcursdialog')
                .dialog(
                {
                    dialogClass: "jq-dialog-window-custom  modal_dialog",
                    autoOpen: false,
                    width: 1100,
                    top: 25,
                    resizable: false,
                    tags: true,
                    title: "Выбор услуг",
                    modal: true,
                    open: function(event, ui) {

                    },

                    close: function(event, ui) {

                        $(this).dialog('destroy');
                    },
                    create: function(event, ui) {
                        $("#disable_all").addClass("disable_all");
                    },
                    beforeClose: function(event, ui) {
                        $("#disable_all").removeClass("disable_all");
                    },
                    buttons:
                    [
                        {
                            text: "Отмена",
                            "class": 'cancel-btn btn btn-outline',
                            click: function() {
                                $(this).dialog("close");
                            }
                        },
                        {
                            text: "Выбрать",
                            "class": 'btn btn-primary',
                            click: function() {

                                var getselectedrowindexes = $('#jqxgridAddConcurs').jqxGrid('getselectedrowindexes');


                                if (getselectedrowindexes.length > 0) {

                                    getselectedrowindexes.forEach(function(item, i, getselectedrowindexes) {

                                        //var selectedRowData = $('#jqxgridAddConcurs').jqxGrid('getrowdata', getselectedrowindexes[0]);
                                        var selectedRowData = $('#jqxgridAddConcurs').jqxGrid('getrowdata', getselectedrowindexes[i]);

                                        var _Id = selectedRowData.Id;
                                        var _ExpeditorName = selectedRowData.ExpeditorName;
                                        var _NameGroupeSpecification = selectedRowData.NameGroupeSpecification;
                                        var _NameSpecification = selectedRowData.NameSpecification;
                                        var _DaysDelay = selectedRowData.DaysDelay;
                                        var _FreightName = selectedRowData.FreightName;
                                        var _CarryCapacity = selectedRowData.CarryCapacity;
                                        var _NameIntervalType = selectedRowData.NameIntervalType;
                                        var _MovingTypeName = selectedRowData.MovingTypeName;
                                        var _UsedRateId = selectedRowData.UsedRateId;
                                        var _OrderId = @Model.CompetitiveListInfo.Id;

                                        var filter = new Object();
                                        filter.Id = _Id;
                                        filter.ExpeditorName = _ExpeditorName;
                                        filter.NameGroupeSpecification = _NameGroupeSpecification;
                                        filter.NameSpecification = _NameSpecification;
                                        filter.DaysDelay = _DaysDelay;
                                        filter.FreightName = _FreightName;
                                        filter.CarryCapacity = _CarryCapacity;
                                        filter.NameIntervalType = _NameIntervalType;
                                        filter.MovingTypeName = _MovingTypeName;
                                        filter.UsedRateId = _UsedRateId;
                                        filter.OrderId = _OrderId;
                                        var json = JSON.stringify(filter);


                                        $.ajax({
                                            type: 'POST',
                                            url: '@Url.Action("AddSpecificationsInfo", "OrderConcurs")',
                                            data: json,
                                            async: false,
                                            contentType: 'application/json; charset=utf-8',
                                            success: function(msg) {
                                                //if (msg == 'True') {
                                                window.location.reload(true);
                                                //};
                                            }
                                        });


                                    });


                                }
                                $(this).dialog("close");

                            }
                        }
                    ]
                });

            $('#addconcursdialog').dialog('open');

            return;
        }




        function GetSpecification(Id) {

            var _FilterTripTypeId = null;
            var _FilterSpecificationTypeId = null;
            var _FilterVehicleTypeId = null;
            var _FilterPayerId = null;

            var UseTripTypeFilter = $('#CompetitiveListInfo_UseTripTypeFilter').prop("checked");
            if (UseTripTypeFilter) {
                _FilterTripTypeId = $('#FilterTripTypeId').val();
            }

            var UseSpecificationTypeFilter = $('#CompetitiveListInfo_UseSpecificationTypeFilter').prop("checked");
            if (UseSpecificationTypeFilter) {
                _FilterSpecificationTypeId = $('#FilterSpecificationTypeId').val();
            }

            var UseVehicleTypeFilter = $('#CompetitiveListInfo_UseVehicleTypeFilter').prop("checked");
            if (UseVehicleTypeFilter) {
                _FilterVehicleTypeId = $('#FilterVehicleTypeId').val();
            }

            var UsePayerFilter = $('#CompetitiveListInfo_UsePayerFilter').prop("checked");
            if (UsePayerFilter) {
                _FilterPayerId = $('#FilterPayerId').val();
            }

            var UseRouteFilter = $('#CompetitiveListInfo_UseRouteFilter').prop("checked");
            //if (Id == 1) {
                var source =
                {
                    datatype: "json",
                    datafields: [
                        { name: 'GenId', type: 'number' },
                        { name: 'ExpeditorName', type: 'string' },
                        { name: 'NameGroupeSpecification', type: 'string' },
                        { name: 'DaysDelay', type: 'number' },
                        { name: 'NameSpecification', type: 'string' },
                        //{ name: 'FreightName', type: 'string' },
                        { name: 'CarryCapacity', type: 'number' },
                        { name: 'NameIntervalType', type: 'string' },
                        { name: 'UsedRateName', type: 'string' },
                        { name: 'Id', type: 'number' },
                        { name: 'UsedRateId', type: 'number' },
                        { name: 'RouteName', type: 'string' }
                    ],
                    url: '@Url.Action("GetSpecifications", "OrderConcurs")?OrderId= ' + @Model.CompetitiveListInfo.Id + '&UseTripTypeFilter= ' + UseTripTypeFilter + '&FilterTripTypeId= ' + _FilterTripTypeId + '&UseSpecificationTypeFilter= ' + UseSpecificationTypeFilter + '&FilterSpecificationTypeId= ' + _FilterSpecificationTypeId + '&UseVehicleTypeFilter= ' + UseVehicleTypeFilter + '&FilterVehicleTypeId= ' + _FilterVehicleTypeId + '&UsePayerFilter= ' + UsePayerFilter + '&FilterPayerId= ' + _FilterPayerId + '&UseRouteFilter= ' + UseRouteFilter + '&AlgorithmId= ' + Id,
                    @*            new {OrderId = Model.CompetitiveListInfo.Id, FilterTripTypeId = _FilterTripTypeId})',*@
                    pagenum: 0,
                    pagesize: 5,
                    pager: function(pagenum, pagesize, oldpagenum) {

                    }
                };

            var dataAdapter = new $.jqx.dataAdapter(source,
                {
                    formatData: function(data) {
                        $.extend(data, {
                            featureClass: "P",
                            style: "full",
                            maxRows: 50,
                            username: "jqwidgets"
                        });
                        return data;
                    }
                }
            );

            var getLocalization = function() {
                var localizationobj = {};
                localizationobj.pagergotopagestring = "Перейти к стр.:";
                localizationobj.pagershowrowsstring = "Показать строки:";
                localizationobj.pagerrangestring = " из ";
                localizationobj.emptydatastring = "Нет данных для отображения";
                return localizationobj;
            }

            var CityFrom = '@Model.CompetitiveListInfo.CityFrom';
            var CityTo = '@Model.CompetitiveListInfo.CityTo';


            var columns = [
                { text: 'Экспедитор', datafield: 'ExpeditorName', align: 'center', width: 140 },
                { text: 'Спецификация', datafield: 'NameGroupeSpecification', align: 'center', width: 145 },
                { text: 'Отсрочка<br>в днях', datafield: 'DaysDelay', align: 'center', width: 60 },
                { text: 'Услуга', datafield: 'NameSpecification', align: 'center', width: 230 },
                { text: 'Грузо-<br>подъем-<br>ность', datafield: 'CarryCapacity', align: 'center', width: 55 },
                { text: 'Тип<br>интервала<br>маршрута', datafield: 'NameIntervalType', align: 'center', width: 70 },
                { text: 'Тариф', datafield: 'UsedRateName', align: 'center', width: 100 },
                { text: 'Название<br>маршрута', datafield: 'RouteName', align: 'center', width: 220 }
            ];


            $("#jqxgridAddConcurs").jqxGrid(
            {
                width: 1050,
                source: dataAdapter,
                showfilterrow: true,
                filterable: true,
                selectionmode: 'checkbox',
                sortable: true,
                pageable: true,
                pageSize: 5,
                columnsresize: true,
                autoheight: true,
                autorowheight: true,
                columnsheight: '55px',
                localization: getLocalization(),
                columns: columns

            });
            return;

        }

        $(document).ready(function() {
            InitFilterMultipleDropDowns();
            GetSpecification(1);
            $("#tabs").tabs();
            $("#BtnReestTendersKL").toggle(false);
            let dropDownListTender = document.getElementById('drpDwnListTend');
            let tenderNumber;
            @{
                if (Model.tenderForma.tenderUuid != Guid.Empty)
                {
                    RegisterTenders tender = Model.tenderForma.listRegisterTenders.Find(x => x.TenderUuid == Model.tenderForma.tenderUuid);
                        @:tenderNumber = @Html.Raw(Json.Encode(@tender.tenderNumber.ToString()));
                        @:sessionStorage.setItem('OrderIdKL', JSON.stringify(@Model.tenderForma.competitiveListViewModel.Id));
                        @:let dateStr = @Html.Raw(Json.Encode(@tender.dateStart));
                        @:dateStr = Number(dateStr.replace(/\D+/g, ''));
                        @:sessionStorage.setItem('dataStart', JSON.stringify(dateStr));
                        @:let dateEnd = @Html.Raw(Json.Encode(@tender.dateEnd));
                        @:dateEnd = Number(dateEnd.replace(/\D+/g, ''));
                        @:sessionStorage.setItem('dataEnd', JSON.stringify(dateEnd));
                }
                else
                {
                        List<RegisterTenders> listAllClosed = new List<RegisterTenders>();
                        List<RegisterTenders> listAllOpened = new List<RegisterTenders>();
                        if (Model.tenderForma.listRegisterTenders.Count != 0)
                        {
                            foreach (var item in Model.tenderForma.listRegisterTenders)
                            {
                                switch (item.processValue)
                                {
                                    case "Завершен": listAllClosed.Add(item); break;
                                    default: listAllOpened.Add(item); break;
                                }
                            }
                            if (listAllOpened.Count != 0)
                            {
                                RegisterTenders tender = listAllOpened.OrderByDescending(x => x.tenderNumber).FirstOrDefault();
                                @:tenderNumber = @Html.Raw(Json.Encode(@tender.tenderNumber.ToString()));
                                @:sessionStorage.setItem('OrderIdKL', JSON.stringify(@Model.tenderForma.competitiveListViewModel.Id));
                                @:let dateStr = @Html.Raw(Json.Encode(@tender.dateStart));
                                @:dateStr = Number(dateStr.replace(/\D+/g, ''));
                                @:sessionStorage.setItem('dataStart', JSON.stringify(dateStr));
                                @:let dateEnd = @Html.Raw(Json.Encode(@tender.dateEnd));
                                @:dateEnd = Number(dateEnd.replace(/\D+/g, ''));
                                @:sessionStorage.setItem('dataEnd', JSON.stringify(dateEnd));
                            }
                            else
                            {
                                RegisterTenders tender = listAllClosed.OrderByDescending(x => x.tenderNumber).FirstOrDefault();
                                @:tenderNumber = @Html.Raw(Json.Encode(@tender.tenderNumber.ToString()));
                                @:sessionStorage.setItem('OrderIdKL', JSON.stringify(@Model.tenderForma.competitiveListViewModel.Id));
                                @:let dateStr = @Html.Raw(Json.Encode(@tender.dateStart));
                                @:dateStr = Number(dateStr.replace(/\D+/g, ''));
                                @:sessionStorage.setItem('dataStart', JSON.stringify(dateStr));
                                @:let dateEnd = @Html.Raw(Json.Encode(@tender.dateEnd));
                                @:dateEnd = Number(dateEnd.replace(/\D+/g, ''));
                                @:sessionStorage.setItem('dataEnd', JSON.stringify(dateEnd));
                            }
                        }
                        else
                        {
                            @:tenderNumber = "Новый тендер";
                        }
                }
            }
            $(dropDownListTender).text(tenderNumber);
            $(dropDownListTender).append(" <span class='caret'></span>");
            InitialDataStatusTender(tenderNumber);
                });



                // Модальное окно при нажатии на кнопку "Тендер"
                function SendNotification(orderId) {

            $('#partialModul')
                .dialog({
                    dialogClass: "jq-dialog-window-custom  modal_dialog",
                    autoOpen: false,
                    width: 800,
                    top: 50,
                    resizable: false,
                    tags: true,
                    title: "Запрос на тендер",
                    modal: true,
                    open: function(event, ui) {
                    InitFilterDropDowns();

                    CreateJqxGrid();
                    FormInputErrorChecking(); // Метод валидации полей формы тендера
                        $(document).ready(function () {

                        var dataTend383 = [];
                        var dataTend384 = [];
                        var dataTend385 = [];
                        var dataTend54 = [];
                        var dataTend67 = [];
                        @foreach (var item in Model.specificationNames)
                            {
                            switch (item.industryId.ToString())
                            {
                                case "383":
                                    {
                                            @:dataTend383.push(@Html.Raw(Json.Encode(item.SpecName.Trim(' ').ToString())));
                                            break;
                                        }
                                    case "384":
                                        {
                                            @:dataTend384.push(@Html.Raw(Json.Encode(item.SpecName.Trim(' ').ToString())));
                                            break;
                                        }
                                    case "385":
                                        {
                                            @:dataTend385.push(@Html.Raw(Json.Encode(item.SpecName.Trim(' ').ToString())));
                                            break;
                                        }
                                    case "54":
                                        {
                                            @:dataTend54.push(@Html.Raw(Json.Encode(item.SpecName.Trim(' ').ToString())));
                                            break;
                                        }
                                    case "67":
                                        {
                                            @:dataTend67.push(@Html.Raw(Json.Encode(item.SpecName.Trim(' ').ToString())));
                                            break;
                                        }
                                    default: break;
                                }
                            }
                            // prepare the data
                            var data = {};

                            var generaterow = function (i) {
                                var row = {};
                                return row;
                            }

                            var source =
                            {
                                localdata: data,
                                datatype: "local",
                                datafields:
                                    [
                                        { name: 'nmcName', type: 'string' },
                                        //{ name: 'unitName', type: 'string' },
                                        { name: 'qty', type: 'string' }
                                    ],
                                addrow: function (rowid, rowdata, position, commit) {
                                    // synchronize with the server - send insert command
                                    // call commit with parameter true if the synchronization with the server is successful
                                    //and with parameter false if the synchronization failed.
                                    // you can pass additional argument to the commit callback which represents the new ID if it is generated from a DB.
                                    commit(true);
                                },
                                deleterow: function (rowid, commit) {
                                    // synchronize with the server - send delete command
                                    // call commit with parameter true if the synchronization with the server is successful
                                    //and with parameter false if the synchronization failed.
                                    commit(true);
                                },
                                updaterow: function (rowid, newdata, commit) {
                                    // synchronize with the server - send update command
                                    // call commit with parameter true if the synchronization with the server is successful
                                    // and with parameter false if the synchronization failed.
                                    commit(true);
                                }
                            };

                            var dataAdapter = new $.jqx.dataAdapter(source);

                            // initialize jqxGrid
                            $("#grid").jqxGrid(
                                {
                                    width: 750,
                                    theme: 'orange',
                                    height: 345,
                                    showtoolbar: true,
                                    source: dataAdapter,
                                    autorowheight: true,
                                    pageable: true,
                                    pagermode: 'simple',
                                    selectionmode: 'multiplerows',
                                    editable: true,
                                    rendertoolbar: function (toolbar) {
                                        var me = this;
                                        var container = $("<div style='margin: 5px;'></div>");
                                        toolbar.append(container);
                                        container.append('<input id="addrowbutton" type="button" value="Добавить" />');

                                        container.append('<input style="margin-left: 5px;" id="deleterowbutton" type="button" value="Удалить" />');

                                        $("#addrowbutton").jqxButton();

                                        $("#deleterowbutton").jqxButton();


                                        // create new row.
                                        $("#addrowbutton").on('click', function () {
                                            var datarow = generaterow();
                                            var commit = $("#grid").jqxGrid('addrow', null, datarow);
                                        });

                                        // delete row.
                                        $("#deleterowbutton").on('click', function () {
                                            var selectedrowindex = $("#grid").jqxGrid('getselectedrowindex');
                                            var rowscount = $("#grid").jqxGrid('getdatainformation').rowscount;
                                            if (selectedrowindex >= 0 && selectedrowindex < rowscount) {
                                                var id = $("#grid").jqxGrid('getrowid', selectedrowindex);
                                                var commit = $("#grid").jqxGrid('deleterow', id);
                                            }
                                        });
                                    },
                                    columns: [
                                        {
                                            text: 'Наименование позиции', datafield: 'nmcName', width: 650, columntype: 'dropdownlist',
                                            createeditor: function (row, column, editor)
                                            {
                                                    editor.jqxDropDownList({ autoDropDownHeight: false, placeHolder: null, source: dataTend383});
                                            }
                                        },

                                        {
                                            text: 'Количество', datafield: 'qty', width: 100, columntype: 'string',
                                        }
                                             ]
                                });

                            // events
                            var dataTend = [];
                            @foreach (var item in Model.tenderServices)
                            {
                                @:dataTend.push("@item.industryName.Trim(' ')");
                            }

                            $("#IndustryName").on('change', function (e) {
                                var industryName = $("#IndustryName").val();
                                switch (industryName)
                                {
                                    case dataTend[0]: {
                                        //alert(dataTend[0]);
                                        $("#grid").jqxGrid({
                                            columns: [
                                                {
                                                    text: 'Наименование позиции', datafield: 'nmcName', width: 650, columntype: 'dropdownlist',
                                                    createeditor: function (row, column, editor)
                                                    {
                                                        editor.jqxDropDownList({ autoDropDownHeight: false, placeHolder: null, source: dataTend383 });
                                                    }
                                                },

                                                {
                                                    text: 'Количество', datafield: 'qty', width: 100, columntype: 'string',
                                                }
                                            ] }); break;
                                    }
                                    case dataTend[1]: {
                                        //alert(dataTend[1]);
                                        $("#grid").jqxGrid({
                                            columns: [
                                                {
                                                    text: 'Наименование позиции', datafield: 'nmcName', width: 650, columntype: 'dropdownlist',
                                                    createeditor: function (row, column, editor)
                                                    {
                                                        editor.jqxDropDownList({ autoDropDownHeight: false, placeHolder: null, source: dataTend384 });
                                                    }
                                                },

                                                {
                                                    text: 'Количество', datafield: 'qty', width: 100, columntype: 'string',
                                                }
                                            ] }); break;
                                    }
                                    case dataTend[2]: {
                                        //alert(dataTend[2]);
                                        $("#grid").jqxGrid({
                                            columns: [
                                                {
                                                    text: 'Наименование позиции', datafield: 'nmcName', width: 650, columntype: 'dropdownlist',
                                                    createeditor: function (row, column, editor)
                                                    {
                                                          editor.jqxDropDownList({ autoDropDownHeight: false, placeHolder: null, source: dataTend385 });
                                                    }
                                                },

                                                {
                                                    text: 'Количество', datafield: 'qty', width: 100, columntype: 'string',
                                                }
                                            ] }); break;
                                    }
                                    case dataTend[3]: {
                                        //alert(dataTend[3]);
                                        $("#grid").jqxGrid({
                                            columns: [
                                                {
                                                    text: 'Наименование позиции', datafield: 'nmcName', width: 650, columntype: 'dropdownlist',
                                                    createeditor: function (row, column, editor)
                                                    {
                                                        editor.jqxDropDownList({ autoDropDownHeight: false, placeHolder: null, source: dataTend54 });
                                                    }
                                                },

                                                {
                                                    text: 'Количество', datafield: 'qty', width: 100, columntype: 'string',
                                                }
                                            ] }); break;
                                    }
                                    case dataTend[4]: {
                                        //alert(dataTend[3]);
                                        $("#grid").jqxGrid({
                                            columns: [
                                                {
                                                    text: 'Наименование позиции', datafield: 'nmcName', width: 650, columntype: 'dropdownlist',
                                                    createeditor: function (row, column, editor) {
                                                        editor.jqxDropDownList({ autoDropDownHeight: false, placeHolder: null, source: dataTend67 });
                                                    }
                                                },

                                                {
                                                    text: 'Количество', datafield: 'qty', width: 100, columntype: 'string',
                                                }
                                            ]
                                        }); break;
                                    }
                                    default: {
                                        //alert('Default');
                                        break;
                                    }
                                }

                            });

                        });
                    },
                    close: function (event, ui) {
                        DeleteJqxGrid();
                        $(this).dialog('destroy');
                    },
                    create: function(event, ui) {
                        $("#disable_all").addClass("disable_all");
                    },
                    beforeCToStringStringStringse: function(event, ui) {
                        $("#disable_all").removeClass("disable_all");
                    },
                    buttons:
                        [
                            {
                                text: "Отмена",
                                "class": 'cancel-btn btn btn-primary',
                                click: function () {
                                    $(this).dialog("close");
                                }
                            },
                            {
                                text: "Выгрузить на APS",
                                "class": 'btn btn-success',
                                click: function () {
                                    var dataStart = document.getElementById('DateStart');
                                    var elDataStart = document.getElementById('erroreMessageTenderDataStart');
                                    var uncorrectDataStart = document.getElementById('uncorrectMessageTenderDataStart');
                                    var valueDataStartCorrect = $("#DateStart").val();
                                    function DisplayErrorDataStart() {
                                        var dateNow = new Date;
                                        dateNow.setMinutes(dateNow.getMinutes() + 3);
                                        var valueDataStart = $("#DateStart").val();
                                        var dateModalForm = new Date(Date.parse(valueDataStart));

                                        var pattern = /^[0-9]{4}-[0-9]{2}-[0-9]{2}[T]{1}[0-9]{2}[:]{1}[0-9]{2}$/;
                                        var regex = new RegExp(pattern);
                                        if (!regex.test(valueDataStart)) {
                                            elDataStart.style.display = "initial";
                                            formValidationAccessAttributes.accessDataStart = false;
                                        }
                                        else if (dateModalForm.getTime() < dateNow.getTime()) {
                                            uncorrectDataStart.style.display = "initial";
                                            formValidationAccessAttributes.accessDataStart = false;
                                        }
                                    }
                                    DisplayErrorDataStart();
                                    var valuesGridData = {};
                                    var countGridRows = $("#grid").jqxGrid('getdisplayrows');
                                    for (var i = 0; i < countGridRows.length; i++) {
                                        var row = {};
                                        if ($("#grid").jqxGrid('getcellvalue', i, 'nmcName') != null) {
                                            if ($("#grid").jqxGrid('getcellvalue', i, 'nmcName') != "") {
                                                row["nmcName"] = $("#grid").jqxGrid('getcellvalue', i, 'nmcName');
                                                //row["unitName"] = $("#grid").jqxGrid('getcellvalue', i, 'unitName');
                                                row["qty"] = $("#grid").jqxGrid('getcellvalue', i, 'qty');
                                                valuesGridData[i] = row;
                                            }
                                        }
                                    }


                                    var tenderName = $('#TenderName').val();
                                    var tenderAuthorName = $('#TenderAuthorName').val();
                                    var companyName = $('#CompanyName').val();
                                    var subCompanyName = $('#SubCompanyName').val();
                                    var depName = $('#DepName').val();
                                    var typeTure = $('#TypeTure').val();
                                    var budget = $('#Budget').val();
                                    var typePublic = $('#TypePublic').val();
                                    var industryName = $('#IndustryName').val();
                                    var dateStart = $('#DateStart').val();
                                    var dateEnd = $('#DateEnd').val();
                                    var lotName = $('#LotName').val();
                                    var orderId = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.Id.ToString()));

                                    var TendFormDeserializedJSON =
                                        {
                                            ListItemsModelTenderForm: {
                                                    "TenderName": tenderName,
                                                    "TenderAuthorName": tenderAuthorName,
                                                    "CompanyName": companyName,
                                                    "SubCompanyName": subCompanyName,
                                                    "DepName": depName,
                                                    "TypeTure": typeTure,
                                                    "Budget": budget,
                                                    "TypePublic": typePublic,
                                                    "IndustryName": industryName,
                                                    "DateStart": dateStart,
                                                    "DateEnd": dateEnd,
                                                    "LotName": lotName,
                                                    "JqxGridNmc": valuesGridData
                                        },
                                        OrderId: orderId
                                };
                                var tenderSumOrder = JSON.stringify(TendFormDeserializedJSON);


                                if (formValidationAccessAttributes.accessTenderName != false && formValidationAccessAttributes.accessTenderNameStringLength != false &&
                                    formValidationAccessAttributes.accessLotName != false && formValidationAccessAttributes.accessLotNameStringLength != false &&
                                    formValidationAccessAttributes.accessBudget != false && formValidationAccessAttributes.accessDataStart != false &&
                                    formValidationAccessAttributes.accessDataEnd != false)
                                {
                                    $('#loading-indicator').show();
                                    $.ajax({
                                        type: "POST",
                                        async: true,
                                        url: "/OrderTender/SendNotificationTender",
                                        data: tenderSumOrder,
                                        dataType: "json",
                                        contentType: 'application/json; charset=utf-8',
                                        success: function (data) {
                                            $('#loading-indicator').hide();
                                            var dataJS = JSON.parse(data.response);
                                            formValidationAccessAttributes.accesAddNewTender = true;
                                            listTendersOrder(data.modifRegisterTenders, data.modifRegisterTenders.tenderNumber);
                                            InitialDataStatusTender(data.modifRegisterTenders.tenderNumber);
                                            console.log(data.response);
                                            if (dataJS.success != false) {
                                                CreateNotification("success", data.modifRegisterTenders.tenderNumber);
                                                $("#jqxNotification").jqxNotification({
                                                    position: "bottom-right", opacity: 0.8, animationCloseDelay: 1000, autoCloseDelay: 5000,
                                                    autoOpen: true, autoClose: true, template: "success"
                                                });
                                                DeleteNotification();
                                            }
                                            else if (!dataJS.success && !dataJS.isLoadMultiple) {
                                                CreateNotification("warning", data.modifRegisterTenders.tenderNumber);
                                                $("#jqxNotification").jqxNotification({
                                                    position: "bottom-right", opacity: 0.8,
                                                    autoOpen: true, autoClose: true, template: "warning"
                                                });
                                                DeleteNotification();
                                            }
                                            else {
                                                CreateNotification("errorSuc", null);
                                                $("#jqxNotification").jqxNotification({
                                                    position: "bottom-right", opacity: 0.8,
                                                    autoOpen: true, autoClose: true, template: "error"
                                                });
                                                DeleteNotification();
                                            }
                                        },
                                        error: function () {
                                            $('#loading-indicator').hide();
                                            CreateNotification("error", null);
                                            $("#jqxNotification").jqxNotification({
                                                position: "bottom-right", opacity: 0.8,
                                                autoOpen: true, autoClose: true, template: "error"
                                            });
                                            DeleteNotification();
                                        }
                                    });
                                    $(this).dialog("close");
                                }
                                else
                                {
                                    CreateNotification("errorForm");
                                    $("#jqxNotification").jqxNotification({
                                        position: "bottom-right", opacity: 0.8,
                                        autoOpen: true, autoClose: true, template: "warning"
                                    });
                                    DeleteNotification();
                                }
                            }
                        }
                    ]
                });
            $('#partialModul').dialog('open');
            return;
        }


        // Динамическое создание jqxNotification
        function CreateNotification(status, numberTender) {
            var rootTab3 = document.getElementById('JqxCrNot');
            var div = document.createElement("div");
            div.id = "jqxNotification";
            div.className = "col-md-4";
            switch (status) {
                case "success": div.innerHTML = "<h4><span style='color: white'>Тендер успешно создан под номером " + "<span style='color: white; font-size: 18px;' class='badge'>" + numberTender +"</span >"+"</span ></h4 > "; break;
                case "warning": div.innerHTML = "<h4><span style='color: white'>Тендер для этой заявки уже создан!</span></h4>"; break;
                case "errorSuc": div.innerHTML = "<h4><span style='color: white'>Запрос на тендер не создан!</span></h4>"; break;
                case "error": div.innerHTML = "<h4><span style='color: white'>Ошибка!</span></h4>"; break;
                case "errorForm": div.innerHTML = "<h4><span style='color: white'>Заполните правильно поля формы!</span></h4>"; break;
                case "errorStatuse": div.innerHTML = "<h4><span style='color: white'>Ошибка обновления статуса!</span></h4>"; break;
                default: break;
            }
            rootTab3.appendChild(div);
        }

        // Динамическое удаление jqxNotification
        function DeleteNotification() {
            var rootTab3 = document.getElementById('JqxCrNot');
            var child = document.getElementById('jqxNotification');
            rootTab3.removeChild(child);
        }

        // Атрибуты допуска валидации полей тендера на подачу формы
        var formValidationAccessAttributes = {
            accessTenderName: true,
            accessTenderNameStringLength: true,
            accessLotName: true,
            accessLotNameStringLength: true,
            accessBudget: true,
            accessDataStart: true,
            accessDataEnd: true,
            accessInitTend: true,
            accesAddNewTender: false
        };

        function FormInputErrorChecking()
        {
            // Валидация поля "Наименование тендера"
            var tendName = document.getElementById('TenderName');
            var el = document.getElementById('erroreMessageTenderName');
            var elStLen = document.getElementById('erroreMessageTenderNameStringLenght300');

            function DisplayErrorTendName() {
                var valueTend = $("#TenderName").val();

                if (valueTend.length == 0) {
                    el.style.display = "initial";
                    elStLen.style.display = "none";
                    formValidationAccessAttributes.accessTenderName = false;
                    formValidationAccessAttributes.accessTenderNameStringLength = true;
                }
                else if (valueTend.length >= 300) {
                    el.style.display = "none";
                    elStLen.style.display = "initial";
                    formValidationAccessAttributes.accessTenderName = true;
                    formValidationAccessAttributes.accessTenderNameStringLength = false;
                }
                else {
                    el.style.display = "none";
                    elStLen.style.display = "none";
                    formValidationAccessAttributes.accessTenderName = true;
                    formValidationAccessAttributes.accessTenderNameStringLength = true;
                }
            }
            tendName.onkeyup = tendName.oninput = DisplayErrorTendName;
            tendName.oncut = function () {
                setTimeout(DisplayErrorTendName, 0);
            }

            // Валидация поля "Наименование лота"
            var lotName = document.getElementById('LotName');
            var elLot = document.getElementById('erroreMessagelotName');
            var elStLenLot = document.getElementById('erroreMessagelotNameStringLength');

            function DisplayErrorlotName() {
                var valueTendLot = $("#LotName").val();

                if (valueTendLot.length == 0) {
                    elLot.style.display = "initial";
                    elStLenLot.style.display = "none";
                    formValidationAccessAttributes.accessLotName = false;
                    formValidationAccessAttributes.accessLotNameStringLength = true;
                }
                else if (valueTendLot.length >= 100) {
                    elLot.style.display = "none";
                    elStLenLot.style.display = "initial";
                    formValidationAccessAttributes.accessLotName = true;
                    formValidationAccessAttributes.accessLotNameStringLength = false;
                }
                else {
                    elLot.style.display = "none";
                    elStLenLot.style.display = "none";
                    formValidationAccessAttributes.accessLotName = true;
                    formValidationAccessAttributes.accessLotNameStringLength = true;
                }
            }
            lotName.onkeyup = lotName.oninput = DisplayErrorlotName;
            lotName.oncut = function () {
                setTimeout(DisplayErrorlotName, 0);
            }

             // Валидация поля "Бюджет тендера"
            var budgatData = document.getElementById('Budget');
            var elbudget = document.getElementById('erroreMessageTenderBudget');


            function DisplayErrorBudget() {
                var valueBudget = $("#Budget").val();

                if (valueBudget.length == 0) {
                    elbudget.style.display = "initial";
                    formValidationAccessAttributes.accessBudget = false;
                }
                else {
                    elbudget.style.display = "none";
                    formValidationAccessAttributes.accessBudget = true;
                }
            }
            budgatData.onkeyup = budgatData.oninput = DisplayErrorBudget;
            budgatData.oncut = function () {
                setTimeout(DisplayErrorBudget, 0);
            }

            // Валидация поля "Дата создания тендера"
            var dataStart = document.getElementById('DateStart');
            var elDataStart = document.getElementById('erroreMessageTenderDataStart');
            var uncorrectDataStart = document.getElementById('uncorrectMessageTenderDataStart');
            var valueDataStartCorrect = $("#DateStart").val();
            function DisplayErrorDataStart() {
                var dateNow = new Date;
                var valueDataStart = $("#DateStart").val();
                var dateModalForm = new Date(Date.parse(valueDataStart));

                var pattern = /^[0-9]{4}-[0-9]{2}-[0-9]{2}[T]{1}[0-9]{2}[:]{1}[0-9]{2}$/;
                var regex = new RegExp(pattern);
                if (!regex.test(valueDataStart))
                {
                    elDataStart.style.display = "initial";
                    formValidationAccessAttributes.accessDataStart = false;
                }
                else if (dateModalForm.getTime() < dateNow.getTime())
                {
                    uncorrectDataStart.style.display = "initial";
                    formValidationAccessAttributes.accessDataStart = false;
                }
                else {
                    if (dateModalForm.getTime() > new Date(Date.parse(valueDateEndCorrect)).getTime()) {
                        uncorrectDataEnd.style.display = "initial";
                        formValidationAccessAttributes.accessDataEnd = false;
                    }
                    else if (dateModalForm.getTime() < new Date(Date.parse(valueDateEndCorrect)).getTime())
                    {
                        uncorrectDataEnd.style.display = "none";
                        formValidationAccessAttributes.accessDataEnd = true;
                    }
                    valueDataStartCorrect = valueDataStart;
                    uncorrectDataStart.style.display = "none";
                    elDataStart.style.display = "none";
                    formValidationAccessAttributes.accessDataStart = true;
                }
            }
            dataStart.onkeyup = dataStart.oninput = DisplayErrorDataStart;
            dataStart.oncut = function () {
                setTimeout(DisplayErrorDataStart, 0);
            }

            // Валидация поля "Дата окончания приема предложений"
            var dataEnd = document.getElementById('DateEnd');
            var elDataEnd = document.getElementById('erroreMessageTenderDataEnd');
            var uncorrectDataEnd = document.getElementById('uncorrectMessageTenderDataEnd');
            var valueDateEndCorrect = $("#DateEnd").val();
            function DisplayErrorDataEnd() {
                var dateModalFormStart = new Date(Date.parse(valueDataStartCorrect));

                var valueDataEnd = $("#DateEnd").val();
                var dateModalFormEnd = new Date(Date.parse(valueDataEnd));
                var pattern = /^[0-9]{4}-[0-9]{2}-[0-9]{2}[T]{1}[0-9]{2}[:]{1}[0-9]{2}$/;
                var regex = new RegExp(pattern);
                if (!regex.test(valueDataEnd)) {
                    elDataEnd.style.display = "initial";
                    formValidationAccessAttributes.accessDataEnd = false;
                }
                else if (dateModalFormStart.getTime() > dateModalFormEnd.getTime()) {
                    uncorrectDataEnd.style.display = "initial";
                    formValidationAccessAttributes.accessDataEnd = false;
                }
                else {
                    valueDateEndCorrect = valueDataEnd;
                    uncorrectDataEnd.style.display = "none";
                    elDataEnd.style.display = "none";
                    formValidationAccessAttributes.accessDataEnd = true;
                }
            }
            dataEnd.onkeyup = dataEnd.oninput = DisplayErrorDataEnd;
            dataEnd.oncut = function () {
                setTimeout(DisplayErrorDataEnd, 0);
            }
        }

        // Динамическое создание JqxGrid
        function CreateJqxGrid()
        {
            var rootTab3 = document.getElementById('tabs-3');

            var div = document.createElement("div");
            div.id = "jqx1";
            div.className = "row";
            var divInner = document.createElement("div");
            divInner.id = "grid";
            divInner.className = "col-md-12";
            divInner.style.maxHeight = "350px";
            divInner.style.margin = "0 10px 0 10px";
            div.appendChild(divInner);

            rootTab3.appendChild(div);
        }

        // Динамическое удаление JqxGrid
        function DeleteJqxGrid() {
            var rootTab3 = document.getElementById('tabs-3');
            var child = document.getElementById('jqx1');
            rootTab3.removeChild(child);
        }

        // Обработчик события dropdownList таблицы статуса КЛ
        $(".dropdown-menu li a").click(function () {
            var el = $(this).parents(".dropdown").find('.dropdown-toggle').html($(this).text() + ' <span class="caret"></span>');
            $(this).parents(".dropdown").find('.dropdown-toggle').val($(this).data('value'));
            var itemDropDown = document.activeElement.innerHTML;
            sessionStorage.setItem('OrderIdKL', JSON.stringify(@Model.tenderForma.competitiveListViewModel.Id));

            let item = [];
            item = JSON.parse(sessionStorage.getItem('data'));
            for (let i = 0; i < item.length; i++) {
                if (item[i].tenderNumber == itemDropDown && itemDropDown != "Новый тендер") {
                    let dateStr = Number(item[i].dateStart.replace(/\D+/g, ''));
                    sessionStorage.setItem('dataStart', JSON.stringify(dateStr));
                    let dateEnd = Number(item[i].dateEnd.replace(/\D+/g, ''));
                    sessionStorage.setItem('dataEnd', JSON.stringify(dateEnd));
                }
            }
            InitialDataStatusTender(itemDropDown);
        });

        function ModifClickDropDownList()
        {
            $(this).parents(".dropdown").find('.dropdown-toggle').html($(this).text() + ' <span class="caret"></span>');
            $(this).parents(".dropdown").find('.dropdown-toggle').val($(this).data('value'));
            var itemDropDown = document.activeElement.innerHTML;
            sessionStorage.setItem('OrderIdKL', JSON.stringify(@Model.tenderForma.competitiveListViewModel.Id));

            let item = [];
            item = JSON.parse(sessionStorage.getItem('data'));
            for (let i = 0; i < item.length; i++) {
                if (item[i].tenderNumber == itemDropDown && itemDropDown != "Новый тендер") {
                    let dateStr = Number(item[i].dateStart.replace(/\D+/g, ''));
                    sessionStorage.setItem('dataStart', JSON.stringify(dateStr));
                    let dateEnd = Number(item[i].dateEnd.replace(/\D+/g, ''));
                    sessionStorage.setItem('dataEnd', JSON.stringify(dateEnd));
                }
            }
            let dropDownListTender = document.getElementById('drpDwnListTend');
            $(dropDownListTender).text(itemDropDown);
            $(dropDownListTender).append(" <span class='caret'></span>");
            InitialDataStatusTender(itemDropDown);
        }

        var listTendersOrder = function InitModelRegisTender(params, tenderNumber)
        {
            let item = [];
            item = JSON.parse(sessionStorage.getItem('data'));
            for (let i = 0; i < item.length; i++)
            {
                if (item[i].tenderNumber == tenderNumber && params != null)
                {
                    item[i].processValue = params.processValue;
                    item[i].stageNumber = params.stageNumber;
                    item[i].dateStart = params.dateStart;
                    item[i].dateEnd = params.dateEnd;
                    item[i].remainingTime = params.remainingTime;
                    item[i].resultsTender = params.resultsTender;
                    item[i].lotStateName = params.lotStateName;
                    item[i].lotResultNote = params.lotResultNote;
                }
            }
            if (formValidationAccessAttributes.accesAddNewTender)
            {
                item.push(params);
            }
            for (let i = 0; i < item.length; i++) {
                if (item[i].tenderNumber == tenderNumber && tenderNumber != "Новый тендер") {
                    let dateStr = Number(item[i].dateStart.replace(/\D+/g, ''));
                    sessionStorage.setItem('dataStart', JSON.stringify(dateStr));
                    let dateEnd = Number(item[i].dateEnd.replace(/\D+/g, ''));
                    sessionStorage.setItem('dataEnd', JSON.stringify(dateEnd));
                }
            }
            sessionStorage.setItem('data', JSON.stringify(item));
            sessionStorage.setItem('OrderIdKL', JSON.stringify(@Model.tenderForma.competitiveListViewModel.Id));
            return item;
        }
        function InitialDataStatusTender(tenderNumber)
        {
            var item = [];
            if (formValidationAccessAttributes.accessInitTend) {
                @foreach (var item in Model.tenderForma.listRegisterTenders)
                {
                    @:item.push(@Html.Raw(Json.Encode(@item)));
                }
                sessionStorage.setItem('data', JSON.stringify(item));
                formValidationAccessAttributes.accessInitTend = false;
            }
            else
            {
                item = JSON.parse(sessionStorage.getItem('data'));
            }
            var thfStatusTender = document.getElementById('fStatusTender');
            var thCountTure = document.getElementById('CountTUR');
            var thTypeTender = document.getElementById('TypeTender');
            var thDateStartTender = document.getElementById('DateStartTender');
            var thDateEndTender = document.getElementById('DateEndTender');
            var thRemainingTM = document.getElementById('remainingTM');
            var tdBtnPostOne = document.getElementById('BtnPostOne');
            var tdBtnPostTwo = document.getElementById('BtnPostTwo');
            var tdResulttend = document.getElementById('TdResult');

            var childTh = thCountTure.getElementsByClassName('badge');
            var childThTypeTender = thTypeTender.getElementsByClassName('badge');
            var childthDateStartTender = thDateStartTender.getElementsByClassName('badge');
            var childthEndStartTender = thDateEndTender.getElementsByClassName('badge');
            var childthRemainingTM = thRemainingTM.getElementsByClassName('badge');
            var childtdBtnPostOne = tdBtnPostOne.getElementsByClassName('delete_link btn btn-success col-md-12 btn-sm btn-tend');
            var childtdBtnPostTwo = tdBtnPostTwo.getElementsByClassName('delete_link btn btn-success col-md-12 btn-sm btn-tend');

            if (formValidationAccessAttributes.accesAddNewTender)
            {
                let dropDownListTender = document.getElementById('drpDwnListTend');
                let dropdwmenu = document.getElementById('drpListMenu');
                $(dropdwmenu).html("");
                let childLi = $(dropdwmenu).append("<li><a href='#'>" + "Новый тендер" + "</a></li>");
                $(childLi).attr("onclick", "ModifClickDropDownList()");
                for (let i = 0; i < item.length; i++)
                {
                    let childLi = $(dropdwmenu).append("<li><a href='#'>" + item[i].tenderNumber + "</a></li>");
                    $(childLi).attr("onclick", "ModifClickDropDownList()");
                }
                dropDownListTender.innerHTML = "";
                $(dropDownListTender).append(tenderNumber+" <span class='caret'></span>");
                formValidationAccessAttributes.accesAddNewTender = false;
            }

            var options = {
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
            }
            for (let i = 0; i < item.length; i++)
            {
                if (tenderNumber == "Новый тендер")
                {
                    let btnReestTend = document.getElementById('BtnReestTendersKL');
                    $(btnReestTend).toggle(false);

                    $(thfStatusTender).attr("style", "font-size: 12px; padding:7px 7px 7px 7px; font-weight: 900;");
                    $(thfStatusTender).text('(не создан)');
                    $(childTh).text('н.д.');
                    if (childThTypeTender.length != 0)
                    {
                        $(childThTypeTender).text('н.д.');
                    }
                    else
                    {
                        thTypeTender.innerHTML = "";
                        $(thTypeTender).append("<span class='badge'>" + 'н.д.' + '</span>');
                    }
                    $(childthDateStartTender).text('н.д.');
                    $(childthEndStartTender).text('н.д.');
                    thRemainingTM.innerHTML = "";
                    $(thRemainingTM).append("<span class='badge'>" + 'н.д.' + '</span>');
                    $(childtdBtnPostOne).attr("onclick", "SendNotification(@Model.Id)");
                    $(childtdBtnPostOne).text("Создать тендер");
                    $(childtdBtnPostOne).attr("style", "display: initial;");
                    $(childtdBtnPostTwo).attr("style", "display: none;");
                    $("#contResTen").toggle(false);
                    break;
                }
                if (item[i].tenderNumber == tenderNumber)
                {
                    let btnReestTend = document.getElementById('BtnReestTendersKL');
                    $(btnReestTend).toggle(true);

                    if (item[i].processValue != "Завершен") {
                        $(thfStatusTender).attr("style", "font-size: 12px; padding:7px 7px 7px 7px; font-weight: 900;");
                        $(thfStatusTender).text(item[i].processValue);
                        $(childTh).text(item[i].stageNumber);
                        $(thTypeTender).attr("style", "font-size: 12px; padding:3px 7px 3px 7px; font-weight: 900;");
                        $(thTypeTender).text(item[i].stageMode);
                        let dateStr = Number(item[i].dateStart.replace(/\D+/g, ''));
                        let dateEnd = Number(item[i].dateEnd.replace(/\D+/g, ''));
                        let dateModalFormStart = new Date(dateStr);
                        let dateModalFormEnd = new Date(dateEnd);
                        var dateToFormatStr = dateModalFormStart.toLocaleString('ru', options).replace(',', '');
                        var dateToFormatEnd = dateModalFormEnd.toLocaleString('ru', options).replace(',', '');
                        $(childthDateStartTender).text(dateToFormatStr);
                        $(childthEndStartTender).text(dateToFormatEnd);

                        thRemainingTM.innerHTML = "";
                        $(thRemainingTM).append("До завершения: <span class='badge'>" + item[i].remainingTime + '</span>');

                        $(childtdBtnPostOne).attr("style", "display: none;");
                        $(childtdBtnPostTwo).attr("style", "display: initial;");

                        $("#contResTen").toggle(true);
                        tdResulttend.innerHTML = "";
                        if (item[i].lotStateName != null || item[i].lotResultNote != null || item[i].resultsTender != null) {
                            var valueLotState = (item[i].lotStateName != null) ? (item[i].lotResultNote != null) ? '<b>' + item[i].lotStateName + '. </b>' : '<b>' + item[i].lotStateName + '. </b><br/>' : "";
                            var valueLotResult = (item[i].lotResultNote != null) ? '<b>' + item[i].lotResultNote + '. </b>' + '<br/>' : "";
                            var resultTen = (item[i].resultsTender != null) ? item[i].resultsTender.split("Контрагент-победитель: ") : "";
                            var joinResultTen = "";
                            if (resultTen.length != 0) {
                                joinResultTen += "</br>";
                                for (var b = 1; b < resultTen.length; b++) {
                                    if (b > 1) { joinResultTen += "<hr>"; }
                                    joinResultTen += "<b>Контрагент-победитель: </b>" + resultTen[b] + "</br>";
                                }
                            }
                            $(tdResulttend).append("<span>" + valueLotState + valueLotResult + "<span style='font-size:12px;'>" + joinResultTen + "</span>" + "<\span>");
                            if (item[i].uuidFile != null) {
                                $(tdResulttend).append("<div><button style='display: initial; margin-top:5px;' class='btn btn-primary'>" + '<a href="/ExportToExcel/ConcursListTenderAsExcel?tenderUuid=' + item[i].uuidFile + '"style="color: white">' + 'Конк.лист тендера' + '</a>' + "</button></div>");
                            }
                        }
                        else {
                            $("#contResTen").toggle(false);
                        }
                    }
                    else
                    {
                        $(thfStatusTender).attr("style", "font-size: 12px; padding:7px 7px 7px 7px; font-weight: 900;");
                        $(thfStatusTender).text(item[i].processValue);
                        $(childTh).text(item[i].stageNumber);
                        $(thTypeTender).attr("style", "font-size: 12px; padding:3px 7px 3px 7px; font-weight: 900;");
                        $(thTypeTender).text(item[i].stageMode);
                        let dateStr = Number(item[i].dateStart.replace(/\D+/g, ''));
                        let dateEnd = Number(item[i].dateEnd.replace(/\D+/g, ''));
                        let dateModalFormStart = new Date(dateStr);
                        let dateModalFormEnd = new Date(dateEnd);
                        var dateToFormatStr = dateModalFormStart.toLocaleString('ru', options).replace(',', '');
                        var dateToFormatEnd = dateModalFormEnd.toLocaleString('ru', options).replace(',', '');
                        $(childthDateStartTender).text(dateToFormatStr);
                        $(childthEndStartTender).text(dateToFormatEnd);

                        thRemainingTM.innerHTML = "";
                        $(thRemainingTM).append("До завершения: <span class='badge'>" + item[i].remainingTime + '</span>');

                        $(childtdBtnPostOne).attr("onclick", "ThBottonOne()");
                        $(childtdBtnPostOne).text("Аннулировать");
                        $(childtdBtnPostOne).attr("style", "display: initial;");
                        $(childtdBtnPostTwo).attr("style", "display: initial;");

                        $("#contResTen").toggle(true);
                        tdResulttend.innerHTML = "";
                        if (item[i].lotStateName != null || item[i].lotResultNote != null || item[i].resultsTender != null) {
                            var valueLotState = (item[i].lotStateName != null) ? (item[i].lotResultNote != null) ? '<b>' + item[i].lotStateName + '. </b>' : '<b>' + item[i].lotStateName + '. </b><br/>' : "";
                            var valueLotResult = (item[i].lotResultNote != null) ? '<b>' + item[i].lotResultNote + '. </b>' + '<br/>' : "";
                            var resultTen = (item[i].resultsTender != null) ? item[i].resultsTender.split("Контрагент-победитель: ") : "";
                            var joinResultTen = "";
                            if (resultTen.length != 0)
                            {
                                joinResultTen += "</br>";
                                for (var b = 1; b < resultTen.length; b++)
                                {
                                    if (b > 1) { joinResultTen += "<hr>"; }
                                    joinResultTen += "<b>Контрагент-победитель: </b>" + resultTen[b] + "</br>";
                                }
                            }
                            $(tdResulttend).append("<span>" + valueLotState + valueLotResult + "<span style='font-size:12px;'>" + joinResultTen + "</span>" + "<\span>");
                            if (item[i].uuidFile != null)
                            {
                                $(tdResulttend).append("<div><button style='display: initial; margin-top:5px;' class='btn btn-primary'>" + '<a href="/ExportToExcel/ConcursListTenderAsExcel?tenderUuid=' + item[i].uuidFile + '"style="color: white">' + 'Конк.лист тендера' + '</a>' + "</button></div>");
                            }
                        }
                        else
                        {
                            $("#contResTen").toggle(false);
                        }
                    }
                }
            }
        }

        $("#UpdateTendData").click(function ()
        {
            let DropDownListTender = document.getElementById('drpDwnListTend');
            let tendNumber = Number(DropDownListTender.textContent.replace(" ", ""));
            $.ajax({
                type: "GET",
                async: true,
                url: "/OrderTender/UpdateStatusOrderTender",
                data:
                {
                    tenderNumber: tendNumber
                },
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    listTendersOrder(data, tendNumber);
                    var options = {
                        day: 'numeric',
                        month: 'numeric',
                        year: 'numeric',
                        hour: 'numeric',
                        minute: 'numeric'
                    }
                    var thfStatusTender = document.getElementById('fStatusTender');
                    var thCountTure = document.getElementById('CountTUR');
                    var thTypeTender = document.getElementById('TypeTender');
                    var thDateStartTender = document.getElementById('DateStartTender');
                    var thDateEndTender = document.getElementById('DateEndTender');
                    var thRemainingTM = document.getElementById('remainingTM');
                    var tdBtnPostOne = document.getElementById('BtnPostOne');
                    var tdBtnPostTwo = document.getElementById('BtnPostTwo');
                    var tdResulttend = document.getElementById('TdResult');
                    var childTh = thCountTure.getElementsByClassName('badge');
                    var childThTypeTender = thTypeTender.getElementsByClassName('badge');
                    var childthDateStartTender = thDateStartTender.getElementsByClassName('badge');
                    var childthEndStartTender = thDateEndTender.getElementsByClassName('badge');
                    var childthRemainingTM = thRemainingTM.getElementsByClassName('badge');
                    var childtdBtnPostOne = tdBtnPostOne.getElementsByClassName('delete_link btn btn-success col-md-12 btn-sm btn-tend');
                    var childtdBtnPostTwo = tdBtnPostTwo.getElementsByClassName('delete_link btn btn-success col-md-12 btn-sm btn-tend');

                    if (data.processValue != "Завершен") {
                        $(thfStatusTender).attr("style", "font-size: 12px; padding:7px 7px 7px 7px; font-weight: 900;");
                        $(thfStatusTender).text(data.processValue);
                        $(childTh).text(data.stageNumber);
                        let dateStr = Number(data.dateStart.replace(/\D+/g, ''));
                        let dateEnd = Number(data.dateEnd.replace(/\D+/g, ''));
                        let dateModalFormStart = new Date(dateStr);
                        let dateModalFormEnd = new Date(dateEnd);
                        var dateToFormatStr = dateModalFormStart.toLocaleString('ru', options).replace(',', '');
                        var dateToFormatEnd = dateModalFormEnd.toLocaleString('ru', options).replace(',', '');

                        $(childthDateStartTender).text(dateToFormatStr);
                        $(childthEndStartTender).text(dateToFormatEnd);

                        thRemainingTM.innerHTML = "";
                        $(thRemainingTM).append("До завершения: <span class='badge'>" + data.remainingTime + '</span>');

                        $(childtdBtnPostOne).attr("style", "display: none;");
                        $(childtdBtnPostTwo).attr("style", "display: initial;");

                        $("#contResTen").toggle(true);
                        tdResulttend.innerHTML = "";
                        if (item[i].lotStateName != null || item[i].lotResultNote != null || item[i].resultsTender != null) {
                            var valueLotState = (item[i].lotStateName != null) ? (item[i].lotResultNote != null) ? '<b>' + item[i].lotStateName + '. </b>' : '<b>' + item[i].lotStateName + '. </b><br/>' : "";
                            var valueLotResult = (item[i].lotResultNote != null) ? '<b>' + item[i].lotResultNote + '. </b>' + '<br/>' : "";
                            var resultTen = (item[i].resultsTender != null) ? item[i].resultsTender.split("Контрагент-победитель: ") : "";
                            var joinResultTen = "";
                            if (resultTen.length != 0) {
                                joinResultTen += "</br>";
                                for (var b = 1; b < resultTen.length; b++) {
                                    if (b > 1) { joinResultTen += "<hr>"; }
                                    joinResultTen += "<b>Контрагент-победитель: </b>" + resultTen[b] + "</br>";
                                }
                            }
                            $(tdResulttend).append("<span>" + valueLotState + valueLotResult + "<span style='font-size:12px;'>" + joinResultTen + "</span>" + "<\span>");
                            if (item[i].uuidFile != null) {
                                $(tdResulttend).append("<div><button style='display: initial; margin-top:5px;' class='btn btn-primary'>" + '<a href="/ExportToExcel/ConcursListTenderAsExcel?tenderUuid=' + item[i].uuidFile + '"style="color: white">' + 'Конк.лист тендера' + '</a>' + "</button></div>");
                            }
                        }
                        else {
                            $("#contResTen").toggle(false);
                        }
                    }
                    else
                    {
                        $(thfStatusTender).attr("style", "font-size: 12px; padding:7px 7px 7px 7px; font-weight: 900;");
                        $(thfStatusTender).text(data.processValue);
                        $(childTh).text(data.stageNumber);
                        let dateStr = Number(data.dateStart.replace(/\D+/g, ''));
                        let dateEnd = Number(data.dateEnd.replace(/\D+/g, ''));
                        let dateModalFormStart = new Date(dateStr);
                        let dateModalFormEnd = new Date(dateEnd);
                        var dateToFormatStr = dateModalFormStart.toLocaleString('ru', options).replace(',', '');
                        var dateToFormatEnd = dateModalFormEnd.toLocaleString('ru', options).replace(',', '');
                        $(childthDateStartTender).text(dateToFormatStr);
                        $(childthEndStartTender).text(dateToFormatEnd);

                        thRemainingTM.innerHTML = "";
                        $(thRemainingTM).append("До завершения: <span class='badge'>" + data.remainingTime + '</span>');
                        $(childtdBtnPostOne).attr("onclick", "ThBottonOne()");
                        $(childtdBtnPostOne).text("Аннулировать");
                        $(childtdBtnPostOne).attr("style", "display: initial;");
                        $(childtdBtnPostTwo).attr("style", "display: initial;");

                        $("#contResTen").toggle(true);
                        tdResulttend.innerHTML = "";
                        if (item[i].lotStateName != null || item[i].lotResultNote != null || item[i].resultsTender != null) {
                            var valueLotState = (item[i].lotStateName != null) ? (item[i].lotResultNote != null) ? '<b>' + item[i].lotStateName + '. </b>' : '<b>' + item[i].lotStateName + '. </b><br/>' : "";
                            var valueLotResult = (item[i].lotResultNote != null) ? '<b>' + item[i].lotResultNote + '. </b>' + '<br/>' : "";
                            var resultTen = (item[i].resultsTender != null) ? item[i].resultsTender.split("Контрагент-победитель: ") : "";
                            var joinResultTen = "";
                            if (resultTen.length != 0) {
                                joinResultTen += "</br>";
                                for (var b = 1; b < resultTen.length; b++) {
                                    if (b > 1) { joinResultTen += "<hr>"; }
                                    joinResultTen += "<b>Контрагент-победитель: </b>" + resultTen[b] + "</br>";
                                }
                            }
                            $(tdResulttend).append("<span>" + valueLotState + valueLotResult + "<span style='font-size:12px;'>" + joinResultTen + "</span>" + "<\span>");
                            if (item[i].uuidFile != null) {
                                $(tdResulttend).append("<div><button style='display: initial; margin-top:5px;' class='btn btn-primary'>" + '<a href="/ExportToExcel/ConcursListTenderAsExcel?tenderUuid=' + item[i].uuidFile + '"style="color: white">' + 'Конк.лист тендера' + '</a>' + "</button></div>");
                            }
                        }
                        else {
                            $("#contResTen").toggle(false);
                        }
                    }
                },
                error: function () {
                    CreateNotification("errorStatuse", null);
                    $("#jqxNotification").jqxNotification({
                        position: "bottom-right", opacity: 0.8,
                        autoOpen: true, autoClose: true, template: "error"
                    });
                    DeleteNotification();
                }
            });
        });

        function ThBottonOne()
        {

        }

        function OnIndexCall(elem) {
            var orderId = Number(JSON.parse(sessionStorage.getItem('OrderIdKL')));
            var dataStart = Number(JSON.parse(sessionStorage.getItem('dataStart')));
            var dataEnd = Number(JSON.parse(sessionStorage.getItem('dataEnd')));
            return $(elem).attr('href', $(elem).attr('href') + '?orderId=' + orderId + '&dataStart=' + dataStart + '&dataEnd=' + dataEnd + '&active=' + true);
        }
    </script>
}