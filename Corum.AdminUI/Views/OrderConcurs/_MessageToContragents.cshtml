@model Corum.Models.OrderNavigationResult<Corum.Models.ViewModels.OrderConcurs.OrderCompetitiveListViewModel>

<link type="text/css" rel="stylesheet" href="~/Content/Tender/MessageStyle.css" />
<container style="display:none;">
    <div class="contSendMessage" id="partialMessageToContr">
        <p class="pWinner">Победителям:</p>
        <div id="sectOtherWinner" class="sectOtherColor">

        </div>


        <p class="pWinner">Проигравшим:</p>
        <div id="sectOtherColor" class="sectOtherColor">

        </div>
    </div>

</container>


<script>
    let allContragents = [];
    let competitiveListInfo = JSON.parse(sessionStorage.getItem('CompetitiveListInfo'));
    let dataAllTender = JSON.parse(sessionStorage.getItem('data'));
    let downloadingDateForTender = undefined;
    let industryName_;
    class Winner {
        constructor(expeditorName, numberTender, order, transportationType, route, nameOfCargo, cargoWeight, dowloadingDate,
            unloadingDate, description, price, paymentDeferment, emailContragent, formUuid) {
            this.expeditorName = expeditorName;
            this.numberTender = numberTender;
            this.order = order;
            this.transportationType = transportationType;
            this.route = route;
            this.nameOfCargo = nameOfCargo;
            this.cargoWeight = cargoWeight;
            this.dowloadingDate = dowloadingDate;
            downloadingDateForTender = dowloadingDate;
            this.unloadingDate = unloadingDate;
            this.description = description;
            this.price = price;
            this.paymentDeferment = paymentDeferment;
            this.isWinner = true;
            this.emailContragent = emailContragent;
            this.routeShort = GetInfoAboutShortRoute(numberTender);
            this.formUuid = formUuid;
        }
        numberOfVehicles = 1;
        countWinner = 1;
    };
    class Loser {
        constructor(expeditorName, numberTender, order, transportationType, route, nameOfCargo, cargoWeight, price, emailContragent) {
            this.expeditorName = expeditorName;
            this.numberTender = numberTender;
            this.order = order;
            this.transportationType = transportationType;
            this.route = route;
            this.nameOfCargo = nameOfCargo;
            this.cargoWeight = cargoWeight;
            this.price = price;
            this.emailContragent = emailContragent;
            this.routeShort = GetInfoAboutShortRoute(numberTender);
        }
        countLoser = 1;
    };
    let listWinners = [];
    let listLosers = [];
    let listSameWinners = [];
    let listSameLosers = [];

    // Функция-конструктор (класс) для получения данных HTML элементов из формы для контрагента-победителя
    function WinnersIdHTMLElements() {
        this.isSelected = undefined;
        this.expeditorName = undefined;
        this.numberOfVehicles = undefined;
        this.countWinner = undefined;
        this.senderEmail = undefined;
        this.recipientEmail = undefined;
        this.upperpartOfTheMessage = undefined;
        this.dataTable = undefined;
        this.messageFooter = undefined;
        this.routeShort = undefined;
    }

    // Функция-конструктор (класс) для получения данных HTML элементов из формы для проигравшего контрагента
    function LoserIdHTMLElements() {
        this.isSelected = undefined;
        this.expeditorName = undefined;
        this.numberOfVehicles = undefined;
        this.countWinner = undefined;
        this.senderEmail = undefined;
        this.recipientEmail = undefined;
        this.upperartOfTheMessage = undefined;
        this.dataTable = undefined;
        this.messageFooter = undefined;
        this.routeShort = undefined;
    }
    // Класс для инкапсуляции всех данных, которые нужно отправить контрагентам после изменений в модальном окне
    class InfoToContragentsAfterChange{
        constructor() {
        this.listWinnersInfoAfterChange = [];
        this.listLosersInfoAfterChange = [];
        }
    }
    class WinnersInfoAfterChange {
        constructor() {
        this.isSelected = undefined;
        this.expeditorName = undefined;
        this.numberOfVehicles = undefined;
        this.count = undefined;
        this.senderEmail = undefined;
        this.recipientEmail = undefined;
        this.upperartOfTheMessage = undefined;
        this.dataTable = undefined;
        this.messageFooter = undefined;
        this.tr = [];
        this.thContent = [];
        this.tdContent = [];
        this.bodyHTML = undefined;
        this.subject = undefined;
        }
    }
    class LosersInfoAfterChange {
        constructor() {
        this.isSelected = undefined;
        this.expeditorName = undefined;
        this.numberOfVehicles = undefined;
        this.count= undefined;
        this.senderEmail = undefined;
        this.recipientEmail = undefined;
        this.upperartOfTheMessage = undefined;
        this.dataTable = undefined;
        this.messageFooter = undefined;
        this.tr = [];
        this.thContent = [];
        this.tdContent = [];
        this.bodyHTML = undefined;
        this.subject = undefined;
        }
    }


    let listWinnersIdHTMLElements = [];
    let listLoserIdHTMLElements = [];
    let listLink_;

    function SendMessageToContragents(orderId) {


        $('#partialMessageToContr')
            .dialog(
                {
                    dialogClass: "jq-dialog-window-custom  modal_dialog",
                    autoOpen: false,
                    width: 800,
                    top: 50,
                    resizable: false,
                    tags: true,
                    title: "Уведомление контрагентам",
                    modal: true,
                    open: function (event, ui) {
                        let btnFocus = document.getElementById('btnCancelFoc');
                        let linkToFormContr = document.getElementById('linkToFormContr');
                        $(linkToFormContr).blur();
                        $(btnFocus).blur();

                        let DropDownListTender = document.getElementById('drpDwnListTend');
                        let tendNumber = Number(DropDownListTender.textContent.replace(" ", ""));
                        DeleteOldDataContragents();
                        SetDataMessageToContragents(tendNumber);


                    },

                    close: function (event, ui) {

                        $(this).dialog('destroy');
                    },
                    create: function (event, ui) {
                        $("#disable_all").addClass("disable_all");
                    },
                    beforeClose: function (event, ui) {
                        $("#disable_all").removeClass("disable_all");
                    },
                    buttons:
                        [
                            {
                                text: "Отмена",
                                "class": 'cancel-btn btn btn-primary',
                                id: "btnCancelFoc",
                                click: function () {
                                    $(this).dialog("close");
                                }
                            },
                            {
                                text: "Отправить",
                                "class": 'btn btn-success',
                                click: function () {
                                    let orderId = JSON.parse(sessionStorage.getItem('OrderIdKL'));
                                    let DropDownListTender = document.getElementById('drpDwnListTend');
                                    let tendNumber = Number(DropDownListTender.textContent.replace(" ", ""));
                                    let InfoToContragentsAfterCh = new InfoToContragentsAfterChange();
                                    let modelWinnders = listWinnersIdHTMLElements;
                                    for (const item of modelWinnders) {
                                        let winnerAfterChange = new WinnersInfoAfterChange();
                                        winnerAfterChange.isSelected = item.isSelected.checked;
                                        winnerAfterChange.expeditorName = item.expeditorName;
                                        winnerAfterChange.numberOfVehicles = item.numberOfVehicles;
                                        winnerAfterChange.count = item.countWinner;
                                        for(const value of item.senderEmail){
                                            if (value.selected) {
                                                winnerAfterChange.senderEmail = value.text;
                                            }
                                        };
                                        for (const value of item.dataTable.childNodes[0].childNodes) {
                                            winnerAfterChange.tr.push(value);
                                        }
                                        for (const value of winnerAfterChange.tr) {
                                            winnerAfterChange.thContent.push(value.childNodes[0].outerText);
                                            winnerAfterChange.tdContent.push(value.childNodes[1].outerText);
                                        }
                                        winnerAfterChange.thContent.push('Экспедитор');
                                        winnerAfterChange.tdContent.push(item.expeditorName);
                                        winnerAfterChange.recipientEmail = item.recipientEmail.value;
                                        winnerAfterChange.upperartOfTheMessage = item.upperpartOfTheMessage.outerHTML;
                                        winnerAfterChange.dataTable = item.dataTable.outerHTML;
                                        winnerAfterChange.messageFooter = item.messageFooter.outerHTML;
                                        winnerAfterChange.subject = `№${tendNumber}, (${orderId}) ${item.routeShort}, погрузка ${downloadingDateForTender}`;
                                        winnerAfterChange.bodyHTML = CreateHTMLBody(winnerAfterChange.tr, winnerAfterChange.thContent,
                                            winnerAfterChange.tdContent, winnerAfterChange.upperartOfTheMessage, winnerAfterChange.messageFooter);
                                        winnerAfterChange.description = item.description;
                                        winnerAfterChange.formUuid = item.formUuid;
                                        winnerAfterChange.industryId = item.industryId;
                                        winnerAfterChange.orderId = item.orderId;
                                        winnerAfterChange.price = item.price;
                                        winnerAfterChange.tenderNumber = item.tenderNumber;
                                        winnerAfterChange.tenderItemUuid = item.tenderItemUuid;
                                        winnerAfterChange.flag = false;
                                        winnerAfterChange.industryName = industryName_;
                                        winnerAfterChange.routeShort = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.Route));
                                        winnerAfterChange.nameCargo = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.TruckDescription));
                                        winnerAfterChange.weightCargo = parseFloat(@Html.Raw(Json.Encode(Model.CompetitiveListInfo.Weight)));
                                        winnerAfterChange.dataDownload = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.FromDate));
                                        winnerAfterChange.dataUnload = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.ToDate));
                                        allContragents = (JSON.parse(sessionStorage.getItem('listDisplayValues')))[tendNumber];
                                        for (const val of allContragents) {
                                            if (val.emailContragent == winnerAfterChange.recipientEmail || val.ExpeditorName == item.expeditorName) {
                                                winnerAfterChange.DelayPayment = parseInt(val.DaysDelayStep2);
                                                break;
                                            }
                                        };


                                        if (winnerAfterChange.isSelected) {
                                        InfoToContragentsAfterCh.listWinnersInfoAfterChange.push(winnerAfterChange);
                                        }
                                    }

                                    let modelLosers = listLoserIdHTMLElements;
                                    for (const item of modelLosers) {
                                        let loserAfterChange = new LosersInfoAfterChange();
                                        loserAfterChange.isSelected = item.isSelected.checked;
                                        loserAfterChange.expeditorName = item.expeditorName;
                                        loserAfterChange.numberOfVehicles = item.numberOfVehicles;
                                        loserAfterChange.count = item.countWinner;
                                        for(const value of item.senderEmail){
                                            if (value.selected) {
                                                loserAfterChange.senderEmail = value.text;
                                            }
                                        };
                                        for (const value of item.dataTable.childNodes[0].childNodes) {
                                            loserAfterChange.tr.push(value);
                                        }
                                        for (const value of loserAfterChange.tr) {
                                            loserAfterChange.thContent.push(value.childNodes[0].outerText);
                                            loserAfterChange.tdContent.push(value.childNodes[1].outerText);
                                        }
                                        loserAfterChange.thContent.push('Экспедитор');
                                        loserAfterChange.tdContent.push(item.expeditorName);
                                        loserAfterChange.recipientEmail = item.recipientEmail.value;
                                        loserAfterChange.upperartOfTheMessage = item.upperartOfTheMessage.outerHTML;
                                        loserAfterChange.dataTable = item.dataTable.outerHTML;
                                        loserAfterChange.messageFooter = item.messageFooter.outerHTML;
                                        loserAfterChange.subject = `№${tendNumber}, (${orderId}) ${item.routeShort}, погрузка ${downloadingDateForTender}`;
                                        loserAfterChange.bodyHTML = CreateHTMLBody(loserAfterChange.tr, loserAfterChange.thContent,
                                            loserAfterChange.tdContent, loserAfterChange.upperartOfTheMessage, loserAfterChange.messageFooter);

                                        loserAfterChange.description = item.description;
                                        loserAfterChange.formUuid = item.formUuid;
                                        loserAfterChange.industryId = item.industryId;
                                        loserAfterChange.orderId = item.orderId;
                                        loserAfterChange.price = item.price;
                                        loserAfterChange.tenderNumber = item.tenderNumber;
                                        loserAfterChange.tenderItemUuid = item.tenderItemUuid;
                                        loserAfterChange.industryName = industryName_;
                                        loserAfterChange.routeShort = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.Route));
                                        loserAfterChange.nameCargo = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.TruckDescription));
                                        loserAfterChange.weightCargo = parseFloat(@Html.Raw(Json.Encode(Model.CompetitiveListInfo.Weight)));
                                        loserAfterChange.dataDownload = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.FromDate));
                                        loserAfterChange.dataUnload = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.ToDate));
                                        allContragents = (JSON.parse(sessionStorage.getItem('listDisplayValues')))[tendNumber];
                                        for (const val of allContragents) {
                                            if (val.emailContragent == loserAfterChange.recipientEmail || val.ExpeditorName == item.expeditorName) {
                                                loserAfterChange.DelayPayment = parseInt(val.DaysDelayStep2);
                                                break;
                                            }
                                        };

                                        if (loserAfterChange.isSelected) {
                                        InfoToContragentsAfterCh.listLosersInfoAfterChange.push(loserAfterChange);
                                        }
                                    }

                                    let listInfoToCont = JSON.stringify(InfoToContragentsAfterCh);
                                    $('#loading-indicator').show();
                                    $.ajax({
                                        type: "POST",
                                        async: false,
                                        url: "/OrderTender/SendMessageToContragents",
                                        data: listInfoToCont,
                                        dataType: "json",
                                        contentType: 'application/json; charset=utf-8',
                                        success: function (data) {
                                            var dataParse = data;
                                            $('#loading-indicator').hide();
                                            if ((dataParse.listInfoToCont.listLosersInfoAfterChange != null || dataParse.listInfoToCont.listWinnersInfoAfterChange != null) && dataParse.isAvaliable) {
                                                    CreateNotificationToContragents("success");
                                                    $("#jqxNotification").jqxNotification({
                                                        position: "bottom-right", opacity: 1, animationCloseDelay: 1000, autoCloseDelay: 5000,
                                                        autoOpen: true, autoClose: true, template: "success"
                                                    });
                                                    DeleteNotification();
                                            }
                                            if ((dataParse.listInfoToCont.listLosersInfoAfterChange != null || dataParse.listInfoToCont.listWinnersInfoAfterChange != null) && !dataParse.isAvaliable) {
                                                    CreateNotificationToContragents("warning");
                                                    $("#jqxNotification").jqxNotification({
                                                        position: "bottom-right", opacity: 1, animationCloseDelay: 1000, autoCloseDelay: 5000,
                                                        autoOpen: true, autoClose: true, template: "warning"
                                                    });
                                                    DeleteNotification();
                                            }
                                            if ((dataParse.listInfoToCont.listLosersInfoAfterChange == null || dataParse.listInfoToCont.listWinnersInfoAfterChange == null) && !dataParse.isAvaliable) {
                                                    CreateNotificationToContragents("error");
                                                    $("#jqxNotification").jqxNotification({
                                                        position: "bottom-right", opacity: 1, animationCloseDelay: 1000, autoCloseDelay: 5000,
                                                        autoOpen: true, autoClose: true, template: "error"
                                                    });
                                                    DeleteNotification();
                                            }
                                        },
                                        error: function () {
                                            $('#loading-indicator').hide();
                                        }
                                    });
                                    $(this).dialog("close");

                                }
                            }
                        ]
                });

        $('#partialMessageToContr').dialog('open');

        return;
    }

    // Динамическое создание jqxNotification
        function CreateNotificationToContragents(status) {
            var rootTab3 = document.getElementById('JqxCrNot');
            var div = document.createElement("div");
            div.id = "jqxNotification";
            div.className = "col-md-4";
            switch (status) {
                case "success": div.innerHTML = "<h4><span style='color: white'>Уведомление успешно отправлено!" + "<span style='color: white; font-size: 18px;' class='badge'>"+"</span >"+"</span ></h4 > "; break;
                case "warning": div.innerHTML = "<h4><span style='color: white'>Уведомление ранее было отправлено!</span></h4>"; break;
                case "error": div.innerHTML = "<h4><span style='color: white'>Уведомление не отправлено!</span></h4>"; break;
                default: break;
            }
            rootTab3.appendChild(div);
        }

    // Вытягивание краткой информации о маршруте перевозки по заявке
    function GetInfoAboutShortRoute(numberTender) {
        let shortRoute = '';
        if (dataAllTender != null) {
            for (const item of dataAllTender) {
                if (item.tenderNumber == numberTender) {
                    shortRoute = `${item.downloadAddress} - ${item.unloadAddress}`;
                }
            }
        }
        return shortRoute;
    }


    // Формирование тела сообщения для контрагента на уровне почтового мессенджера
    function CreateHTMLBody(tr, thContent, tdContent, parhHeader, parhFooter) {
        let bodyHTML = "";
        let parhHead = jQuery.parseHTML(parhHeader);
        parhHead[0].className = "";
        $(parhHead).attr('style', 'line-height: 1.5;');

        let table = document.createElement('table');
        $(table).attr('style', 'text-align: left;');
        let tbody = document.createElement('tbody');
        for (let i = 0; i < tr.length+1; i++) {
            let tr = document.createElement('tr');
            let th = document.createElement('th');
            th.innerText = thContent[i];
            if ((i + 1) % 2 != 0) {
                $(th).attr('style', "padding: 3px; font-size: 16px; font-family: 'Times New Roman', Times, serif; background-color: rgb(212, 212, 212);");
            }
            else {
                $(th).attr('style', "padding: 3px; font-size: 16px; font-family: 'Times New Roman', Times, serif;");
            }
            tr.appendChild(th);

            let td = document.createElement('td');
            td.innerText = tdContent[i];
            if ((i + 1) % 2 != 0) {
                $(td).attr('style', "margin-left: 2px; padding: 3px; font-size: 16px; font-family: 'Times New Roman', Times, serif; background-color: rgb(212, 212, 212);");
            }
            else {
                $(td).attr('style', "margin-left: 2px; padding: 3px; font-size: 16px; font-family: 'Times New Roman', Times, serif;");
            }
            tr.appendChild(td);
            tbody.appendChild(tr);
        }
        table.appendChild(tbody);

        let parhAfterTable = document.createElement('p');
        parhAfterTable.innerHTML = 'Данное письмо сгенерировано автоматически. ПОЖАЛУЙСТА, НЕ ОТВЕЧАЙТЕ НА НЕГО!<br>В случае возникновения вопросов - обратитесь по адресу Заказ грузовых перевозок <a href="mailto:avtogruz@corum.com" style="text-decoration: none;">avtogruz@corum.com</a>,<br>подругим вопросам – к контактному лицу заказчика.';
        $(parhAfterTable).attr('style', 'font-style: italic;');

        let parhFoot = jQuery.parseHTML(parhFooter);
        parhFoot[0].className = "";
        $(parhFoot).attr('style', 'line-height: 1.5; margin-top: 40px;');
        bodyHTML = parhHead[0].outerHTML + table.outerHTML + parhAfterTable.outerHTML + parhFoot[0].outerHTML;

        return bodyHTML;
    }

    // Заполнение данных о победителях и проигравших контрагентах в модальное окно
    function SetDataMessageToContragents(tenderNumber) {
        allContragents = (JSON.parse(sessionStorage.getItem('listDisplayValues')))[tenderNumber];
        if (allContragents != null && allContragents.length != 0) {
            for (const val of allContragents) {
                switch (val.IsSelectedId) {
                    case false: {
                        listLosers.push(val);
                        break;
                    }
                    case true: {
                        listWinners.push(val);
                        break;
                    }
                }
            };

            for (let x = 0; x < listWinners.length; x++) {

                if (listWinners[x] != undefined) {
                    industryName_ = listWinners[x].NameSpecification;
                    listSameWinners.push(new Winner(listWinners[x].ExpeditorName, listWinners[x].tenderNumber, listWinners[x].OrderId,
                        listWinners[x].NameSpecification, @Html.Raw(Json.Encode(Model.CompetitiveListInfo.Route)), @Html.Raw(Json.Encode(Model.CompetitiveListInfo.TruckDescription)),
                        listWinners[x].cargoWeight, @Html.Raw(Json.Encode(Model.CompetitiveListInfo.FromDate)), @Html.Raw(Json.Encode(Model.CompetitiveListInfo.ToDate)), listWinners[x].itemDescription,
                        listWinners[x].CarCost, listWinners[x].DaysDelayStep2, listWinners[x].emailContragent, FindRegisterDataAboutMessage(listWinners[x].emailContragent, x)));
                }
            }

            for (let x = 0; x < listLosers.length; x++) {
                if (listLosers[x] != undefined) {
                    listSameLosers.push(new Loser(listLosers[x].ExpeditorName, listLosers[x].tenderNumber, listLosers[x].OrderId,
                        listLosers[x].NameSpecification, @Html.Raw(Json.Encode(Model.CompetitiveListInfo.Route)), @Html.Raw(Json.Encode(Model.CompetitiveListInfo.TruckDescription)),
                        listLosers[x].cargoWeight, listLosers[x].CarCost, listLosers[x].emailContragent));
                }
            }

        }
        CreateHTMLTableWithDataWinnersContragents(listLink_);
        CreateHTMLTableWithDataLosersContragents(listLink_);
    }

    function FindRegisterDataAboutMessage(emailContragents, count) {
        let listWinnersRegisty =  @Html.Raw(Json.Encode(Model.ListFormUuidToContragents));
        let formUuid = '';
        if (listWinnersRegisty.length != 0) {
            formUuid = listWinnersRegisty[count].formUuid;
        }
        return formUuid;
    }

    // Метод для создания и вывода данных о победителях контрагентах в модальное окно
    function CreateHTMLTableWithDataWinnersContragents(listLink) {
        let sectOtherWinner = document.getElementById('sectOtherWinner');
        let flag = false;
        let count = 0;

        for (const val of listSameWinners) {
            let winnerObj = new WinnersIdHTMLElements();
            winnerObj.expeditorName = val.expeditorName;
            winnerObj.numberOfVehicles = val.numberOfVehicles;
            winnerObj.countWinner = val.countWinner;
            winnerObj.routeShort = val.routeShort;

            // Создание вложенного контейнера div
            let forcheckBoxContrDIV = document.createElement('div');
            $(forcheckBoxContrDIV).addClass('forcheckBoxContr');

            // Создание чекбокса для выбора контрагента
            let checkboxContragent = document.createElement('input');
            $(checkboxContragent).attr('type', 'checkbox');
            $(checkboxContragent).attr('checked', 'checked');
            forcheckBoxContrDIV.appendChild(checkboxContragent);
            winnerObj.isSelected = checkboxContragent;
            let detWinner = document.createElement('details');
            $(detWinner).attr('style', 'margin-top: 1px;');

            // Создание выпадающего заголовка контрагента
            let summary = document.createElement('summary');
            let prepos = `${val.expeditorName}`;
            $(summary).text(prepos);
            detWinner.appendChild(summary);

            // Создание контейнера в выпадающем элементе
            let messageToContragents = document.createElement('div');
            $(messageToContragents).addClass('messageToContrag');

            // Создание вложенного контейнера в messageToContragents
            let messFromTo = document.createElement('div');
            $(messFromTo).addClass('messFromTo');

            // Создание вложенного контейнера в messFromTo
            let messFrTo = document.createElement('div');
            $(messFrTo).addClass('messFrTo');

            // Создание labels
            let labelOne = document.createElement('label');
            $(labelOne).attr('style', 'margin-bottom: 8px;');
            $(labelOne).text('Отправитель:');
            messFrTo.appendChild(labelOne);
            let labelTwo = document.createElement('label');
            $(labelTwo).text('Получатель:');
            $(labelTwo).attr('style', 'margin-bottom: 0px;');
            messFrTo.appendChild(labelTwo);
            messFromTo.appendChild(messFrTo);

            // Создание вложенного контейнера в messFromTo
            let messFrToSelect = document.createElement('div');
            $(messFrToSelect).addClass('messFrToSelect');

            let select = document.createElement('select');
            $(select).attr('name', 'selectMenedger');
            $(select).addClass('inpMess');
            $(select).attr('style', 'max-width: 100%; margin-bottom: 5px;');

            let optionOne = document.createElement('option');
            $(optionOne).attr('selected', 'selected');
            $(optionOne).attr('value', 'Autogruz');
            $(optionOne).text('avtogruz@corum.com');
            select.appendChild(optionOne);
            let optionTwo = document.createElement('option');
            $(optionTwo).attr('value','Yalovega');
            $(optionTwo).text('yalovega.denis@corum.com');
            select.appendChild(optionTwo);
            let optionThree = document.createElement('option');
            $(optionThree).attr('value','Vlasov');
            $(optionThree).text('vlasov.yuriy@corum.com');
            select.appendChild(optionThree);
            messFrToSelect.appendChild(select);
            winnerObj.senderEmail = select;

            let inpMess = document.createElement('input');
            $(inpMess).addClass('inpMess');
            $(inpMess).attr('type', 'text');
            $(inpMess).attr('name', 'From');
            $(inpMess).attr('value', `${val.emailContragent}`);
            $(inpMess).attr('style', 'max-width: 100%; padding-left: 2px; padding-right: 0px; border: 1px solid gray;');
            messFrToSelect.appendChild(inpMess);
            messFromTo.appendChild(messFrToSelect);
            messageToContragents.appendChild(messFromTo);
            winnerObj.recipientEmail = inpMess;

            // Создание вложенного контейнера в messageToContragents
            let messBody = document.createElement('div');
            $(messBody).addClass('messBody');

            // Создание параграфа, вложенного в объект messBody
            let preWinParh = document.createElement('p');
            $(preWinParh).addClass('preWin');
            let uuid;
            let link;
            if (val.formUuid != '') {
                link = 'http://localhost:14589/FormContragents/SendFormToCorumSource?' + `formUuid=${val.formUuid}`;
            }
            else {
                if (listLink != null) {
                uuid = listLink[count].formUuid;
                link = 'http://localhost:14589/FormContragents/SendFormToCorumSource?' + `formUuid=${uuid}`;
                }
                else {
                uuid = uuidv4();
                link = 'http://localhost:14589/FormContragents/SendFormToCorumSource?' + `formUuid=${uuid}`;
                }

            }

            $(preWinParh).append(`Уважаемый партнер.<br>Спасибо за участие.<br>Вы стали победителем.<br>Прошу направить данные по автомобилю/ям, водителю в течение 30 минут,<br>заполнив форму перейдя по <a id="linkToFormContr" class="linkToForm" href="${link}" title="ссылка на форму">ссылке</a>`);
            messBody.appendChild(preWinParh);
            winnerObj.upperpartOfTheMessage = preWinParh;

            // Создание таблицы
            let tableWinner = document.createElement('table');
            $(tableWinner).addClass('tbWinner');

            // Создание тела таблицы tbody
            let tbody = document.createElement('tbody');

            // Создание первой строки таблицы
            let trOne = document.createElement('tr');
            let thOne = document.createElement('th');
            $(thOne).addClass('thMessCont tdThMessCont');
            $(thOne).text('Заявка/номер');
            trOne.appendChild(thOne);
            let tdOne = document.createElement('td');
            $(tdOne).addClass('tdThMessCont');
            $(tdOne).text(`Тендер №${val.numberTender}, Заявка №${val.order}`);
            trOne.appendChild(tdOne);
            tbody.appendChild(trOne);

            // Создание второй строки таблицы
            let trTwo = document.createElement('tr');
            let thTwo = document.createElement('th');
            $(thTwo).addClass('thMessCont tdThMessCont');
            $(thTwo).text('Тип перевозки');
            trTwo.appendChild(thTwo);
            let tdTwo = document.createElement('td');
            $(tdTwo).addClass('tdThMessCont');
            $(tdTwo).text(`${val.transportationType}`);
            trTwo.appendChild(tdTwo);
            tbody.appendChild(trTwo);


            // Создание третьей строки таблицы
            let trThree = document.createElement('tr');
            let thThree = document.createElement('th');
            $(thThree).addClass('thMessCont tdThMessCont');
            $(thThree).text('Маршрут');
            trThree.appendChild(thThree);
            let tdThree = document.createElement('td');
            $(tdThree).addClass('tdThMessCont');
            $(tdThree).text(`${val.route}`);
            trThree.appendChild(tdThree);
            tbody.appendChild(trThree);


            // Создание четвертой строки таблицы
            let trFour = document.createElement('tr');
            let thFour = document.createElement('th');
            $(thFour).addClass('thMessCont tdThMessCont');
            $(thFour).text('Наименование груза/ Вес, т');
            trFour.appendChild(thFour);
            let tdFour = document.createElement('td');
            $(tdFour).addClass('tdThMessCont');
            $(tdFour).text(`${val.nameOfCargo} / ${val.cargoWeight}`);
            trFour.appendChild(tdFour);
            tbody.appendChild(trFour);


            // Создание пятой строки таблицы
            let trFive = document.createElement('tr');
            let thFive = document.createElement('th');
            $(thFive).addClass('thMessCont tdThMessCont');
            $(thFive).text('Дата загрузки требуемая');
            trFive.appendChild(thFive);
            let tdFive = document.createElement('td');
            $(tdFive).addClass('tdThMessCont');
            $(tdFive).text(`${val.dowloadingDate}`);
            trFive.appendChild(tdFive);
            tbody.appendChild(trFive);

            // Создание шестой строки таблицы
            let trSix = document.createElement('tr');
            let thSix = document.createElement('th');
            $(thSix).addClass('thMessCont tdThMessCont');
            $(thSix).text('Дата выгрузки требуемая');
            trSix.appendChild(thSix);
            let tdSix = document.createElement('td');
            $(tdSix).addClass('tdThMessCont');
            $(tdSix).text(`${val.unloadingDate}`);
            trSix.appendChild(tdSix);
            tbody.appendChild(trSix);


            // Создание седьмой строки таблицы
            let trSeven = document.createElement('tr');
            let thSeven = document.createElement('th');
            $(thSeven).addClass('thMessCont tdThMessCont');
            $(thSeven).text('Описание');
            trSeven.appendChild(thSeven);
            let tdSeven = document.createElement('td');
            $(tdSeven).addClass('tdThMessCont');
            $(tdSeven).text(`${val.description}`);
            trSeven.appendChild(tdSeven);
            tbody.appendChild(trSeven);


            // Создание восьмой строки таблицы
            let trEight = document.createElement('tr');
            let thEight = document.createElement('th');
            $(thEight).addClass('thMessCont tdThMessCont');
            $(thEight).text('Кол-во транспортных средств акцептовано');
            trEight.appendChild(thEight);
            let tdEight = document.createElement('td');
            $(tdEight).addClass('tdThMessCont');
            $(tdEight).text(`${val.numberOfVehicles}`);
            trEight.appendChild(tdEight);
            tbody.appendChild(trEight);


            // Создание девятой строки таблицы
            let trNine = document.createElement('tr');
            let thNine = document.createElement('th');
            $(thNine).addClass('thMessCont tdThMessCont');
            $(thNine).text('Цена фрахт, без НДС/ТС');
            trNine.appendChild(thNine);
            let tdNine = document.createElement('td');
            $(tdNine).addClass('tdThMessCont');
            $(tdNine).text(`${val.price}`);
            trNine.appendChild(tdNine);
            tbody.appendChild(trNine);


            // Создание десятой строки таблицы
            let trTen = document.createElement('tr');
            let thTen = document.createElement('th');
            $(thTen).addClass('thMessCont tdThMessCont');
            $(thTen).text('Отсрочка платежа, дней');
            trTen.appendChild(thTen);
            let tdTen = document.createElement('td');
            $(tdTen).addClass('tdThMessCont');
            $(tdTen).text(`${val.paymentDeferment}`);
            trTen.appendChild(tdTen);
            tbody.appendChild(trTen);

            // Добавление tbody в table
            tableWinner.appendChild(tbody);

            // Добавление table в messBody
            messBody.appendChild(tableWinner);
            winnerObj.dataTable = tableWinner;

            // Создание параграфа-футера в messBody
            let preWinParhTwo = document.createElement('p');
            $(preWinParhTwo).addClass('preWin');
            $(preWinParhTwo).append('С уважением,<br>Департамент по логистике КОРУМ ГРУП');
            messBody.appendChild(preWinParhTwo);
            winnerObj.messageFooter = preWinParhTwo;

            messageToContragents.appendChild(messBody);
            detWinner.appendChild(messageToContragents);

            forcheckBoxContrDIV.appendChild(detWinner);
            sectOtherWinner.appendChild(forcheckBoxContrDIV);
            messageToContragents.contentEditable = 'true';
            messFromTo.contentEditable = 'false';

            winnerObj.orderId = val.order;
            winnerObj.tenderNumber = val.numberTender;
            (JSON.parse(sessionStorage.getItem('data'))).forEach(value => {
                if (value.tenderNumber == val.numberTender) {
                    winnerObj.industryId = value.industryId;
                    winnerObj.tenderItemUuid = value.TenderUuid;
                }
            });
            winnerObj.description = val.description;
            winnerObj.price = val.price;
            if (val.formUuid != '') {
                winnerObj.formUuid = val.formUuid;
            }
            else {
                if (listLink != null) {
                 winnerObj.formUuid = listLink[count].formUuid;
                }
                else {
                winnerObj.formUuid = uuid;
                flag = true;
                }

            }


            listWinnersIdHTMLElements.push(winnerObj);
            count++;
        };
        if (flag) {
            AjaxRequestInitData();
            flag = !flag;
        }

    }

    function AjaxRequestInitData() {
        let orderId = JSON.parse(sessionStorage.getItem('OrderIdKL'));
                                    let DropDownListTender = document.getElementById('drpDwnListTend');
                                    let tendNumber = Number(DropDownListTender.textContent.replace(" ", ""));
                                    let InfoToContragentsAfterCh = new InfoToContragentsAfterChange();
                                    let modelWinnders = listWinnersIdHTMLElements;
                                    for (const item of modelWinnders) {
                                        let winnerAfterChange = new WinnersInfoAfterChange();
                                        winnerAfterChange.isSelected = item.isSelected.checked;
                                        winnerAfterChange.expeditorName = item.expeditorName;
                                        winnerAfterChange.numberOfVehicles = item.numberOfVehicles;
                                        winnerAfterChange.count = item.countWinner;
                                        for(const value of item.senderEmail){
                                            if (value.selected) {
                                                winnerAfterChange.senderEmail = value.text;
                                            }
                                        };
                                        for (const value of item.dataTable.childNodes[0].childNodes) {
                                            winnerAfterChange.tr.push(value);
                                        }
                                        for (const value of winnerAfterChange.tr) {
                                            winnerAfterChange.thContent.push(value.childNodes[0].outerText);
                                            winnerAfterChange.tdContent.push(value.childNodes[1].outerText);
                                        }
                                        winnerAfterChange.thContent.push('Экспедитор');
                                        winnerAfterChange.tdContent.push(item.expeditorName);
                                        winnerAfterChange.recipientEmail = item.recipientEmail.value;
                                        winnerAfterChange.upperartOfTheMessage = item.upperpartOfTheMessage.outerHTML;
                                        winnerAfterChange.dataTable = item.dataTable.outerHTML;
                                        winnerAfterChange.messageFooter = item.messageFooter.outerHTML;
                                        winnerAfterChange.subject = `№${tendNumber}, (${orderId}) ${item.routeShort}, погрузка ${downloadingDateForTender}`;
                                        winnerAfterChange.bodyHTML = CreateHTMLBody(winnerAfterChange.tr, winnerAfterChange.thContent,
                                            winnerAfterChange.tdContent, winnerAfterChange.upperartOfTheMessage, winnerAfterChange.messageFooter);
                                        winnerAfterChange.description = item.description;
                                        winnerAfterChange.formUuid = item.formUuid;
                                        winnerAfterChange.industryId = item.industryId;
                                        winnerAfterChange.orderId = item.orderId;
                                        winnerAfterChange.price = item.price;
                                        winnerAfterChange.tenderNumber = item.tenderNumber;
                                        winnerAfterChange.tenderItemUuid = item.tenderItemUuid;
                                        winnerAfterChange.flag = true;

                                        winnerAfterChange.industryName = industryName_;
                                        winnerAfterChange.routeShort = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.Route));
                                        winnerAfterChange.nameCargo = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.TruckDescription));
                                        winnerAfterChange.weightCargo = parseFloat(@Html.Raw(Json.Encode(Model.CompetitiveListInfo.Weight)));
                                        winnerAfterChange.dataDownload = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.FromDate));
                                        winnerAfterChange.dataUnload = @Html.Raw(Json.Encode(Model.CompetitiveListInfo.ToDate));
                                        allContragents = (JSON.parse(sessionStorage.getItem('listDisplayValues')))[tendNumber];
                                        for (const val of allContragents) {
                                            if (val.emailContragent == winnerAfterChange.recipientEmail || val.ExpeditorName == item.expeditorName) {
                                                winnerAfterChange.DelayPayment = parseInt(val.DaysDelayStep2);
                                                break;
                                            }
                                        };

                                        if (winnerAfterChange.isSelected) {
                                        InfoToContragentsAfterCh.listWinnersInfoAfterChange.push(winnerAfterChange);
                                        }
                                    }
        let listInfoToCont = JSON.stringify(InfoToContragentsAfterCh);
                                        $.ajax({
                                        type: "POST",
                                        async: true,
                                        url: "/OrderTender/AsyncInitDataMessageToContragents",
                                        data: listInfoToCont,
                                        dataType: "json",
                                        contentType: 'application/json; charset=utf-8',
                                        success: function (data) {
                                            let listLink = [];
                                            let sectOtherWinner = document.getElementById('sectOtherWinner');
                                            sectOtherWinner.innerHTML = '';
                                            for (const item of data.listInfoToCont.listWinnersInfoAfterChange) {
                                                listLink.push(
                                                {
                                                        expeditorName: item.expeditorName,
                                                        orderId: item.orderId,
                                                        tenderNumber: item.tenderNumber,
                                                        recipientEmail: item.recipientEmail,
                                                        formUuid: item.formUuid
                                                });
                                            };
                                             listWinnersIdHTMLElements = [];
                                            CreateHTMLTableWithDataWinnersContragents(listLink);
                                            listLink_ = listLink;
                                        },
                                        error: function () {

                                        }
                                    });

    };

    function uuidv4() {
    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
    };

    // Метод для создания и вывода данных о проигравших контрагентах в модальное окно
    function CreateHTMLTableWithDataLosersContragents() {

        let sectOtherColor = document.getElementById('sectOtherColor');


        for (const val of listSameLosers) {
            let loserObj = new LoserIdHTMLElements();
            loserObj.expeditorName = val.expeditorName;
            loserObj.numberOfVehicles = val.numberOfVehicles;
            loserObj.countWinner = val.countLoser;
            loserObj.routeShort = val.routeShort;

            // Создание вложенного контейнера div
            let forcheckBoxContrDIV = document.createElement('div');
            $(forcheckBoxContrDIV).addClass('forcheckBoxContr');

            // Создание чекбокса для выбора контрагента
            let checkboxContragent = document.createElement('input');
            $(checkboxContragent).attr('type', 'checkbox');
            $(checkboxContragent).attr('checked', 'checked');
            loserObj.isSelected = checkboxContragent;
            forcheckBoxContrDIV.appendChild(checkboxContragent);

            let detWinner = document.createElement('details');
            $(detWinner).attr('style', 'margin-top: 1px;');

            // Создание выпадающего заголовка контрагента
            let summary = document.createElement('summary');
            let prepos = `${val.expeditorName}`;
            $(summary).text(prepos);
            detWinner.appendChild(summary);

            // Создание контейнера в выпадающем элементе
            let messageToContragents = document.createElement('div');
            $(messageToContragents).addClass('messageToContrag');

            // Создание вложенного контейнера в messageToContragents
            let messFromTo = document.createElement('div');
            $(messFromTo).addClass('messFromTo');

            // Создание вложенного контейнера в messFromTo
            let messFrTo = document.createElement('div');
            $(messFrTo).addClass('messFrTo');

            // Создание labels
            let labelOne = document.createElement('label');
            $(labelOne).attr('style', 'margin-bottom: 8px;');
            $(labelOne).text('Отправитель:');
            messFrTo.appendChild(labelOne);
            let labelTwo = document.createElement('label');
            $(labelTwo).text('Получатель:');
            $(labelTwo).attr('style', 'margin-bottom: 0px;');
            messFrTo.appendChild(labelTwo);
            messFromTo.appendChild(messFrTo);

            // Создание вложенного контейнера в messFromTo
            let messFrToSelect = document.createElement('div');
            $(messFrToSelect).addClass('messFrToSelect');

            let select = document.createElement('select');
            $(select).attr('name', 'selectMenedger');
            $(select).addClass('inpMess');
            $(select).attr('style', 'max-width: 100%; margin-bottom: 5px;');

            let optionOne = document.createElement('option');
            $(optionOne).attr('selected', 'selected');
            $(optionOne).attr('value', 'Autogruz');
            $(optionOne).text('avtogruz@corum.com');
            select.appendChild(optionOne);
            let optionTwo = document.createElement('option');
            $(optionTwo).attr('value','Yalovega');
            $(optionTwo).text('yalovega.denis@corum.com');
            select.appendChild(optionTwo);
            let optionThree = document.createElement('option');
            $(optionThree).attr('value','Vlasov');
            $(optionThree).text('vlasov.yuriy@corum.com');
            select.appendChild(optionThree);
            messFrToSelect.appendChild(select);
            loserObj.senderEmail = select;

            let inpMess = document.createElement('input');
            $(inpMess).addClass('inpMess');
            $(inpMess).attr('type', 'text');
            $(inpMess).attr('name', 'From');
            $(inpMess).attr('value', `${val.emailContragent}`);
            $(inpMess).attr('style', 'max-width: 100%; padding-left: 2px; padding-right: 0px; border: 1px solid gray;');
            messFrToSelect.appendChild(inpMess);
            messFromTo.appendChild(messFrToSelect);
            messageToContragents.appendChild(messFromTo);
            loserObj.recipientEmail = inpMess;

            // Создание вложенного контейнера в messageToContragents
            let messBody = document.createElement('div');
            $(messBody).addClass('messBody');

            // Создание параграфа, вложенного в объект messBody
            let preWinParh = document.createElement('p');
            $(preWinParh).addClass('preWin');
            $(preWinParh).append('Уважаемый партнер.<br>Спасибо за участие.<br>Ваше предложение по данной заявке/тендеру не конкурентоспособно.');
            messBody.appendChild(preWinParh);
            loserObj.upperartOfTheMessage = preWinParh;

            // Создание таблицы
            let tableWinner = document.createElement('table');
            $(tableWinner).addClass('tbWinner');

            // Создание тела таблицы tbody
            let tbody = document.createElement('tbody');

            // Создание первой строки таблицы
            let trOne = document.createElement('tr');
            let thOne = document.createElement('th');
            $(thOne).addClass('thMessCont tdThMessCont');
            $(thOne).text('Заявка/номер');
            trOne.appendChild(thOne);
            let tdOne = document.createElement('td');
            $(tdOne).addClass('tdThMessCont');
            $(tdOne).text(`Тендер №${val.numberTender}, Заявка №${val.order}`);
            trOne.appendChild(tdOne);
            tbody.appendChild(trOne);

            // Создание второй строки таблицы
            let trTwo = document.createElement('tr');
            let thTwo = document.createElement('th');
            $(thTwo).addClass('thMessCont tdThMessCont');
            $(thTwo).text('Тип перевозки');
            trTwo.appendChild(thTwo);
            let tdTwo = document.createElement('td');
            $(tdTwo).addClass('tdThMessCont');
            $(tdTwo).text(`${val.transportationType}`);
            trTwo.appendChild(tdTwo);
            tbody.appendChild(trTwo);


            // Создание третьей строки таблицы
            let trThree = document.createElement('tr');
            let thThree = document.createElement('th');
            $(thThree).addClass('thMessCont tdThMessCont');
            $(thThree).text('Маршрут');
            trThree.appendChild(thThree);
            let tdThree = document.createElement('td');
            $(tdThree).addClass('tdThMessCont');
            $(tdThree).text(`${val.route}`);
            trThree.appendChild(tdThree);
            tbody.appendChild(trThree);


            // Создание четвертой строки таблицы
            let trFour = document.createElement('tr');
            let thFour = document.createElement('th');
            $(thFour).addClass('thMessCont tdThMessCont');
            $(thFour).text('Наименование груза/ Вес, т');
            trFour.appendChild(thFour);
            let tdFour = document.createElement('td');
            $(tdFour).addClass('tdThMessCont');
            $(tdFour).text(`${val.nameOfCargo} / ${val.cargoWeight}`);
            trFour.appendChild(tdFour);
            tbody.appendChild(trFour);

            // Создание девятой строки таблицы
            let trNine = document.createElement('tr');
            let thNine = document.createElement('th');
            $(thNine).addClass('thMessCont tdThMessCont');
            $(thNine).text('Цена фрахт, без НДС/ТС');
            trNine.appendChild(thNine);
            let tdNine = document.createElement('td');
            $(tdNine).addClass('tdThMessCont');
            $(tdNine).text(`${val.price}`);
            trNine.appendChild(tdNine);
            tbody.appendChild(trNine);

            // Добавление tbody в table
            tableWinner.appendChild(tbody);

            loserObj.dataTable = tableWinner;
            // Добавление table в messBody
            messBody.appendChild(tableWinner);

            // Создание параграфа-футера в messBody
            let preWinParhTwo = document.createElement('p');
            $(preWinParhTwo).addClass('preWin');
            $(preWinParhTwo).append('С уважением,<br>Департамент по логистике КОРУМ ГРУП');
            messBody.appendChild(preWinParhTwo);
            loserObj.messageFooter = preWinParhTwo;

            messageToContragents.appendChild(messBody);
            detWinner.appendChild(messageToContragents);

            forcheckBoxContrDIV.appendChild(detWinner);
            sectOtherColor.appendChild(forcheckBoxContrDIV);

            messageToContragents.contentEditable = 'true';
            messFromTo.contentEditable = 'false';
            loserObj.orderId = val.order;
            loserObj.tenderNumber = val.numberTender;

            listLoserIdHTMLElements.push(loserObj);
        };
    }

    function DeleteOldDataContragents() {
        let sectOtherWinner = document.getElementById('sectOtherWinner');
        let sectOtherColor = document.getElementById('sectOtherColor');
        sectOtherWinner.innerHTML = "";
        sectOtherColor.innerHTML = "";

        allContragents = [];
        listWinners = [];
        listLosers = [];
        listSameWinners = [];
        listSameLosers = [];
        listWinnersIdHTMLElements = [];
        listLoserIdHTMLElements = [];
    }

    // Вытягивание данных для рассылки на имейлы победителям и проигравшим контрагентам из формы модального окна
    function GetDataAboutMessageContragents() {

    }

</script>
