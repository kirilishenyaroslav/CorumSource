@model Corum.Models.OrderNavigationResult<Corum.Models.ViewModels.Orders.OrderNotificationViewModel>
@using GridMvc.Html
@{
    ViewBag.Title = "Уведомления по заявке";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@helper TPagging(string action, string controller, Corum.Models.NavigationInfo navInfo, WebViewPage page)
{
    <div class="table-footer clearfix">

        @{
            var proc = string.Concat("OnPageSizeTemplateChange('", page.Url.Action(@action, @controller), "');");
        }

        <div class="pull-left dropdown-footer">
            @page.Html.DropDownListFor(model => navInfo.PageSize,
                                 (List<System.Web.Mvc.SelectListItem>)navInfo.PageSizeTemplates,
                                                   new { @id = "PageSizeTemplates", onchange = proc })
        </div>

    </div>

}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 main">
            <h4>Реестр уведомлений по заявке</h4>
            
            @Html.Partial("_OrderHeaderInfo", Model.orderInfo)

            <hr>

            <div class="table-header clearfix">

                <div class="col-md-12 main">
                    @Html.ActionLink("В заявку", "UpdateOrder", "Orders", new { Id = Model.orderInfo.Id }, new { @class = "btn btn-success", @style = "margin-bottom:10px" })

                    @if (Model.orderInfo.IsTransport)
                    {
                    @Html.ActionLink("Реестр заявок", "Orders", "Orders", null, new { @class = "btn btn-success", @style = "margin-bottom:10px" })
                    }
                    else
                    {
                        @Html.ActionLink("Реестр заявок", "OrdersBase", "Orders", null, new { @class = "btn btn-success", @style = "margin-bottom:10px" })
                    }
                </div>

                <div style="font-size: 13px;">
                @(Html.Grid(Model.DisplayValues)
                  .Columns(columns =>
                  {
                      columns.Add(model => model.Datetime).Format("{0:dd.MM.yyyy hh:mm:ss}")
                        .Titled("Дата создания").Filterable(true).Sortable(true);

                      columns.Add(model => model.CreatedByName)
                        .Titled("Создал").Filterable(true).Sortable(true);

                      columns.Add(model => model.TypeName)
                        .Titled("Тип").Filterable(true).Sortable(true);

                      columns.Add(model => model.ReceiverName)
                        .Titled("Получатель").Filterable(true).Sortable(true);

                  }).Filterable().WithPaging((int) Model.RequestParams.PageSize).WithMultipleFilters())
                </div>
            </div>

            @TPagging("OrderNotifications", "Orders", @Model.RequestParams, this)

        </div>
    </div>
</div>

