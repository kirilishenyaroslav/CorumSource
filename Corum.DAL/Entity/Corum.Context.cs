//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corum.DAL.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public virtual DbSet<MenuStructure> MenuStructure { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<OrdersDocTypes> OrdersDocTypes { get; set; }
        public virtual DbSet<OrderStatusHistory> OrderStatusHistory { get; set; }
        public virtual DbSet<OrderDogs> OrderDogs { get; set; }
        public virtual DbSet<OrderAttachments> OrderAttachments { get; set; }
        public virtual DbSet<OrderObservers> OrderObservers { get; set; }
        public virtual DbSet<ImportConfig> ImportConfig { get; set; }
        public virtual DbSet<DocsSnapshot> DocsSnapshot { get; set; }
        public virtual DbSet<RestsSnapshot> RestsSnapshot { get; set; }
        public virtual DbSet<LogisticSnapshots> LogisticSnapshots { get; set; }
        public virtual DbSet<LogImportErrors> LogImportErrors { get; set; }
        public virtual DbSet<LoginHistory> LoginHistory { get; set; }
        public virtual DbSet<BalanceKeepers> BalanceKeepers { get; set; }
        public virtual DbSet<Centers> Centers { get; set; }
        public virtual DbSet<OrderPipelineSteps> OrderPipelineSteps { get; set; }
        public virtual DbSet<RoleGroupsRole> RoleGroupsRole { get; set; }
        public virtual DbSet<OrderStatuses> OrderStatuses { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<RoleGroups> RoleGroups { get; set; }
        public virtual DbSet<OrderClients> OrderClients { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<CarOwners> CarOwners { get; set; }
        public virtual DbSet<Cars> Cars { get; set; }
        public virtual DbSet<CarsFuelType> CarsFuelType { get; set; }
        public virtual DbSet<OrderNotifications> OrderNotifications { get; set; }
        public virtual DbSet<OrderNotificationTypes> OrderNotificationTypes { get; set; }
        public virtual DbSet<UserSettings> UserSettings { get; set; }
        public virtual DbSet<OrderLoadingTypes> OrderLoadingTypes { get; set; }
        public virtual DbSet<OrderTruckTypes> OrderTruckTypes { get; set; }
        public virtual DbSet<OrderUnloadingTypes> OrderUnloadingTypes { get; set; }
        public virtual DbSet<OrderVehicleTypes> OrderVehicleTypes { get; set; }
        public virtual DbSet<OrderFilterSettings> OrderFilterSettings { get; set; }
        public virtual DbSet<FAQAnswers> FAQAnswers { get; set; }
        public virtual DbSet<FAQGroupes> FAQGroupes { get; set; }
        public virtual DbSet<UserMessages> UserMessages { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<RouteTypes> RouteTypes { get; set; }
        public virtual DbSet<OrderTypesBase> OrderTypesBase { get; set; }
        public virtual DbSet<ProjectTypes> ProjectTypes { get; set; }
        public virtual DbSet<CarCarryCapacity> CarCarryCapacity { get; set; }
        public virtual DbSet<RouteIntervalType> RouteIntervalType { get; set; }
        public virtual DbSet<SpecificationTypes> SpecificationTypes { get; set; }
        public virtual DbSet<SpecificationNames> SpecificationNames { get; set; }
        public virtual DbSet<Projects> Projects { get; set; }
        public virtual DbSet<ContractGroupesSpecifications> ContractGroupesSpecifications { get; set; }
        public virtual DbSet<Contracts> Contracts { get; set; }
        public virtual DbSet<OrderBaseProjects> OrderBaseProjects { get; set; }
        public virtual DbSet<OrderBaseSpecification> OrderBaseSpecification { get; set; }
        public virtual DbSet<OrderConcursSteps> OrderConcursSteps { get; set; }
        public virtual DbSet<ConcursDiscountRate> ConcursDiscountRate { get; set; }
        public virtual DbSet<OrderConcursListsSteps> OrderConcursListsSteps { get; set; }
        public virtual DbSet<ContractSpecifications> ContractSpecifications { get; set; }
        public virtual DbSet<AdditionalRoutePoints> AdditionalRoutePoints { get; set; }
        public virtual DbSet<OrderCompetitiveList> OrderCompetitiveList { get; set; }
        public virtual DbSet<OrderFilters> OrderFilters { get; set; }
        public virtual DbSet<OrderFilterSettings2> OrderFilterSettings2 { get; set; }
        public virtual DbSet<RoutePointType> RoutePointType { get; set; }
        public virtual DbSet<RoutePoints> RoutePoints { get; set; }
        public virtual DbSet<Routes> Routes { get; set; }
        public virtual DbSet<OrdersPassengerTransport> OrdersPassengerTransport { get; set; }
        public virtual DbSet<OrderTruckTransport> OrderTruckTransport { get; set; }
        public virtual DbSet<OrdersBase> OrdersBase { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Organization> Organization { get; set; }
        public virtual DbSet<OrderUsedCars> OrderUsedCars { get; set; }
        public virtual DbSet<BucketDocumentRows> BucketDocumentRows { get; set; }
        public virtual DbSet<BucketDocuments> BucketDocuments { get; set; }
        public virtual DbSet<TenderServices> TenderServices { get; set; }
        public virtual DbSet<RegisterTenders> RegisterTenders { get; set; }
        public virtual DbSet<StatusTenders> StatusTenders { get; set; }
        public virtual DbSet<RegisterTenderContragents> RegisterTenderContragents { get; set; }
        public virtual DbSet<RegisterFormFromContragents> RegisterFormFromContragents { get; set; }
        public virtual DbSet<RegisterMessageToContragents> RegisterMessageToContragents { get; set; }
    
        public virtual ObjectResult<SelectFieldsOfStuctureForImport_Result> SelectFieldsOfStuctureForImport(Nullable<bool> isRests)
        {
            var isRestsParameter = isRests.HasValue ?
                new ObjectParameter("IsRests", isRests) :
                new ObjectParameter("IsRests", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectFieldsOfStuctureForImport_Result>("SelectFieldsOfStuctureForImport", isRestsParameter);
        }
    
        public virtual ObjectResult<SelectColumnType_Result> SelectColumnType(Nullable<bool> isRests, string columnName)
        {
            var isRestsParameter = isRests.HasValue ?
                new ObjectParameter("IsRests", isRests) :
                new ObjectParameter("IsRests", typeof(bool));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectColumnType_Result>("SelectColumnType", isRestsParameter, columnNameParameter);
        }
    
        public virtual ObjectResult<SelectColumnValByDef_Result> SelectColumnValByDef(Nullable<bool> isRests, string columnName)
        {
            var isRestsParameter = isRests.HasValue ?
                new ObjectParameter("IsRests", isRests) :
                new ObjectParameter("IsRests", typeof(bool));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectColumnValByDef_Result>("SelectColumnValByDef", isRestsParameter, columnNameParameter);
        }
    
        public virtual int SetSnapshotAsDefaultForReports(Nullable<int> snapshotId)
        {
            var snapshotIdParameter = snapshotId.HasValue ?
                new ObjectParameter("snapshotId", snapshotId) :
                new ObjectParameter("snapshotId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetSnapshotAsDefaultForReports", snapshotIdParameter);
        }
    
        public virtual ObjectResult<GetDateSnapshot_Result> GetDateSnapshot(Nullable<int> idSnapshot)
        {
            var idSnapshotParameter = idSnapshot.HasValue ?
                new ObjectParameter("IdSnapshot", idSnapshot) :
                new ObjectParameter("IdSnapshot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDateSnapshot_Result>("GetDateSnapshot", idSnapshotParameter);
        }
    
        public virtual ObjectResult<SelectCommentFieldForReport_Result> SelectCommentFieldForReport(Nullable<bool> isRests, string columnName)
        {
            var isRestsParameter = isRests.HasValue ?
                new ObjectParameter("IsRests", isRests) :
                new ObjectParameter("IsRests", typeof(bool));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCommentFieldForReport_Result>("SelectCommentFieldForReport", isRestsParameter, columnNameParameter);
        }
    
        public virtual int GetIdSnapshot(Nullable<System.DateTime> actualDateBeg, Nullable<System.DateTime> actualDateEnd, Nullable<bool> isRest, ObjectParameter id_snapshot)
        {
            var actualDateBegParameter = actualDateBeg.HasValue ?
                new ObjectParameter("ActualDateBeg", actualDateBeg) :
                new ObjectParameter("ActualDateBeg", typeof(System.DateTime));
    
            var actualDateEndParameter = actualDateEnd.HasValue ?
                new ObjectParameter("ActualDateEnd", actualDateEnd) :
                new ObjectParameter("ActualDateEnd", typeof(System.DateTime));
    
            var isRestParameter = isRest.HasValue ?
                new ObjectParameter("IsRest", isRest) :
                new ObjectParameter("IsRest", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIdSnapshot", actualDateBegParameter, actualDateEndParameter, isRestParameter, id_snapshot);
        }
    
        public virtual int LogImportErrorInsert(Nullable<bool> isRests, Nullable<int> numRow, string columnName, string commentError, string guidSession, Nullable<int> isCommentType, Nullable<int> idSnapshot)
        {
            var isRestsParameter = isRests.HasValue ?
                new ObjectParameter("IsRests", isRests) :
                new ObjectParameter("IsRests", typeof(bool));
    
            var numRowParameter = numRow.HasValue ?
                new ObjectParameter("NumRow", numRow) :
                new ObjectParameter("NumRow", typeof(int));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var commentErrorParameter = commentError != null ?
                new ObjectParameter("CommentError", commentError) :
                new ObjectParameter("CommentError", typeof(string));
    
            var guidSessionParameter = guidSession != null ?
                new ObjectParameter("guidSession", guidSession) :
                new ObjectParameter("guidSession", typeof(string));
    
            var isCommentTypeParameter = isCommentType.HasValue ?
                new ObjectParameter("isCommentType", isCommentType) :
                new ObjectParameter("isCommentType", typeof(int));
    
            var idSnapshotParameter = idSnapshot.HasValue ?
                new ObjectParameter("idSnapshot", idSnapshot) :
                new ObjectParameter("idSnapshot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogImportErrorInsert", isRestsParameter, numRowParameter, columnNameParameter, commentErrorParameter, guidSessionParameter, isCommentTypeParameter, idSnapshotParameter);
        }
    
        public virtual ObjectResult<SelectColumnConfig_Result> SelectColumnConfig(Nullable<bool> isRests)
        {
            var isRestsParameter = isRests.HasValue ?
                new ObjectParameter("IsRests", isRests) :
                new ObjectParameter("IsRests", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectColumnConfig_Result>("SelectColumnConfig", isRestsParameter);
        }
    
        public virtual int DocsSnapshotInsert(string innerPartyKey, string producer, string product, string shifr, string figure, string measure, Nullable<decimal> weight, string pType, string pGroup, string pRecieverPlan, string pRecieverFact, string recieverGroupPlan, string innerOrderNum, string orderedBy, string orderNum, Nullable<decimal> quantityPrihod, Nullable<decimal> pE_Prihod, Nullable<decimal> pF_Prihod, Nullable<decimal> pCP_Prihod, Nullable<decimal> pCPC_Prihod, Nullable<decimal> fCP_Prihod, Nullable<decimal> fCPC_Prihod, Nullable<decimal> bP_Prihod, Nullable<decimal> pE_Rashod, Nullable<decimal> pF_Rashod, Nullable<decimal> pCP_Rashod, Nullable<decimal> pCPC_Rashod, Nullable<decimal> fCP_Rashod, Nullable<decimal> fCPC_Rashod, Nullable<decimal> bP_Rashod, Nullable<decimal> quantityRashod, string storage, string storageCity, string storageCountry, string сenter, string balanceKeeper, string readyForSaleStatus, string reserveStatus, string produceDate, string reconcervationDate, Nullable<int> termOnStorage, string prihodDocType, string prihodDocNum, Nullable<System.DateTime> prihodDocDate, string rashodDocType, string rashodDocNum, Nullable<System.DateTime> rashodDocDate, string balanceCurrency, Nullable<decimal> currencyIndexToUAH, Nullable<int> id_snapshot)
        {
            var innerPartyKeyParameter = innerPartyKey != null ?
                new ObjectParameter("InnerPartyKey", innerPartyKey) :
                new ObjectParameter("InnerPartyKey", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("Producer", producer) :
                new ObjectParameter("Producer", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var shifrParameter = shifr != null ?
                new ObjectParameter("Shifr", shifr) :
                new ObjectParameter("Shifr", typeof(string));
    
            var figureParameter = figure != null ?
                new ObjectParameter("Figure", figure) :
                new ObjectParameter("Figure", typeof(string));
    
            var measureParameter = measure != null ?
                new ObjectParameter("Measure", measure) :
                new ObjectParameter("Measure", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var pTypeParameter = pType != null ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(string));
    
            var pGroupParameter = pGroup != null ?
                new ObjectParameter("pGroup", pGroup) :
                new ObjectParameter("pGroup", typeof(string));
    
            var pRecieverPlanParameter = pRecieverPlan != null ?
                new ObjectParameter("pRecieverPlan", pRecieverPlan) :
                new ObjectParameter("pRecieverPlan", typeof(string));
    
            var pRecieverFactParameter = pRecieverFact != null ?
                new ObjectParameter("pRecieverFact", pRecieverFact) :
                new ObjectParameter("pRecieverFact", typeof(string));
    
            var recieverGroupPlanParameter = recieverGroupPlan != null ?
                new ObjectParameter("RecieverGroupPlan", recieverGroupPlan) :
                new ObjectParameter("RecieverGroupPlan", typeof(string));
    
            var innerOrderNumParameter = innerOrderNum != null ?
                new ObjectParameter("InnerOrderNum", innerOrderNum) :
                new ObjectParameter("InnerOrderNum", typeof(string));
    
            var orderedByParameter = orderedBy != null ?
                new ObjectParameter("OrderedBy", orderedBy) :
                new ObjectParameter("OrderedBy", typeof(string));
    
            var orderNumParameter = orderNum != null ?
                new ObjectParameter("OrderNum", orderNum) :
                new ObjectParameter("OrderNum", typeof(string));
    
            var quantityPrihodParameter = quantityPrihod.HasValue ?
                new ObjectParameter("QuantityPrihod", quantityPrihod) :
                new ObjectParameter("QuantityPrihod", typeof(decimal));
    
            var pE_PrihodParameter = pE_Prihod.HasValue ?
                new ObjectParameter("PE_Prihod", pE_Prihod) :
                new ObjectParameter("PE_Prihod", typeof(decimal));
    
            var pF_PrihodParameter = pF_Prihod.HasValue ?
                new ObjectParameter("PF_Prihod", pF_Prihod) :
                new ObjectParameter("PF_Prihod", typeof(decimal));
    
            var pCP_PrihodParameter = pCP_Prihod.HasValue ?
                new ObjectParameter("PCP_Prihod", pCP_Prihod) :
                new ObjectParameter("PCP_Prihod", typeof(decimal));
    
            var pCPC_PrihodParameter = pCPC_Prihod.HasValue ?
                new ObjectParameter("PCPC_Prihod", pCPC_Prihod) :
                new ObjectParameter("PCPC_Prihod", typeof(decimal));
    
            var fCP_PrihodParameter = fCP_Prihod.HasValue ?
                new ObjectParameter("FCP_Prihod", fCP_Prihod) :
                new ObjectParameter("FCP_Prihod", typeof(decimal));
    
            var fCPC_PrihodParameter = fCPC_Prihod.HasValue ?
                new ObjectParameter("FCPC_Prihod", fCPC_Prihod) :
                new ObjectParameter("FCPC_Prihod", typeof(decimal));
    
            var bP_PrihodParameter = bP_Prihod.HasValue ?
                new ObjectParameter("BP_Prihod", bP_Prihod) :
                new ObjectParameter("BP_Prihod", typeof(decimal));
    
            var pE_RashodParameter = pE_Rashod.HasValue ?
                new ObjectParameter("PE_Rashod", pE_Rashod) :
                new ObjectParameter("PE_Rashod", typeof(decimal));
    
            var pF_RashodParameter = pF_Rashod.HasValue ?
                new ObjectParameter("PF_Rashod", pF_Rashod) :
                new ObjectParameter("PF_Rashod", typeof(decimal));
    
            var pCP_RashodParameter = pCP_Rashod.HasValue ?
                new ObjectParameter("PCP_Rashod", pCP_Rashod) :
                new ObjectParameter("PCP_Rashod", typeof(decimal));
    
            var pCPC_RashodParameter = pCPC_Rashod.HasValue ?
                new ObjectParameter("PCPC_Rashod", pCPC_Rashod) :
                new ObjectParameter("PCPC_Rashod", typeof(decimal));
    
            var fCP_RashodParameter = fCP_Rashod.HasValue ?
                new ObjectParameter("FCP_Rashod", fCP_Rashod) :
                new ObjectParameter("FCP_Rashod", typeof(decimal));
    
            var fCPC_RashodParameter = fCPC_Rashod.HasValue ?
                new ObjectParameter("FCPC_Rashod", fCPC_Rashod) :
                new ObjectParameter("FCPC_Rashod", typeof(decimal));
    
            var bP_RashodParameter = bP_Rashod.HasValue ?
                new ObjectParameter("BP_Rashod", bP_Rashod) :
                new ObjectParameter("BP_Rashod", typeof(decimal));
    
            var quantityRashodParameter = quantityRashod.HasValue ?
                new ObjectParameter("QuantityRashod", quantityRashod) :
                new ObjectParameter("QuantityRashod", typeof(decimal));
    
            var storageParameter = storage != null ?
                new ObjectParameter("Storage", storage) :
                new ObjectParameter("Storage", typeof(string));
    
            var storageCityParameter = storageCity != null ?
                new ObjectParameter("StorageCity", storageCity) :
                new ObjectParameter("StorageCity", typeof(string));
    
            var storageCountryParameter = storageCountry != null ?
                new ObjectParameter("StorageCountry", storageCountry) :
                new ObjectParameter("StorageCountry", typeof(string));
    
            var сenterParameter = сenter != null ?
                new ObjectParameter("Сenter", сenter) :
                new ObjectParameter("Сenter", typeof(string));
    
            var balanceKeeperParameter = balanceKeeper != null ?
                new ObjectParameter("BalanceKeeper", balanceKeeper) :
                new ObjectParameter("BalanceKeeper", typeof(string));
    
            var readyForSaleStatusParameter = readyForSaleStatus != null ?
                new ObjectParameter("ReadyForSaleStatus", readyForSaleStatus) :
                new ObjectParameter("ReadyForSaleStatus", typeof(string));
    
            var reserveStatusParameter = reserveStatus != null ?
                new ObjectParameter("ReserveStatus", reserveStatus) :
                new ObjectParameter("ReserveStatus", typeof(string));
    
            var produceDateParameter = produceDate != null ?
                new ObjectParameter("ProduceDate", produceDate) :
                new ObjectParameter("ProduceDate", typeof(string));
    
            var reconcervationDateParameter = reconcervationDate != null ?
                new ObjectParameter("ReconcervationDate", reconcervationDate) :
                new ObjectParameter("ReconcervationDate", typeof(string));
    
            var termOnStorageParameter = termOnStorage.HasValue ?
                new ObjectParameter("TermOnStorage", termOnStorage) :
                new ObjectParameter("TermOnStorage", typeof(int));
    
            var prihodDocTypeParameter = prihodDocType != null ?
                new ObjectParameter("PrihodDocType", prihodDocType) :
                new ObjectParameter("PrihodDocType", typeof(string));
    
            var prihodDocNumParameter = prihodDocNum != null ?
                new ObjectParameter("PrihodDocNum", prihodDocNum) :
                new ObjectParameter("PrihodDocNum", typeof(string));
    
            var prihodDocDateParameter = prihodDocDate.HasValue ?
                new ObjectParameter("PrihodDocDate", prihodDocDate) :
                new ObjectParameter("PrihodDocDate", typeof(System.DateTime));
    
            var rashodDocTypeParameter = rashodDocType != null ?
                new ObjectParameter("RashodDocType", rashodDocType) :
                new ObjectParameter("RashodDocType", typeof(string));
    
            var rashodDocNumParameter = rashodDocNum != null ?
                new ObjectParameter("RashodDocNum", rashodDocNum) :
                new ObjectParameter("RashodDocNum", typeof(string));
    
            var rashodDocDateParameter = rashodDocDate.HasValue ?
                new ObjectParameter("RashodDocDate", rashodDocDate) :
                new ObjectParameter("RashodDocDate", typeof(System.DateTime));
    
            var balanceCurrencyParameter = balanceCurrency != null ?
                new ObjectParameter("BalanceCurrency", balanceCurrency) :
                new ObjectParameter("BalanceCurrency", typeof(string));
    
            var currencyIndexToUAHParameter = currencyIndexToUAH.HasValue ?
                new ObjectParameter("CurrencyIndexToUAH", currencyIndexToUAH) :
                new ObjectParameter("CurrencyIndexToUAH", typeof(decimal));
    
            var id_snapshotParameter = id_snapshot.HasValue ?
                new ObjectParameter("id_snapshot", id_snapshot) :
                new ObjectParameter("id_snapshot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocsSnapshotInsert", innerPartyKeyParameter, producerParameter, productParameter, shifrParameter, figureParameter, measureParameter, weightParameter, pTypeParameter, pGroupParameter, pRecieverPlanParameter, pRecieverFactParameter, recieverGroupPlanParameter, innerOrderNumParameter, orderedByParameter, orderNumParameter, quantityPrihodParameter, pE_PrihodParameter, pF_PrihodParameter, pCP_PrihodParameter, pCPC_PrihodParameter, fCP_PrihodParameter, fCPC_PrihodParameter, bP_PrihodParameter, pE_RashodParameter, pF_RashodParameter, pCP_RashodParameter, pCPC_RashodParameter, fCP_RashodParameter, fCPC_RashodParameter, bP_RashodParameter, quantityRashodParameter, storageParameter, storageCityParameter, storageCountryParameter, сenterParameter, balanceKeeperParameter, readyForSaleStatusParameter, reserveStatusParameter, produceDateParameter, reconcervationDateParameter, termOnStorageParameter, prihodDocTypeParameter, prihodDocNumParameter, prihodDocDateParameter, rashodDocTypeParameter, rashodDocNumParameter, rashodDocDateParameter, balanceCurrencyParameter, currencyIndexToUAHParameter, id_snapshotParameter);
        }
    
        public virtual int RestsSnapshotInsert(string innerPartyKey, string producer, string product, string shifr, string figure, string measure, Nullable<decimal> weight, string pType, string pGroup, string pRecieverPlan, string pRecieverFact, string recieverGroupPlan, string innerOrderNum, string orderedBy, string orderNum, Nullable<decimal> quantityBefore, Nullable<decimal> pE_Before, Nullable<decimal> pF_Before, Nullable<decimal> pCP_Before, Nullable<decimal> pCPC_Before, Nullable<decimal> fCP_Before, Nullable<decimal> fCPC_Before, Nullable<decimal> bP_Before, Nullable<decimal> pE_After, Nullable<decimal> pF_After, Nullable<decimal> pCP_After, Nullable<decimal> pCPC_After, Nullable<decimal> fCP_After, Nullable<decimal> fCPC_After, Nullable<decimal> bP_After, Nullable<decimal> quantityAfter, string storage, string storageCity, string storageCountry, string сenter, string balanceKeeper, string readyForSaleStatus, string reserveStatus, string produceDate, string reconcervationDate, Nullable<int> termOnStorage, string prihodDocType, string prihodDocNum, string prihodDocDate, string balanceCurrency, Nullable<decimal> currencyIndexToUAH, string bacodeProduct, string bacodeConsignment, string bacodesAll, string shifr_MDM, Nullable<int> id_snapshot)
        {
            var innerPartyKeyParameter = innerPartyKey != null ?
                new ObjectParameter("InnerPartyKey", innerPartyKey) :
                new ObjectParameter("InnerPartyKey", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("Producer", producer) :
                new ObjectParameter("Producer", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var shifrParameter = shifr != null ?
                new ObjectParameter("Shifr", shifr) :
                new ObjectParameter("Shifr", typeof(string));
    
            var figureParameter = figure != null ?
                new ObjectParameter("Figure", figure) :
                new ObjectParameter("Figure", typeof(string));
    
            var measureParameter = measure != null ?
                new ObjectParameter("Measure", measure) :
                new ObjectParameter("Measure", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var pTypeParameter = pType != null ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(string));
    
            var pGroupParameter = pGroup != null ?
                new ObjectParameter("pGroup", pGroup) :
                new ObjectParameter("pGroup", typeof(string));
    
            var pRecieverPlanParameter = pRecieverPlan != null ?
                new ObjectParameter("pRecieverPlan", pRecieverPlan) :
                new ObjectParameter("pRecieverPlan", typeof(string));
    
            var pRecieverFactParameter = pRecieverFact != null ?
                new ObjectParameter("pRecieverFact", pRecieverFact) :
                new ObjectParameter("pRecieverFact", typeof(string));
    
            var recieverGroupPlanParameter = recieverGroupPlan != null ?
                new ObjectParameter("RecieverGroupPlan", recieverGroupPlan) :
                new ObjectParameter("RecieverGroupPlan", typeof(string));
    
            var innerOrderNumParameter = innerOrderNum != null ?
                new ObjectParameter("InnerOrderNum", innerOrderNum) :
                new ObjectParameter("InnerOrderNum", typeof(string));
    
            var orderedByParameter = orderedBy != null ?
                new ObjectParameter("OrderedBy", orderedBy) :
                new ObjectParameter("OrderedBy", typeof(string));
    
            var orderNumParameter = orderNum != null ?
                new ObjectParameter("OrderNum", orderNum) :
                new ObjectParameter("OrderNum", typeof(string));
    
            var quantityBeforeParameter = quantityBefore.HasValue ?
                new ObjectParameter("QuantityBefore", quantityBefore) :
                new ObjectParameter("QuantityBefore", typeof(decimal));
    
            var pE_BeforeParameter = pE_Before.HasValue ?
                new ObjectParameter("PE_Before", pE_Before) :
                new ObjectParameter("PE_Before", typeof(decimal));
    
            var pF_BeforeParameter = pF_Before.HasValue ?
                new ObjectParameter("PF_Before", pF_Before) :
                new ObjectParameter("PF_Before", typeof(decimal));
    
            var pCP_BeforeParameter = pCP_Before.HasValue ?
                new ObjectParameter("PCP_Before", pCP_Before) :
                new ObjectParameter("PCP_Before", typeof(decimal));
    
            var pCPC_BeforeParameter = pCPC_Before.HasValue ?
                new ObjectParameter("PCPC_Before", pCPC_Before) :
                new ObjectParameter("PCPC_Before", typeof(decimal));
    
            var fCP_BeforeParameter = fCP_Before.HasValue ?
                new ObjectParameter("FCP_Before", fCP_Before) :
                new ObjectParameter("FCP_Before", typeof(decimal));
    
            var fCPC_BeforeParameter = fCPC_Before.HasValue ?
                new ObjectParameter("FCPC_Before", fCPC_Before) :
                new ObjectParameter("FCPC_Before", typeof(decimal));
    
            var bP_BeforeParameter = bP_Before.HasValue ?
                new ObjectParameter("BP_Before", bP_Before) :
                new ObjectParameter("BP_Before", typeof(decimal));
    
            var pE_AfterParameter = pE_After.HasValue ?
                new ObjectParameter("PE_After", pE_After) :
                new ObjectParameter("PE_After", typeof(decimal));
    
            var pF_AfterParameter = pF_After.HasValue ?
                new ObjectParameter("PF_After", pF_After) :
                new ObjectParameter("PF_After", typeof(decimal));
    
            var pCP_AfterParameter = pCP_After.HasValue ?
                new ObjectParameter("PCP_After", pCP_After) :
                new ObjectParameter("PCP_After", typeof(decimal));
    
            var pCPC_AfterParameter = pCPC_After.HasValue ?
                new ObjectParameter("PCPC_After", pCPC_After) :
                new ObjectParameter("PCPC_After", typeof(decimal));
    
            var fCP_AfterParameter = fCP_After.HasValue ?
                new ObjectParameter("FCP_After", fCP_After) :
                new ObjectParameter("FCP_After", typeof(decimal));
    
            var fCPC_AfterParameter = fCPC_After.HasValue ?
                new ObjectParameter("FCPC_After", fCPC_After) :
                new ObjectParameter("FCPC_After", typeof(decimal));
    
            var bP_AfterParameter = bP_After.HasValue ?
                new ObjectParameter("BP_After", bP_After) :
                new ObjectParameter("BP_After", typeof(decimal));
    
            var quantityAfterParameter = quantityAfter.HasValue ?
                new ObjectParameter("QuantityAfter", quantityAfter) :
                new ObjectParameter("QuantityAfter", typeof(decimal));
    
            var storageParameter = storage != null ?
                new ObjectParameter("Storage", storage) :
                new ObjectParameter("Storage", typeof(string));
    
            var storageCityParameter = storageCity != null ?
                new ObjectParameter("StorageCity", storageCity) :
                new ObjectParameter("StorageCity", typeof(string));
    
            var storageCountryParameter = storageCountry != null ?
                new ObjectParameter("StorageCountry", storageCountry) :
                new ObjectParameter("StorageCountry", typeof(string));
    
            var сenterParameter = сenter != null ?
                new ObjectParameter("Сenter", сenter) :
                new ObjectParameter("Сenter", typeof(string));
    
            var balanceKeeperParameter = balanceKeeper != null ?
                new ObjectParameter("BalanceKeeper", balanceKeeper) :
                new ObjectParameter("BalanceKeeper", typeof(string));
    
            var readyForSaleStatusParameter = readyForSaleStatus != null ?
                new ObjectParameter("ReadyForSaleStatus", readyForSaleStatus) :
                new ObjectParameter("ReadyForSaleStatus", typeof(string));
    
            var reserveStatusParameter = reserveStatus != null ?
                new ObjectParameter("ReserveStatus", reserveStatus) :
                new ObjectParameter("ReserveStatus", typeof(string));
    
            var produceDateParameter = produceDate != null ?
                new ObjectParameter("ProduceDate", produceDate) :
                new ObjectParameter("ProduceDate", typeof(string));
    
            var reconcervationDateParameter = reconcervationDate != null ?
                new ObjectParameter("ReconcervationDate", reconcervationDate) :
                new ObjectParameter("ReconcervationDate", typeof(string));
    
            var termOnStorageParameter = termOnStorage.HasValue ?
                new ObjectParameter("TermOnStorage", termOnStorage) :
                new ObjectParameter("TermOnStorage", typeof(int));
    
            var prihodDocTypeParameter = prihodDocType != null ?
                new ObjectParameter("PrihodDocType", prihodDocType) :
                new ObjectParameter("PrihodDocType", typeof(string));
    
            var prihodDocNumParameter = prihodDocNum != null ?
                new ObjectParameter("PrihodDocNum", prihodDocNum) :
                new ObjectParameter("PrihodDocNum", typeof(string));
    
            var prihodDocDateParameter = prihodDocDate != null ?
                new ObjectParameter("PrihodDocDate", prihodDocDate) :
                new ObjectParameter("PrihodDocDate", typeof(string));
    
            var balanceCurrencyParameter = balanceCurrency != null ?
                new ObjectParameter("BalanceCurrency", balanceCurrency) :
                new ObjectParameter("BalanceCurrency", typeof(string));
    
            var currencyIndexToUAHParameter = currencyIndexToUAH.HasValue ?
                new ObjectParameter("CurrencyIndexToUAH", currencyIndexToUAH) :
                new ObjectParameter("CurrencyIndexToUAH", typeof(decimal));
    
            var bacodeProductParameter = bacodeProduct != null ?
                new ObjectParameter("BacodeProduct", bacodeProduct) :
                new ObjectParameter("BacodeProduct", typeof(string));
    
            var bacodeConsignmentParameter = bacodeConsignment != null ?
                new ObjectParameter("BacodeConsignment", bacodeConsignment) :
                new ObjectParameter("BacodeConsignment", typeof(string));
    
            var bacodesAllParameter = bacodesAll != null ?
                new ObjectParameter("BacodesAll", bacodesAll) :
                new ObjectParameter("BacodesAll", typeof(string));
    
            var shifr_MDMParameter = shifr_MDM != null ?
                new ObjectParameter("Shifr_MDM", shifr_MDM) :
                new ObjectParameter("Shifr_MDM", typeof(string));
    
            var id_snapshotParameter = id_snapshot.HasValue ?
                new ObjectParameter("id_snapshot", id_snapshot) :
                new ObjectParameter("id_snapshot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestsSnapshotInsert", innerPartyKeyParameter, producerParameter, productParameter, shifrParameter, figureParameter, measureParameter, weightParameter, pTypeParameter, pGroupParameter, pRecieverPlanParameter, pRecieverFactParameter, recieverGroupPlanParameter, innerOrderNumParameter, orderedByParameter, orderNumParameter, quantityBeforeParameter, pE_BeforeParameter, pF_BeforeParameter, pCP_BeforeParameter, pCPC_BeforeParameter, fCP_BeforeParameter, fCPC_BeforeParameter, bP_BeforeParameter, pE_AfterParameter, pF_AfterParameter, pCP_AfterParameter, pCPC_AfterParameter, fCP_AfterParameter, fCPC_AfterParameter, bP_AfterParameter, quantityAfterParameter, storageParameter, storageCityParameter, storageCountryParameter, сenterParameter, balanceKeeperParameter, readyForSaleStatusParameter, reserveStatusParameter, produceDateParameter, reconcervationDateParameter, termOnStorageParameter, prihodDocTypeParameter, prihodDocNumParameter, prihodDocDateParameter, balanceCurrencyParameter, currencyIndexToUAHParameter, bacodeProductParameter, bacodeConsignmentParameter, bacodesAllParameter, shifr_MDMParameter, id_snapshotParameter);
        }
    
        public virtual ObjectResult<GetDocsDataBySnapshot_Result> GetDocsDataBySnapshot(Nullable<int> snapShotId, string filterStorageId, string filterCenterId, string filterRecieverPlanId, string filterRecieverFactId, string filterKeeperId, string filterProducerId, Nullable<int> useStorageFilter, Nullable<int> useCenterFilter, Nullable<int> useRecieverPlanFilter, Nullable<int> useRecieverFactFilter, Nullable<int> useKeeperFilter, Nullable<int> useProducerFilter)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var filterStorageIdParameter = filterStorageId != null ?
                new ObjectParameter("FilterStorageId", filterStorageId) :
                new ObjectParameter("FilterStorageId", typeof(string));
    
            var filterCenterIdParameter = filterCenterId != null ?
                new ObjectParameter("FilterCenterId", filterCenterId) :
                new ObjectParameter("FilterCenterId", typeof(string));
    
            var filterRecieverPlanIdParameter = filterRecieverPlanId != null ?
                new ObjectParameter("FilterRecieverPlanId", filterRecieverPlanId) :
                new ObjectParameter("FilterRecieverPlanId", typeof(string));
    
            var filterRecieverFactIdParameter = filterRecieverFactId != null ?
                new ObjectParameter("FilterRecieverFactId", filterRecieverFactId) :
                new ObjectParameter("FilterRecieverFactId", typeof(string));
    
            var filterKeeperIdParameter = filterKeeperId != null ?
                new ObjectParameter("FilterKeeperId", filterKeeperId) :
                new ObjectParameter("FilterKeeperId", typeof(string));
    
            var filterProducerIdParameter = filterProducerId != null ?
                new ObjectParameter("FilterProducerId", filterProducerId) :
                new ObjectParameter("FilterProducerId", typeof(string));
    
            var useStorageFilterParameter = useStorageFilter.HasValue ?
                new ObjectParameter("UseStorageFilter", useStorageFilter) :
                new ObjectParameter("UseStorageFilter", typeof(int));
    
            var useCenterFilterParameter = useCenterFilter.HasValue ?
                new ObjectParameter("UseCenterFilter", useCenterFilter) :
                new ObjectParameter("UseCenterFilter", typeof(int));
    
            var useRecieverPlanFilterParameter = useRecieverPlanFilter.HasValue ?
                new ObjectParameter("UseRecieverPlanFilter", useRecieverPlanFilter) :
                new ObjectParameter("UseRecieverPlanFilter", typeof(int));
    
            var useRecieverFactFilterParameter = useRecieverFactFilter.HasValue ?
                new ObjectParameter("UseRecieverFactFilter", useRecieverFactFilter) :
                new ObjectParameter("UseRecieverFactFilter", typeof(int));
    
            var useKeeperFilterParameter = useKeeperFilter.HasValue ?
                new ObjectParameter("UseKeeperFilter", useKeeperFilter) :
                new ObjectParameter("UseKeeperFilter", typeof(int));
    
            var useProducerFilterParameter = useProducerFilter.HasValue ?
                new ObjectParameter("UseProducerFilter", useProducerFilter) :
                new ObjectParameter("UseProducerFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocsDataBySnapshot_Result>("GetDocsDataBySnapshot", snapShotIdParameter, filterStorageIdParameter, filterCenterIdParameter, filterRecieverPlanIdParameter, filterRecieverFactIdParameter, filterKeeperIdParameter, filterProducerIdParameter, useStorageFilterParameter, useCenterFilterParameter, useRecieverPlanFilterParameter, useRecieverFactFilterParameter, useKeeperFilterParameter, useProducerFilterParameter);
        }
    
        public virtual ObjectResult<GetBriefDataBySnapshot_Result> GetBriefDataBySnapshot(Nullable<int> snapShotId, string filterStorageId, string filterCenterId, string filterRecieverPlanId, string filterRecieverFactId, string filterKeeperId, string filterProducerId, Nullable<int> useStorageFilter, Nullable<int> useCenterFilter, Nullable<int> useRecieverPlanFilter, Nullable<int> useRecieverFactFilter, Nullable<int> useKeeperFilter, Nullable<int> useProducerFilter)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var filterStorageIdParameter = filterStorageId != null ?
                new ObjectParameter("FilterStorageId", filterStorageId) :
                new ObjectParameter("FilterStorageId", typeof(string));
    
            var filterCenterIdParameter = filterCenterId != null ?
                new ObjectParameter("FilterCenterId", filterCenterId) :
                new ObjectParameter("FilterCenterId", typeof(string));
    
            var filterRecieverPlanIdParameter = filterRecieverPlanId != null ?
                new ObjectParameter("FilterRecieverPlanId", filterRecieverPlanId) :
                new ObjectParameter("FilterRecieverPlanId", typeof(string));
    
            var filterRecieverFactIdParameter = filterRecieverFactId != null ?
                new ObjectParameter("FilterRecieverFactId", filterRecieverFactId) :
                new ObjectParameter("FilterRecieverFactId", typeof(string));
    
            var filterKeeperIdParameter = filterKeeperId != null ?
                new ObjectParameter("FilterKeeperId", filterKeeperId) :
                new ObjectParameter("FilterKeeperId", typeof(string));
    
            var filterProducerIdParameter = filterProducerId != null ?
                new ObjectParameter("FilterProducerId", filterProducerId) :
                new ObjectParameter("FilterProducerId", typeof(string));
    
            var useStorageFilterParameter = useStorageFilter.HasValue ?
                new ObjectParameter("UseStorageFilter", useStorageFilter) :
                new ObjectParameter("UseStorageFilter", typeof(int));
    
            var useCenterFilterParameter = useCenterFilter.HasValue ?
                new ObjectParameter("UseCenterFilter", useCenterFilter) :
                new ObjectParameter("UseCenterFilter", typeof(int));
    
            var useRecieverPlanFilterParameter = useRecieverPlanFilter.HasValue ?
                new ObjectParameter("UseRecieverPlanFilter", useRecieverPlanFilter) :
                new ObjectParameter("UseRecieverPlanFilter", typeof(int));
    
            var useRecieverFactFilterParameter = useRecieverFactFilter.HasValue ?
                new ObjectParameter("UseRecieverFactFilter", useRecieverFactFilter) :
                new ObjectParameter("UseRecieverFactFilter", typeof(int));
    
            var useKeeperFilterParameter = useKeeperFilter.HasValue ?
                new ObjectParameter("UseKeeperFilter", useKeeperFilter) :
                new ObjectParameter("UseKeeperFilter", typeof(int));
    
            var useProducerFilterParameter = useProducerFilter.HasValue ?
                new ObjectParameter("UseProducerFilter", useProducerFilter) :
                new ObjectParameter("UseProducerFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBriefDataBySnapshot_Result>("GetBriefDataBySnapshot", snapShotIdParameter, filterStorageIdParameter, filterCenterIdParameter, filterRecieverPlanIdParameter, filterRecieverFactIdParameter, filterKeeperIdParameter, filterProducerIdParameter, useStorageFilterParameter, useCenterFilterParameter, useRecieverPlanFilterParameter, useRecieverFactFilterParameter, useKeeperFilterParameter, useProducerFilterParameter);
        }
    
        [DbFunction("Entities", "GetDocsSummaryByInnerKey")]
        public virtual IQueryable<GetDocsSummaryByInnerKey_Result> GetDocsSummaryByInnerKey(Nullable<int> snapShotId, string innerPartyKey, Nullable<int> isPrihodDocs)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var innerPartyKeyParameter = innerPartyKey != null ?
                new ObjectParameter("innerPartyKey", innerPartyKey) :
                new ObjectParameter("innerPartyKey", typeof(string));
    
            var isPrihodDocsParameter = isPrihodDocs.HasValue ?
                new ObjectParameter("isPrihodDocs", isPrihodDocs) :
                new ObjectParameter("isPrihodDocs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDocsSummaryByInnerKey_Result>("[Entities].[GetDocsSummaryByInnerKey](@snapShotId, @innerPartyKey, @isPrihodDocs)", snapShotIdParameter, innerPartyKeyParameter, isPrihodDocsParameter);
        }
    
        public virtual ObjectResult<GetDocsDataByInnerPartyKey_Result> GetDocsDataByInnerPartyKey(Nullable<int> snapShotId, string innerPartyKey)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var innerPartyKeyParameter = innerPartyKey != null ?
                new ObjectParameter("InnerPartyKey", innerPartyKey) :
                new ObjectParameter("InnerPartyKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocsDataByInnerPartyKey_Result>("GetDocsDataByInnerPartyKey", snapShotIdParameter, innerPartyKeyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IsMenuHasRole(string userId, Nullable<int> menuId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("menuId", menuId) :
                new ObjectParameter("menuId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IsMenuHasRole", userIdParameter, menuIdParameter);
        }
    
        [DbFunction("Entities", "SplitString")]
        public virtual IQueryable<Nullable<int>> SplitString(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[Entities].[SplitString](@stringToSplit)", stringToSplitParameter);
        }
    
        [DbFunction("Entities", "SplitStringV2")]
        public virtual IQueryable<string> SplitStringV2(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[Entities].[SplitStringV2](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<GetOrderExecuters_Result> GetOrderExecuters(Nullable<int> orderTypeId)
        {
            var orderTypeIdParameter = orderTypeId.HasValue ?
                new ObjectParameter("orderTypeId", orderTypeId) :
                new ObjectParameter("orderTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderExecuters_Result>("GetOrderExecuters", orderTypeIdParameter);
        }
    
        public virtual ObjectResult<GetBaseReport_Result> GetBaseReport(string userId, Nullable<bool> isAdmin, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useTripTypeFilter, string filterOrderClientId, string filterOrderTypeId, string filterTripTypeId, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<System.DateTime> filterAcceptDateBeg, Nullable<System.DateTime> filterAcceptDateEnd, Nullable<bool> useOrderDateFilter, Nullable<bool> useAcceptDateFilter, Nullable<bool> isPassOrders)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useTripTypeFilterParameter = useTripTypeFilter.HasValue ?
                new ObjectParameter("UseTripTypeFilter", useTripTypeFilter) :
                new ObjectParameter("UseTripTypeFilter", typeof(bool));
    
            var filterOrderClientIdParameter = filterOrderClientId != null ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterTripTypeIdParameter = filterTripTypeId != null ?
                new ObjectParameter("FilterTripTypeId", filterTripTypeId) :
                new ObjectParameter("FilterTripTypeId", typeof(string));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterAcceptDateBegParameter = filterAcceptDateBeg.HasValue ?
                new ObjectParameter("FilterAcceptDateBeg", filterAcceptDateBeg) :
                new ObjectParameter("FilterAcceptDateBeg", typeof(System.DateTime));
    
            var filterAcceptDateEndParameter = filterAcceptDateEnd.HasValue ?
                new ObjectParameter("FilterAcceptDateEnd", filterAcceptDateEnd) :
                new ObjectParameter("FilterAcceptDateEnd", typeof(System.DateTime));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useAcceptDateFilterParameter = useAcceptDateFilter.HasValue ?
                new ObjectParameter("UseAcceptDateFilter", useAcceptDateFilter) :
                new ObjectParameter("UseAcceptDateFilter", typeof(bool));
    
            var isPassOrdersParameter = isPassOrders.HasValue ?
                new ObjectParameter("isPassOrders", isPassOrders) :
                new ObjectParameter("isPassOrders", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBaseReport_Result>("GetBaseReport", userIdParameter, isAdminParameter, useOrderClientFilterParameter, useOrderTypeFilterParameter, useTripTypeFilterParameter, filterOrderClientIdParameter, filterOrderTypeIdParameter, filterTripTypeIdParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterAcceptDateBegParameter, filterAcceptDateEndParameter, useOrderDateFilterParameter, useAcceptDateFilterParameter, isPassOrdersParameter);
        }
    
        public virtual ObjectResult<GetFinalReport_Result> GetFinalReport(string userId, Nullable<bool> isAdmin, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useTripTypeFilter, string filterOrderClientId, string filterOrderTypeId, string filterTripTypeId, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<System.DateTime> filterAcceptDateBeg, Nullable<System.DateTime> filterAcceptDateEnd, Nullable<bool> useOrderDateFilter, Nullable<bool> useAcceptDateFilter, Nullable<bool> isPassOrders)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useTripTypeFilterParameter = useTripTypeFilter.HasValue ?
                new ObjectParameter("UseTripTypeFilter", useTripTypeFilter) :
                new ObjectParameter("UseTripTypeFilter", typeof(bool));
    
            var filterOrderClientIdParameter = filterOrderClientId != null ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterTripTypeIdParameter = filterTripTypeId != null ?
                new ObjectParameter("FilterTripTypeId", filterTripTypeId) :
                new ObjectParameter("FilterTripTypeId", typeof(string));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterAcceptDateBegParameter = filterAcceptDateBeg.HasValue ?
                new ObjectParameter("FilterAcceptDateBeg", filterAcceptDateBeg) :
                new ObjectParameter("FilterAcceptDateBeg", typeof(System.DateTime));
    
            var filterAcceptDateEndParameter = filterAcceptDateEnd.HasValue ?
                new ObjectParameter("FilterAcceptDateEnd", filterAcceptDateEnd) :
                new ObjectParameter("FilterAcceptDateEnd", typeof(System.DateTime));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useAcceptDateFilterParameter = useAcceptDateFilter.HasValue ?
                new ObjectParameter("UseAcceptDateFilter", useAcceptDateFilter) :
                new ObjectParameter("UseAcceptDateFilter", typeof(bool));
    
            var isPassOrdersParameter = isPassOrders.HasValue ?
                new ObjectParameter("isPassOrders", isPassOrders) :
                new ObjectParameter("isPassOrders", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFinalReport_Result>("GetFinalReport", userIdParameter, isAdminParameter, useOrderClientFilterParameter, useOrderTypeFilterParameter, useTripTypeFilterParameter, filterOrderClientIdParameter, filterOrderTypeIdParameter, filterTripTypeIdParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterAcceptDateBegParameter, filterAcceptDateEndParameter, useOrderDateFilterParameter, useAcceptDateFilterParameter, isPassOrdersParameter);
        }
    
        public virtual ObjectResult<GetOrdersBKReport_Result> GetOrdersBKReport(string userId, Nullable<bool> isAdmin, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useTripTypeFilter, string filterOrderClientId, string filterOrderTypeId, string filterTripTypeId, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<System.DateTime> filterAcceptDateBeg, Nullable<System.DateTime> filterAcceptDateEnd, Nullable<bool> useOrderDateFilter, Nullable<bool> useAcceptDateFilter, Nullable<bool> isPassOrders)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useTripTypeFilterParameter = useTripTypeFilter.HasValue ?
                new ObjectParameter("UseTripTypeFilter", useTripTypeFilter) :
                new ObjectParameter("UseTripTypeFilter", typeof(bool));
    
            var filterOrderClientIdParameter = filterOrderClientId != null ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterTripTypeIdParameter = filterTripTypeId != null ?
                new ObjectParameter("FilterTripTypeId", filterTripTypeId) :
                new ObjectParameter("FilterTripTypeId", typeof(string));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterAcceptDateBegParameter = filterAcceptDateBeg.HasValue ?
                new ObjectParameter("FilterAcceptDateBeg", filterAcceptDateBeg) :
                new ObjectParameter("FilterAcceptDateBeg", typeof(System.DateTime));
    
            var filterAcceptDateEndParameter = filterAcceptDateEnd.HasValue ?
                new ObjectParameter("FilterAcceptDateEnd", filterAcceptDateEnd) :
                new ObjectParameter("FilterAcceptDateEnd", typeof(System.DateTime));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useAcceptDateFilterParameter = useAcceptDateFilter.HasValue ?
                new ObjectParameter("UseAcceptDateFilter", useAcceptDateFilter) :
                new ObjectParameter("UseAcceptDateFilter", typeof(bool));
    
            var isPassOrdersParameter = isPassOrders.HasValue ?
                new ObjectParameter("isPassOrders", isPassOrders) :
                new ObjectParameter("isPassOrders", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersBKReport_Result>("GetOrdersBKReport", userIdParameter, isAdminParameter, useOrderClientFilterParameter, useOrderTypeFilterParameter, useTripTypeFilterParameter, filterOrderClientIdParameter, filterOrderTypeIdParameter, filterTripTypeIdParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterAcceptDateBegParameter, filterAcceptDateEndParameter, useOrderDateFilterParameter, useAcceptDateFilterParameter, isPassOrdersParameter);
        }
    
        public virtual ObjectResult<GetOrdersReport_Result> GetOrdersReport(string userId, Nullable<bool> isAdmin, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useTripTypeFilter, string filterOrderClientId, string filterOrderTypeId, string filterTripTypeId, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<System.DateTime> filterAcceptDateBeg, Nullable<System.DateTime> filterAcceptDateEnd, Nullable<bool> useOrderDateFilter, Nullable<bool> useAcceptDateFilter, Nullable<bool> isPassOrders)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useTripTypeFilterParameter = useTripTypeFilter.HasValue ?
                new ObjectParameter("UseTripTypeFilter", useTripTypeFilter) :
                new ObjectParameter("UseTripTypeFilter", typeof(bool));
    
            var filterOrderClientIdParameter = filterOrderClientId != null ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterTripTypeIdParameter = filterTripTypeId != null ?
                new ObjectParameter("FilterTripTypeId", filterTripTypeId) :
                new ObjectParameter("FilterTripTypeId", typeof(string));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterAcceptDateBegParameter = filterAcceptDateBeg.HasValue ?
                new ObjectParameter("FilterAcceptDateBeg", filterAcceptDateBeg) :
                new ObjectParameter("FilterAcceptDateBeg", typeof(System.DateTime));
    
            var filterAcceptDateEndParameter = filterAcceptDateEnd.HasValue ?
                new ObjectParameter("FilterAcceptDateEnd", filterAcceptDateEnd) :
                new ObjectParameter("FilterAcceptDateEnd", typeof(System.DateTime));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useAcceptDateFilterParameter = useAcceptDateFilter.HasValue ?
                new ObjectParameter("UseAcceptDateFilter", useAcceptDateFilter) :
                new ObjectParameter("UseAcceptDateFilter", typeof(bool));
    
            var isPassOrdersParameter = isPassOrders.HasValue ?
                new ObjectParameter("isPassOrders", isPassOrders) :
                new ObjectParameter("isPassOrders", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersReport_Result>("GetOrdersReport", userIdParameter, isAdminParameter, useOrderClientFilterParameter, useOrderTypeFilterParameter, useTripTypeFilterParameter, filterOrderClientIdParameter, filterOrderTypeIdParameter, filterTripTypeIdParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterAcceptDateBegParameter, filterAcceptDateEndParameter, useOrderDateFilterParameter, useAcceptDateFilterParameter, isPassOrdersParameter);
        }
    
        public virtual ObjectResult<GetStatusReport_Result> GetStatusReport(string userId, Nullable<bool> isAdmin, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useTripTypeFilter, string filterOrderClientId, string filterOrderTypeId, string filterTripTypeId, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<System.DateTime> filterAcceptDateBeg, Nullable<System.DateTime> filterAcceptDateEnd, Nullable<bool> useOrderDateFilter, Nullable<bool> useAcceptDateFilter, Nullable<bool> isPassOrders)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useTripTypeFilterParameter = useTripTypeFilter.HasValue ?
                new ObjectParameter("UseTripTypeFilter", useTripTypeFilter) :
                new ObjectParameter("UseTripTypeFilter", typeof(bool));
    
            var filterOrderClientIdParameter = filterOrderClientId != null ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterTripTypeIdParameter = filterTripTypeId != null ?
                new ObjectParameter("FilterTripTypeId", filterTripTypeId) :
                new ObjectParameter("FilterTripTypeId", typeof(string));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterAcceptDateBegParameter = filterAcceptDateBeg.HasValue ?
                new ObjectParameter("FilterAcceptDateBeg", filterAcceptDateBeg) :
                new ObjectParameter("FilterAcceptDateBeg", typeof(System.DateTime));
    
            var filterAcceptDateEndParameter = filterAcceptDateEnd.HasValue ?
                new ObjectParameter("FilterAcceptDateEnd", filterAcceptDateEnd) :
                new ObjectParameter("FilterAcceptDateEnd", typeof(System.DateTime));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useAcceptDateFilterParameter = useAcceptDateFilter.HasValue ?
                new ObjectParameter("UseAcceptDateFilter", useAcceptDateFilter) :
                new ObjectParameter("UseAcceptDateFilter", typeof(bool));
    
            var isPassOrdersParameter = isPassOrders.HasValue ?
                new ObjectParameter("isPassOrders", isPassOrders) :
                new ObjectParameter("isPassOrders", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatusReport_Result>("GetStatusReport", userIdParameter, isAdminParameter, useOrderClientFilterParameter, useOrderTypeFilterParameter, useTripTypeFilterParameter, filterOrderClientIdParameter, filterOrderTypeIdParameter, filterTripTypeIdParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterAcceptDateBegParameter, filterAcceptDateEndParameter, useOrderDateFilterParameter, useAcceptDateFilterParameter, isPassOrdersParameter);
        }
    
        public virtual ObjectResult<GetOrdersPipelineV2_Result> GetOrdersPipelineV2(string userId, Nullable<bool> isAdmin, Nullable<bool> isTransport, Nullable<bool> useStatusesFilter, Nullable<bool> useOrderCreatorFilter, Nullable<bool> useOrderExecuterFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderPriorityFilter, Nullable<bool> useOrderDateFilter, Nullable<bool> useOrderExDateFilter, Nullable<bool> useFinalStatusFilter, Nullable<int> filterStatusId, string filterOrderCreatorId, string filterOrderExecuterId, Nullable<int> filterOrderTypeId, Nullable<int> filterOrderClientId, Nullable<int> filterOrderPriority, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<System.DateTime> filterOrderExDateBeg, Nullable<System.DateTime> filterOrderExDateEnd, Nullable<bool> filterFinalStatus)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var isTransportParameter = isTransport.HasValue ?
                new ObjectParameter("IsTransport", isTransport) :
                new ObjectParameter("IsTransport", typeof(bool));
    
            var useStatusesFilterParameter = useStatusesFilter.HasValue ?
                new ObjectParameter("UseStatusesFilter", useStatusesFilter) :
                new ObjectParameter("UseStatusesFilter", typeof(bool));
    
            var useOrderCreatorFilterParameter = useOrderCreatorFilter.HasValue ?
                new ObjectParameter("UseOrderCreatorFilter", useOrderCreatorFilter) :
                new ObjectParameter("UseOrderCreatorFilter", typeof(bool));
    
            var useOrderExecuterFilterParameter = useOrderExecuterFilter.HasValue ?
                new ObjectParameter("UseOrderExecuterFilter", useOrderExecuterFilter) :
                new ObjectParameter("UseOrderExecuterFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderPriorityFilterParameter = useOrderPriorityFilter.HasValue ?
                new ObjectParameter("UseOrderPriorityFilter", useOrderPriorityFilter) :
                new ObjectParameter("UseOrderPriorityFilter", typeof(bool));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useOrderExDateFilterParameter = useOrderExDateFilter.HasValue ?
                new ObjectParameter("UseOrderExDateFilter", useOrderExDateFilter) :
                new ObjectParameter("UseOrderExDateFilter", typeof(bool));
    
            var useFinalStatusFilterParameter = useFinalStatusFilter.HasValue ?
                new ObjectParameter("UseFinalStatusFilter", useFinalStatusFilter) :
                new ObjectParameter("UseFinalStatusFilter", typeof(bool));
    
            var filterStatusIdParameter = filterStatusId.HasValue ?
                new ObjectParameter("FilterStatusId", filterStatusId) :
                new ObjectParameter("FilterStatusId", typeof(int));
    
            var filterOrderCreatorIdParameter = filterOrderCreatorId != null ?
                new ObjectParameter("FilterOrderCreatorId", filterOrderCreatorId) :
                new ObjectParameter("FilterOrderCreatorId", typeof(string));
    
            var filterOrderExecuterIdParameter = filterOrderExecuterId != null ?
                new ObjectParameter("FilterOrderExecuterId", filterOrderExecuterId) :
                new ObjectParameter("FilterOrderExecuterId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId.HasValue ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(int));
    
            var filterOrderClientIdParameter = filterOrderClientId.HasValue ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(int));
    
            var filterOrderPriorityParameter = filterOrderPriority.HasValue ?
                new ObjectParameter("FilterOrderPriority", filterOrderPriority) :
                new ObjectParameter("FilterOrderPriority", typeof(int));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterOrderExDateBegParameter = filterOrderExDateBeg.HasValue ?
                new ObjectParameter("FilterOrderExDateBeg", filterOrderExDateBeg) :
                new ObjectParameter("FilterOrderExDateBeg", typeof(System.DateTime));
    
            var filterOrderExDateEndParameter = filterOrderExDateEnd.HasValue ?
                new ObjectParameter("FilterOrderExDateEnd", filterOrderExDateEnd) :
                new ObjectParameter("FilterOrderExDateEnd", typeof(System.DateTime));
    
            var filterFinalStatusParameter = filterFinalStatus.HasValue ?
                new ObjectParameter("FilterFinalStatus", filterFinalStatus) :
                new ObjectParameter("FilterFinalStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersPipelineV2_Result>("GetOrdersPipelineV2", userIdParameter, isAdminParameter, isTransportParameter, useStatusesFilterParameter, useOrderCreatorFilterParameter, useOrderExecuterFilterParameter, useOrderTypeFilterParameter, useOrderClientFilterParameter, useOrderPriorityFilterParameter, useOrderDateFilterParameter, useOrderExDateFilterParameter, useFinalStatusFilterParameter, filterStatusIdParameter, filterOrderCreatorIdParameter, filterOrderExecuterIdParameter, filterOrderTypeIdParameter, filterOrderClientIdParameter, filterOrderPriorityParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterOrderExDateBegParameter, filterOrderExDateEndParameter, filterFinalStatusParameter);
        }
    
        public virtual ObjectResult<GetConcursHistory_Result> GetConcursHistory(Nullable<System.DateTime> acceptDate, Nullable<System.DateTime> acceptDate2, Nullable<int> specificationId, Nullable<int> routeTypeId, Nullable<int> intervalTypeId, Nullable<bool> showAll)
        {
            var acceptDateParameter = acceptDate.HasValue ?
                new ObjectParameter("AcceptDate", acceptDate) :
                new ObjectParameter("AcceptDate", typeof(System.DateTime));
    
            var acceptDate2Parameter = acceptDate2.HasValue ?
                new ObjectParameter("AcceptDate2", acceptDate2) :
                new ObjectParameter("AcceptDate2", typeof(System.DateTime));
    
            var specificationIdParameter = specificationId.HasValue ?
                new ObjectParameter("SpecificationId", specificationId) :
                new ObjectParameter("SpecificationId", typeof(int));
    
            var routeTypeIdParameter = routeTypeId.HasValue ?
                new ObjectParameter("RouteTypeId", routeTypeId) :
                new ObjectParameter("RouteTypeId", typeof(int));
    
            var intervalTypeIdParameter = intervalTypeId.HasValue ?
                new ObjectParameter("IntervalTypeId", intervalTypeId) :
                new ObjectParameter("IntervalTypeId", typeof(int));
    
            var showAllParameter = showAll.HasValue ?
                new ObjectParameter("ShowAll", showAll) :
                new ObjectParameter("ShowAll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConcursHistory_Result>("GetConcursHistory", acceptDateParameter, acceptDate2Parameter, specificationIdParameter, routeTypeIdParameter, intervalTypeIdParameter, showAllParameter);
        }
    
        public virtual ObjectResult<GetOrdersPipelineV3_Result> GetOrdersPipelineV3(string userId, Nullable<bool> isAdmin, Nullable<bool> isTransport, Nullable<bool> useStatusesFilter, Nullable<bool> useOrderCreatorFilter, Nullable<bool> useOrderExecuterFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderPriorityFilter, Nullable<bool> useOrderDateFilter, Nullable<bool> useOrderExDateFilter, Nullable<bool> useOrderEndDateFilter, Nullable<bool> useFinalStatusFilter, Nullable<bool> useProjectFilter, Nullable<bool> useOrderPayerFilter, Nullable<bool> useOrderOrgFromFilter, Nullable<bool> useOrderOrgToFilter, string filterStatusId, string filterOrderCreatorId, string filterOrderExecuterId, string filterOrderTypeId, string filterOrderClientId, Nullable<int> filterOrderPriority, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<System.DateTime> filterOrderExDateBeg, Nullable<System.DateTime> filterOrderExDateEnd, Nullable<System.DateTime> filterOrderEndDateBeg, Nullable<System.DateTime> filterOrderEndDateEnd, Nullable<bool> filterFinalStatus, string filterProjectId, string filterOrderPayerId, string filterOrderOrgFromId, string filterOrderOrgToId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var isTransportParameter = isTransport.HasValue ?
                new ObjectParameter("IsTransport", isTransport) :
                new ObjectParameter("IsTransport", typeof(bool));
    
            var useStatusesFilterParameter = useStatusesFilter.HasValue ?
                new ObjectParameter("UseStatusesFilter", useStatusesFilter) :
                new ObjectParameter("UseStatusesFilter", typeof(bool));
    
            var useOrderCreatorFilterParameter = useOrderCreatorFilter.HasValue ?
                new ObjectParameter("UseOrderCreatorFilter", useOrderCreatorFilter) :
                new ObjectParameter("UseOrderCreatorFilter", typeof(bool));
    
            var useOrderExecuterFilterParameter = useOrderExecuterFilter.HasValue ?
                new ObjectParameter("UseOrderExecuterFilter", useOrderExecuterFilter) :
                new ObjectParameter("UseOrderExecuterFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderPriorityFilterParameter = useOrderPriorityFilter.HasValue ?
                new ObjectParameter("UseOrderPriorityFilter", useOrderPriorityFilter) :
                new ObjectParameter("UseOrderPriorityFilter", typeof(bool));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useOrderExDateFilterParameter = useOrderExDateFilter.HasValue ?
                new ObjectParameter("UseOrderExDateFilter", useOrderExDateFilter) :
                new ObjectParameter("UseOrderExDateFilter", typeof(bool));
    
            var useOrderEndDateFilterParameter = useOrderEndDateFilter.HasValue ?
                new ObjectParameter("UseOrderEndDateFilter", useOrderEndDateFilter) :
                new ObjectParameter("UseOrderEndDateFilter", typeof(bool));
    
            var useFinalStatusFilterParameter = useFinalStatusFilter.HasValue ?
                new ObjectParameter("UseFinalStatusFilter", useFinalStatusFilter) :
                new ObjectParameter("UseFinalStatusFilter", typeof(bool));
    
            var useProjectFilterParameter = useProjectFilter.HasValue ?
                new ObjectParameter("UseProjectFilter", useProjectFilter) :
                new ObjectParameter("UseProjectFilter", typeof(bool));
    
            var useOrderPayerFilterParameter = useOrderPayerFilter.HasValue ?
                new ObjectParameter("UseOrderPayerFilter", useOrderPayerFilter) :
                new ObjectParameter("UseOrderPayerFilter", typeof(bool));
    
            var useOrderOrgFromFilterParameter = useOrderOrgFromFilter.HasValue ?
                new ObjectParameter("UseOrderOrgFromFilter", useOrderOrgFromFilter) :
                new ObjectParameter("UseOrderOrgFromFilter", typeof(bool));
    
            var useOrderOrgToFilterParameter = useOrderOrgToFilter.HasValue ?
                new ObjectParameter("UseOrderOrgToFilter", useOrderOrgToFilter) :
                new ObjectParameter("UseOrderOrgToFilter", typeof(bool));
    
            var filterStatusIdParameter = filterStatusId != null ?
                new ObjectParameter("FilterStatusId", filterStatusId) :
                new ObjectParameter("FilterStatusId", typeof(string));
    
            var filterOrderCreatorIdParameter = filterOrderCreatorId != null ?
                new ObjectParameter("FilterOrderCreatorId", filterOrderCreatorId) :
                new ObjectParameter("FilterOrderCreatorId", typeof(string));
    
            var filterOrderExecuterIdParameter = filterOrderExecuterId != null ?
                new ObjectParameter("FilterOrderExecuterId", filterOrderExecuterId) :
                new ObjectParameter("FilterOrderExecuterId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterOrderClientIdParameter = filterOrderClientId != null ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(string));
    
            var filterOrderPriorityParameter = filterOrderPriority.HasValue ?
                new ObjectParameter("FilterOrderPriority", filterOrderPriority) :
                new ObjectParameter("FilterOrderPriority", typeof(int));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterOrderExDateBegParameter = filterOrderExDateBeg.HasValue ?
                new ObjectParameter("FilterOrderExDateBeg", filterOrderExDateBeg) :
                new ObjectParameter("FilterOrderExDateBeg", typeof(System.DateTime));
    
            var filterOrderExDateEndParameter = filterOrderExDateEnd.HasValue ?
                new ObjectParameter("FilterOrderExDateEnd", filterOrderExDateEnd) :
                new ObjectParameter("FilterOrderExDateEnd", typeof(System.DateTime));
    
            var filterOrderEndDateBegParameter = filterOrderEndDateBeg.HasValue ?
                new ObjectParameter("FilterOrderEndDateBeg", filterOrderEndDateBeg) :
                new ObjectParameter("FilterOrderEndDateBeg", typeof(System.DateTime));
    
            var filterOrderEndDateEndParameter = filterOrderEndDateEnd.HasValue ?
                new ObjectParameter("FilterOrderEndDateEnd", filterOrderEndDateEnd) :
                new ObjectParameter("FilterOrderEndDateEnd", typeof(System.DateTime));
    
            var filterFinalStatusParameter = filterFinalStatus.HasValue ?
                new ObjectParameter("FilterFinalStatus", filterFinalStatus) :
                new ObjectParameter("FilterFinalStatus", typeof(bool));
    
            var filterProjectIdParameter = filterProjectId != null ?
                new ObjectParameter("FilterProjectId", filterProjectId) :
                new ObjectParameter("FilterProjectId", typeof(string));
    
            var filterOrderPayerIdParameter = filterOrderPayerId != null ?
                new ObjectParameter("FilterOrderPayerId", filterOrderPayerId) :
                new ObjectParameter("FilterOrderPayerId", typeof(string));
    
            var filterOrderOrgFromIdParameter = filterOrderOrgFromId != null ?
                new ObjectParameter("FilterOrderOrgFromId", filterOrderOrgFromId) :
                new ObjectParameter("FilterOrderOrgFromId", typeof(string));
    
            var filterOrderOrgToIdParameter = filterOrderOrgToId != null ?
                new ObjectParameter("FilterOrderOrgToId", filterOrderOrgToId) :
                new ObjectParameter("FilterOrderOrgToId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersPipelineV3_Result>("GetOrdersPipelineV3", userIdParameter, isAdminParameter, isTransportParameter, useStatusesFilterParameter, useOrderCreatorFilterParameter, useOrderExecuterFilterParameter, useOrderTypeFilterParameter, useOrderClientFilterParameter, useOrderPriorityFilterParameter, useOrderDateFilterParameter, useOrderExDateFilterParameter, useOrderEndDateFilterParameter, useFinalStatusFilterParameter, useProjectFilterParameter, useOrderPayerFilterParameter, useOrderOrgFromFilterParameter, useOrderOrgToFilterParameter, filterStatusIdParameter, filterOrderCreatorIdParameter, filterOrderExecuterIdParameter, filterOrderTypeIdParameter, filterOrderClientIdParameter, filterOrderPriorityParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterOrderExDateBegParameter, filterOrderExDateEndParameter, filterOrderEndDateBegParameter, filterOrderEndDateEndParameter, filterFinalStatusParameter, filterProjectIdParameter, filterOrderPayerIdParameter, filterOrderOrgFromIdParameter, filterOrderOrgToIdParameter);
        }
    
        public virtual ObjectResult<GetSpecifications_Result> GetSpecifications(Nullable<System.DateTime> acceptDate, Nullable<bool> isTruck, Nullable<bool> useTripTypeFilter, string filterTripTypeId, Nullable<bool> useSpecificationTypeFilter, string filterSpecificationTypeId, Nullable<bool> useVehicleTypeFilter, string filterVehicleTypeId, Nullable<bool> usePayerFilter, string filterPayerId, Nullable<bool> useRouteFilter, Nullable<long> routeId)
        {
            var acceptDateParameter = acceptDate.HasValue ?
                new ObjectParameter("AcceptDate", acceptDate) :
                new ObjectParameter("AcceptDate", typeof(System.DateTime));
    
            var isTruckParameter = isTruck.HasValue ?
                new ObjectParameter("isTruck", isTruck) :
                new ObjectParameter("isTruck", typeof(bool));
    
            var useTripTypeFilterParameter = useTripTypeFilter.HasValue ?
                new ObjectParameter("UseTripTypeFilter", useTripTypeFilter) :
                new ObjectParameter("UseTripTypeFilter", typeof(bool));
    
            var filterTripTypeIdParameter = filterTripTypeId != null ?
                new ObjectParameter("FilterTripTypeId", filterTripTypeId) :
                new ObjectParameter("FilterTripTypeId", typeof(string));
    
            var useSpecificationTypeFilterParameter = useSpecificationTypeFilter.HasValue ?
                new ObjectParameter("UseSpecificationTypeFilter", useSpecificationTypeFilter) :
                new ObjectParameter("UseSpecificationTypeFilter", typeof(bool));
    
            var filterSpecificationTypeIdParameter = filterSpecificationTypeId != null ?
                new ObjectParameter("FilterSpecificationTypeId", filterSpecificationTypeId) :
                new ObjectParameter("FilterSpecificationTypeId", typeof(string));
    
            var useVehicleTypeFilterParameter = useVehicleTypeFilter.HasValue ?
                new ObjectParameter("UseVehicleTypeFilter", useVehicleTypeFilter) :
                new ObjectParameter("UseVehicleTypeFilter", typeof(bool));
    
            var filterVehicleTypeIdParameter = filterVehicleTypeId != null ?
                new ObjectParameter("FilterVehicleTypeId", filterVehicleTypeId) :
                new ObjectParameter("FilterVehicleTypeId", typeof(string));
    
            var usePayerFilterParameter = usePayerFilter.HasValue ?
                new ObjectParameter("UsePayerFilter", usePayerFilter) :
                new ObjectParameter("UsePayerFilter", typeof(bool));
    
            var filterPayerIdParameter = filterPayerId != null ?
                new ObjectParameter("FilterPayerId", filterPayerId) :
                new ObjectParameter("FilterPayerId", typeof(string));
    
            var useRouteFilterParameter = useRouteFilter.HasValue ?
                new ObjectParameter("UseRouteFilter", useRouteFilter) :
                new ObjectParameter("UseRouteFilter", typeof(bool));
    
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("RouteId", routeId) :
                new ObjectParameter("RouteId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSpecifications_Result>("GetSpecifications", acceptDateParameter, isTruckParameter, useTripTypeFilterParameter, filterTripTypeIdParameter, useSpecificationTypeFilterParameter, filterSpecificationTypeIdParameter, useVehicleTypeFilterParameter, filterVehicleTypeIdParameter, usePayerFilterParameter, filterPayerIdParameter, useRouteFilterParameter, routeIdParameter);
        }
    
        [DbFunction("Entities", "GetCarModelInfoFilter")]
        public virtual IQueryable<GetCarModelInfoFilter_Result> GetCarModelInfoFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCarModelInfoFilter_Result>("[Entities].[GetCarModelInfoFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetCarCapacityFilter")]
        public virtual IQueryable<GetCarCapacityFilter_Result> GetCarCapacityFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCarCapacityFilter_Result>("[Entities].[GetCarCapacityFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetCarDriverInfoFilter")]
        public virtual IQueryable<GetCarDriverInfoFilter_Result> GetCarDriverInfoFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCarDriverInfoFilter_Result>("[Entities].[GetCarDriverInfoFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetCarRegNumFilter")]
        public virtual IQueryable<GetCarRegNumFilter_Result> GetCarRegNumFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCarRegNumFilter_Result>("[Entities].[GetCarRegNumFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetCommentsFilter")]
        public virtual IQueryable<GetCommentsFilter_Result> GetCommentsFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCommentsFilter_Result>("[Entities].[GetCommentsFilter](@searchTerm)", searchTermParameter);
        }
    
        public virtual int GetDocsDataBySnapshot2(Nullable<int> snapShotId, string filterStorageId, string filterCenterId, string filterRecieverPlanId, string filterRecieverFactId, string filterKeeperId, string filterProducerId, Nullable<int> useStorageFilter, Nullable<int> useCenterFilter, Nullable<int> useRecieverPlanFilter, Nullable<int> useRecieverFactFilter, Nullable<int> useKeeperFilter, Nullable<int> useProducerFilter)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var filterStorageIdParameter = filterStorageId != null ?
                new ObjectParameter("FilterStorageId", filterStorageId) :
                new ObjectParameter("FilterStorageId", typeof(string));
    
            var filterCenterIdParameter = filterCenterId != null ?
                new ObjectParameter("FilterCenterId", filterCenterId) :
                new ObjectParameter("FilterCenterId", typeof(string));
    
            var filterRecieverPlanIdParameter = filterRecieverPlanId != null ?
                new ObjectParameter("FilterRecieverPlanId", filterRecieverPlanId) :
                new ObjectParameter("FilterRecieverPlanId", typeof(string));
    
            var filterRecieverFactIdParameter = filterRecieverFactId != null ?
                new ObjectParameter("FilterRecieverFactId", filterRecieverFactId) :
                new ObjectParameter("FilterRecieverFactId", typeof(string));
    
            var filterKeeperIdParameter = filterKeeperId != null ?
                new ObjectParameter("FilterKeeperId", filterKeeperId) :
                new ObjectParameter("FilterKeeperId", typeof(string));
    
            var filterProducerIdParameter = filterProducerId != null ?
                new ObjectParameter("FilterProducerId", filterProducerId) :
                new ObjectParameter("FilterProducerId", typeof(string));
    
            var useStorageFilterParameter = useStorageFilter.HasValue ?
                new ObjectParameter("UseStorageFilter", useStorageFilter) :
                new ObjectParameter("UseStorageFilter", typeof(int));
    
            var useCenterFilterParameter = useCenterFilter.HasValue ?
                new ObjectParameter("UseCenterFilter", useCenterFilter) :
                new ObjectParameter("UseCenterFilter", typeof(int));
    
            var useRecieverPlanFilterParameter = useRecieverPlanFilter.HasValue ?
                new ObjectParameter("UseRecieverPlanFilter", useRecieverPlanFilter) :
                new ObjectParameter("UseRecieverPlanFilter", typeof(int));
    
            var useRecieverFactFilterParameter = useRecieverFactFilter.HasValue ?
                new ObjectParameter("UseRecieverFactFilter", useRecieverFactFilter) :
                new ObjectParameter("UseRecieverFactFilter", typeof(int));
    
            var useKeeperFilterParameter = useKeeperFilter.HasValue ?
                new ObjectParameter("UseKeeperFilter", useKeeperFilter) :
                new ObjectParameter("UseKeeperFilter", typeof(int));
    
            var useProducerFilterParameter = useProducerFilter.HasValue ?
                new ObjectParameter("UseProducerFilter", useProducerFilter) :
                new ObjectParameter("UseProducerFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDocsDataBySnapshot2", snapShotIdParameter, filterStorageIdParameter, filterCenterIdParameter, filterRecieverPlanIdParameter, filterRecieverFactIdParameter, filterKeeperIdParameter, filterProducerIdParameter, useStorageFilterParameter, useCenterFilterParameter, useRecieverPlanFilterParameter, useRecieverFactFilterParameter, useKeeperFilterParameter, useProducerFilterParameter);
        }
    
        [DbFunction("Entities", "GetDriverCardInfoFilter")]
        public virtual IQueryable<GetDriverCardInfoFilter_Result> GetDriverCardInfoFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDriverCardInfoFilter_Result>("[Entities].[GetDriverCardInfoFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetDriverContactInfoFilter")]
        public virtual IQueryable<GetDriverContactInfoFilter_Result> GetDriverContactInfoFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDriverContactInfoFilter_Result>("[Entities].[GetDriverContactInfoFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetContractInfoFilter")]
        public virtual IQueryable<GetContractInfoFilter_Result> GetContractInfoFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetContractInfoFilter_Result>("[Entities].[GetContractInfoFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetCarrierInfoFilter")]
        public virtual IQueryable<GetCarrierInfoFilter_Result> GetCarrierInfoFilter(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCarrierInfoFilter_Result>("[Entities].[GetCarrierInfoFilter](@searchTerm)", searchTermParameter);
        }
    
        [DbFunction("Entities", "GetInnerOrderNumFilter")]
        public virtual IQueryable<GetInnerOrderNumFilter_Result> GetInnerOrderNumFilter(string searchTerm, Nullable<long> snapShot)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            var snapShotParameter = snapShot.HasValue ?
                new ObjectParameter("snapShot", snapShot) :
                new ObjectParameter("snapShot", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetInnerOrderNumFilter_Result>("[Entities].[GetInnerOrderNumFilter](@searchTerm, @snapShot)", searchTermParameter, snapShotParameter);
        }
    
        public virtual ObjectResult<GetSummaryDataBySnapshot_Result> GetSummaryDataBySnapshot(Nullable<int> snapShotId, string filterStorageId, string filterCenterId, string filterRecieverPlanId, string filterRecieverFactId, string filterKeeperId, string filterProducerId, string filterOrderProjectId, Nullable<int> useStorageFilter, Nullable<int> useCenterFilter, Nullable<int> useRecieverPlanFilter, Nullable<int> useRecieverFactFilter, Nullable<int> useKeeperFilter, Nullable<int> useProducerFilter, Nullable<int> useOrderProjectFilter)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var filterStorageIdParameter = filterStorageId != null ?
                new ObjectParameter("FilterStorageId", filterStorageId) :
                new ObjectParameter("FilterStorageId", typeof(string));
    
            var filterCenterIdParameter = filterCenterId != null ?
                new ObjectParameter("FilterCenterId", filterCenterId) :
                new ObjectParameter("FilterCenterId", typeof(string));
    
            var filterRecieverPlanIdParameter = filterRecieverPlanId != null ?
                new ObjectParameter("FilterRecieverPlanId", filterRecieverPlanId) :
                new ObjectParameter("FilterRecieverPlanId", typeof(string));
    
            var filterRecieverFactIdParameter = filterRecieverFactId != null ?
                new ObjectParameter("FilterRecieverFactId", filterRecieverFactId) :
                new ObjectParameter("FilterRecieverFactId", typeof(string));
    
            var filterKeeperIdParameter = filterKeeperId != null ?
                new ObjectParameter("FilterKeeperId", filterKeeperId) :
                new ObjectParameter("FilterKeeperId", typeof(string));
    
            var filterProducerIdParameter = filterProducerId != null ?
                new ObjectParameter("FilterProducerId", filterProducerId) :
                new ObjectParameter("FilterProducerId", typeof(string));
    
            var filterOrderProjectIdParameter = filterOrderProjectId != null ?
                new ObjectParameter("FilterOrderProjectId", filterOrderProjectId) :
                new ObjectParameter("FilterOrderProjectId", typeof(string));
    
            var useStorageFilterParameter = useStorageFilter.HasValue ?
                new ObjectParameter("UseStorageFilter", useStorageFilter) :
                new ObjectParameter("UseStorageFilter", typeof(int));
    
            var useCenterFilterParameter = useCenterFilter.HasValue ?
                new ObjectParameter("UseCenterFilter", useCenterFilter) :
                new ObjectParameter("UseCenterFilter", typeof(int));
    
            var useRecieverPlanFilterParameter = useRecieverPlanFilter.HasValue ?
                new ObjectParameter("UseRecieverPlanFilter", useRecieverPlanFilter) :
                new ObjectParameter("UseRecieverPlanFilter", typeof(int));
    
            var useRecieverFactFilterParameter = useRecieverFactFilter.HasValue ?
                new ObjectParameter("UseRecieverFactFilter", useRecieverFactFilter) :
                new ObjectParameter("UseRecieverFactFilter", typeof(int));
    
            var useKeeperFilterParameter = useKeeperFilter.HasValue ?
                new ObjectParameter("UseKeeperFilter", useKeeperFilter) :
                new ObjectParameter("UseKeeperFilter", typeof(int));
    
            var useProducerFilterParameter = useProducerFilter.HasValue ?
                new ObjectParameter("UseProducerFilter", useProducerFilter) :
                new ObjectParameter("UseProducerFilter", typeof(int));
    
            var useOrderProjectFilterParameter = useOrderProjectFilter.HasValue ?
                new ObjectParameter("UseOrderProjectFilter", useOrderProjectFilter) :
                new ObjectParameter("UseOrderProjectFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSummaryDataBySnapshot_Result>("GetSummaryDataBySnapshot", snapShotIdParameter, filterStorageIdParameter, filterCenterIdParameter, filterRecieverPlanIdParameter, filterRecieverFactIdParameter, filterKeeperIdParameter, filterProducerIdParameter, filterOrderProjectIdParameter, useStorageFilterParameter, useCenterFilterParameter, useRecieverPlanFilterParameter, useRecieverFactFilterParameter, useKeeperFilterParameter, useProducerFilterParameter, useOrderProjectFilterParameter);
        }
    
        public virtual ObjectResult<GetOrderProjects_Result> GetOrderProjects(Nullable<long> orderId, string searchTerm)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderProjects_Result>("GetOrderProjects", orderIdParameter, searchTermParameter);
        }
    
        public virtual ObjectResult<GetFactCars_Result> GetFactCars(string userId, Nullable<bool> isAdmin, Nullable<bool> useOrderIdFilter, Nullable<bool> useExpeditorIdFilter, Nullable<bool> useContractExpBkInfoFilter, Nullable<bool> useCarrierInfoFilter, Nullable<bool> useContractInfoFilter, Nullable<bool> useCarModelInfoFilter, Nullable<bool> useCarRegNumFilter, Nullable<bool> useCarCapacityFilter, Nullable<bool> useCarDriverInfoFilter, Nullable<bool> useDriverCardInfoFilter, Nullable<bool> useDriverContactInfoFilter, Nullable<bool> useCommentsFilter, Nullable<bool> useFactShipperFilter, Nullable<bool> useFactConsigneeFilter, Nullable<bool> useOrderExDateFilter, Nullable<bool> useOrderEndDateFilter, string filterOrderIdFilter, string filterExpeditorIdFilter, string filterContractExpBkInfoFilter, string filterCarrierInfoFilter, string filterContractInfoFilter, string filterCarModelInfoFilter, string filterCarRegNumFilter, string filterCarCapacityFilter, string filterCarDriverInfoFilter, string filterDriverCardInfoFilter, string filterDriverContactInfoFilter, string filterCommentsFilter, Nullable<System.DateTime> filterFactShipperBeg, Nullable<System.DateTime> filterFactShipperEnd, Nullable<System.DateTime> filterFactConsigneeBeg, Nullable<System.DateTime> filterFactConsigneeEnd, Nullable<System.DateTime> filterOrderExDateBeg, Nullable<System.DateTime> filterOrderExDateEnd, Nullable<System.DateTime> filterOrderEndDateBeg, Nullable<System.DateTime> filterOrderEndDateEnd, Nullable<bool> useStatusesFilter, Nullable<bool> useOrderCreatorFilter, Nullable<bool> useOrderExecuterFilter, Nullable<bool> useOrderTypeFilter, Nullable<bool> useOrderClientFilter, Nullable<bool> useOrderPriorityFilter, Nullable<bool> useOrderDateFilter, Nullable<bool> useFinalStatusFilter, Nullable<bool> useProjectFilter, Nullable<bool> useOrderPayerFilter, Nullable<bool> useOrderOrgFromFilter, Nullable<bool> useOrderOrgToFilter, string filterStatusId, string filterOrderCreatorId, string filterOrderExecuterId, string filterOrderTypeId, string filterOrderClientId, Nullable<int> filterOrderPriority, Nullable<System.DateTime> filterOrderDateBeg, Nullable<System.DateTime> filterOrderDateEnd, Nullable<bool> filterFinalStatus, string filterProjectId, string filterOrderPayerId, string filterOrderOrgFromId, string filterOrderOrgToId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var useOrderIdFilterParameter = useOrderIdFilter.HasValue ?
                new ObjectParameter("UseOrderIdFilter", useOrderIdFilter) :
                new ObjectParameter("UseOrderIdFilter", typeof(bool));
    
            var useExpeditorIdFilterParameter = useExpeditorIdFilter.HasValue ?
                new ObjectParameter("UseExpeditorIdFilter", useExpeditorIdFilter) :
                new ObjectParameter("UseExpeditorIdFilter", typeof(bool));
    
            var useContractExpBkInfoFilterParameter = useContractExpBkInfoFilter.HasValue ?
                new ObjectParameter("UseContractExpBkInfoFilter", useContractExpBkInfoFilter) :
                new ObjectParameter("UseContractExpBkInfoFilter", typeof(bool));
    
            var useCarrierInfoFilterParameter = useCarrierInfoFilter.HasValue ?
                new ObjectParameter("UseCarrierInfoFilter", useCarrierInfoFilter) :
                new ObjectParameter("UseCarrierInfoFilter", typeof(bool));
    
            var useContractInfoFilterParameter = useContractInfoFilter.HasValue ?
                new ObjectParameter("UseContractInfoFilter", useContractInfoFilter) :
                new ObjectParameter("UseContractInfoFilter", typeof(bool));
    
            var useCarModelInfoFilterParameter = useCarModelInfoFilter.HasValue ?
                new ObjectParameter("UseCarModelInfoFilter", useCarModelInfoFilter) :
                new ObjectParameter("UseCarModelInfoFilter", typeof(bool));
    
            var useCarRegNumFilterParameter = useCarRegNumFilter.HasValue ?
                new ObjectParameter("UseCarRegNumFilter", useCarRegNumFilter) :
                new ObjectParameter("UseCarRegNumFilter", typeof(bool));
    
            var useCarCapacityFilterParameter = useCarCapacityFilter.HasValue ?
                new ObjectParameter("UseCarCapacityFilter", useCarCapacityFilter) :
                new ObjectParameter("UseCarCapacityFilter", typeof(bool));
    
            var useCarDriverInfoFilterParameter = useCarDriverInfoFilter.HasValue ?
                new ObjectParameter("UseCarDriverInfoFilter", useCarDriverInfoFilter) :
                new ObjectParameter("UseCarDriverInfoFilter", typeof(bool));
    
            var useDriverCardInfoFilterParameter = useDriverCardInfoFilter.HasValue ?
                new ObjectParameter("UseDriverCardInfoFilter", useDriverCardInfoFilter) :
                new ObjectParameter("UseDriverCardInfoFilter", typeof(bool));
    
            var useDriverContactInfoFilterParameter = useDriverContactInfoFilter.HasValue ?
                new ObjectParameter("UseDriverContactInfoFilter", useDriverContactInfoFilter) :
                new ObjectParameter("UseDriverContactInfoFilter", typeof(bool));
    
            var useCommentsFilterParameter = useCommentsFilter.HasValue ?
                new ObjectParameter("UseCommentsFilter", useCommentsFilter) :
                new ObjectParameter("UseCommentsFilter", typeof(bool));
    
            var useFactShipperFilterParameter = useFactShipperFilter.HasValue ?
                new ObjectParameter("UseFactShipperFilter", useFactShipperFilter) :
                new ObjectParameter("UseFactShipperFilter", typeof(bool));
    
            var useFactConsigneeFilterParameter = useFactConsigneeFilter.HasValue ?
                new ObjectParameter("UseFactConsigneeFilter", useFactConsigneeFilter) :
                new ObjectParameter("UseFactConsigneeFilter", typeof(bool));
    
            var useOrderExDateFilterParameter = useOrderExDateFilter.HasValue ?
                new ObjectParameter("UseOrderExDateFilter", useOrderExDateFilter) :
                new ObjectParameter("UseOrderExDateFilter", typeof(bool));
    
            var useOrderEndDateFilterParameter = useOrderEndDateFilter.HasValue ?
                new ObjectParameter("UseOrderEndDateFilter", useOrderEndDateFilter) :
                new ObjectParameter("UseOrderEndDateFilter", typeof(bool));
    
            var filterOrderIdFilterParameter = filterOrderIdFilter != null ?
                new ObjectParameter("FilterOrderIdFilter", filterOrderIdFilter) :
                new ObjectParameter("FilterOrderIdFilter", typeof(string));
    
            var filterExpeditorIdFilterParameter = filterExpeditorIdFilter != null ?
                new ObjectParameter("FilterExpeditorIdFilter", filterExpeditorIdFilter) :
                new ObjectParameter("FilterExpeditorIdFilter", typeof(string));
    
            var filterContractExpBkInfoFilterParameter = filterContractExpBkInfoFilter != null ?
                new ObjectParameter("FilterContractExpBkInfoFilter", filterContractExpBkInfoFilter) :
                new ObjectParameter("FilterContractExpBkInfoFilter", typeof(string));
    
            var filterCarrierInfoFilterParameter = filterCarrierInfoFilter != null ?
                new ObjectParameter("FilterCarrierInfoFilter", filterCarrierInfoFilter) :
                new ObjectParameter("FilterCarrierInfoFilter", typeof(string));
    
            var filterContractInfoFilterParameter = filterContractInfoFilter != null ?
                new ObjectParameter("FilterContractInfoFilter", filterContractInfoFilter) :
                new ObjectParameter("FilterContractInfoFilter", typeof(string));
    
            var filterCarModelInfoFilterParameter = filterCarModelInfoFilter != null ?
                new ObjectParameter("FilterCarModelInfoFilter", filterCarModelInfoFilter) :
                new ObjectParameter("FilterCarModelInfoFilter", typeof(string));
    
            var filterCarRegNumFilterParameter = filterCarRegNumFilter != null ?
                new ObjectParameter("FilterCarRegNumFilter", filterCarRegNumFilter) :
                new ObjectParameter("FilterCarRegNumFilter", typeof(string));
    
            var filterCarCapacityFilterParameter = filterCarCapacityFilter != null ?
                new ObjectParameter("FilterCarCapacityFilter", filterCarCapacityFilter) :
                new ObjectParameter("FilterCarCapacityFilter", typeof(string));
    
            var filterCarDriverInfoFilterParameter = filterCarDriverInfoFilter != null ?
                new ObjectParameter("FilterCarDriverInfoFilter", filterCarDriverInfoFilter) :
                new ObjectParameter("FilterCarDriverInfoFilter", typeof(string));
    
            var filterDriverCardInfoFilterParameter = filterDriverCardInfoFilter != null ?
                new ObjectParameter("FilterDriverCardInfoFilter", filterDriverCardInfoFilter) :
                new ObjectParameter("FilterDriverCardInfoFilter", typeof(string));
    
            var filterDriverContactInfoFilterParameter = filterDriverContactInfoFilter != null ?
                new ObjectParameter("FilterDriverContactInfoFilter", filterDriverContactInfoFilter) :
                new ObjectParameter("FilterDriverContactInfoFilter", typeof(string));
    
            var filterCommentsFilterParameter = filterCommentsFilter != null ?
                new ObjectParameter("FilterCommentsFilter", filterCommentsFilter) :
                new ObjectParameter("FilterCommentsFilter", typeof(string));
    
            var filterFactShipperBegParameter = filterFactShipperBeg.HasValue ?
                new ObjectParameter("FilterFactShipperBeg", filterFactShipperBeg) :
                new ObjectParameter("FilterFactShipperBeg", typeof(System.DateTime));
    
            var filterFactShipperEndParameter = filterFactShipperEnd.HasValue ?
                new ObjectParameter("FilterFactShipperEnd", filterFactShipperEnd) :
                new ObjectParameter("FilterFactShipperEnd", typeof(System.DateTime));
    
            var filterFactConsigneeBegParameter = filterFactConsigneeBeg.HasValue ?
                new ObjectParameter("FilterFactConsigneeBeg", filterFactConsigneeBeg) :
                new ObjectParameter("FilterFactConsigneeBeg", typeof(System.DateTime));
    
            var filterFactConsigneeEndParameter = filterFactConsigneeEnd.HasValue ?
                new ObjectParameter("FilterFactConsigneeEnd", filterFactConsigneeEnd) :
                new ObjectParameter("FilterFactConsigneeEnd", typeof(System.DateTime));
    
            var filterOrderExDateBegParameter = filterOrderExDateBeg.HasValue ?
                new ObjectParameter("FilterOrderExDateBeg", filterOrderExDateBeg) :
                new ObjectParameter("FilterOrderExDateBeg", typeof(System.DateTime));
    
            var filterOrderExDateEndParameter = filterOrderExDateEnd.HasValue ?
                new ObjectParameter("FilterOrderExDateEnd", filterOrderExDateEnd) :
                new ObjectParameter("FilterOrderExDateEnd", typeof(System.DateTime));
    
            var filterOrderEndDateBegParameter = filterOrderEndDateBeg.HasValue ?
                new ObjectParameter("FilterOrderEndDateBeg", filterOrderEndDateBeg) :
                new ObjectParameter("FilterOrderEndDateBeg", typeof(System.DateTime));
    
            var filterOrderEndDateEndParameter = filterOrderEndDateEnd.HasValue ?
                new ObjectParameter("FilterOrderEndDateEnd", filterOrderEndDateEnd) :
                new ObjectParameter("FilterOrderEndDateEnd", typeof(System.DateTime));
    
            var useStatusesFilterParameter = useStatusesFilter.HasValue ?
                new ObjectParameter("UseStatusesFilter", useStatusesFilter) :
                new ObjectParameter("UseStatusesFilter", typeof(bool));
    
            var useOrderCreatorFilterParameter = useOrderCreatorFilter.HasValue ?
                new ObjectParameter("UseOrderCreatorFilter", useOrderCreatorFilter) :
                new ObjectParameter("UseOrderCreatorFilter", typeof(bool));
    
            var useOrderExecuterFilterParameter = useOrderExecuterFilter.HasValue ?
                new ObjectParameter("UseOrderExecuterFilter", useOrderExecuterFilter) :
                new ObjectParameter("UseOrderExecuterFilter", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var useOrderClientFilterParameter = useOrderClientFilter.HasValue ?
                new ObjectParameter("UseOrderClientFilter", useOrderClientFilter) :
                new ObjectParameter("UseOrderClientFilter", typeof(bool));
    
            var useOrderPriorityFilterParameter = useOrderPriorityFilter.HasValue ?
                new ObjectParameter("UseOrderPriorityFilter", useOrderPriorityFilter) :
                new ObjectParameter("UseOrderPriorityFilter", typeof(bool));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            var useFinalStatusFilterParameter = useFinalStatusFilter.HasValue ?
                new ObjectParameter("UseFinalStatusFilter", useFinalStatusFilter) :
                new ObjectParameter("UseFinalStatusFilter", typeof(bool));
    
            var useProjectFilterParameter = useProjectFilter.HasValue ?
                new ObjectParameter("UseProjectFilter", useProjectFilter) :
                new ObjectParameter("UseProjectFilter", typeof(bool));
    
            var useOrderPayerFilterParameter = useOrderPayerFilter.HasValue ?
                new ObjectParameter("UseOrderPayerFilter", useOrderPayerFilter) :
                new ObjectParameter("UseOrderPayerFilter", typeof(bool));
    
            var useOrderOrgFromFilterParameter = useOrderOrgFromFilter.HasValue ?
                new ObjectParameter("UseOrderOrgFromFilter", useOrderOrgFromFilter) :
                new ObjectParameter("UseOrderOrgFromFilter", typeof(bool));
    
            var useOrderOrgToFilterParameter = useOrderOrgToFilter.HasValue ?
                new ObjectParameter("UseOrderOrgToFilter", useOrderOrgToFilter) :
                new ObjectParameter("UseOrderOrgToFilter", typeof(bool));
    
            var filterStatusIdParameter = filterStatusId != null ?
                new ObjectParameter("FilterStatusId", filterStatusId) :
                new ObjectParameter("FilterStatusId", typeof(string));
    
            var filterOrderCreatorIdParameter = filterOrderCreatorId != null ?
                new ObjectParameter("FilterOrderCreatorId", filterOrderCreatorId) :
                new ObjectParameter("FilterOrderCreatorId", typeof(string));
    
            var filterOrderExecuterIdParameter = filterOrderExecuterId != null ?
                new ObjectParameter("FilterOrderExecuterId", filterOrderExecuterId) :
                new ObjectParameter("FilterOrderExecuterId", typeof(string));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterOrderClientIdParameter = filterOrderClientId != null ?
                new ObjectParameter("FilterOrderClientId", filterOrderClientId) :
                new ObjectParameter("FilterOrderClientId", typeof(string));
    
            var filterOrderPriorityParameter = filterOrderPriority.HasValue ?
                new ObjectParameter("FilterOrderPriority", filterOrderPriority) :
                new ObjectParameter("FilterOrderPriority", typeof(int));
    
            var filterOrderDateBegParameter = filterOrderDateBeg.HasValue ?
                new ObjectParameter("FilterOrderDateBeg", filterOrderDateBeg) :
                new ObjectParameter("FilterOrderDateBeg", typeof(System.DateTime));
    
            var filterOrderDateEndParameter = filterOrderDateEnd.HasValue ?
                new ObjectParameter("FilterOrderDateEnd", filterOrderDateEnd) :
                new ObjectParameter("FilterOrderDateEnd", typeof(System.DateTime));
    
            var filterFinalStatusParameter = filterFinalStatus.HasValue ?
                new ObjectParameter("FilterFinalStatus", filterFinalStatus) :
                new ObjectParameter("FilterFinalStatus", typeof(bool));
    
            var filterProjectIdParameter = filterProjectId != null ?
                new ObjectParameter("FilterProjectId", filterProjectId) :
                new ObjectParameter("FilterProjectId", typeof(string));
    
            var filterOrderPayerIdParameter = filterOrderPayerId != null ?
                new ObjectParameter("FilterOrderPayerId", filterOrderPayerId) :
                new ObjectParameter("FilterOrderPayerId", typeof(string));
    
            var filterOrderOrgFromIdParameter = filterOrderOrgFromId != null ?
                new ObjectParameter("FilterOrderOrgFromId", filterOrderOrgFromId) :
                new ObjectParameter("FilterOrderOrgFromId", typeof(string));
    
            var filterOrderOrgToIdParameter = filterOrderOrgToId != null ?
                new ObjectParameter("FilterOrderOrgToId", filterOrderOrgToId) :
                new ObjectParameter("FilterOrderOrgToId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFactCars_Result>("GetFactCars", userIdParameter, isAdminParameter, useOrderIdFilterParameter, useExpeditorIdFilterParameter, useContractExpBkInfoFilterParameter, useCarrierInfoFilterParameter, useContractInfoFilterParameter, useCarModelInfoFilterParameter, useCarRegNumFilterParameter, useCarCapacityFilterParameter, useCarDriverInfoFilterParameter, useDriverCardInfoFilterParameter, useDriverContactInfoFilterParameter, useCommentsFilterParameter, useFactShipperFilterParameter, useFactConsigneeFilterParameter, useOrderExDateFilterParameter, useOrderEndDateFilterParameter, filterOrderIdFilterParameter, filterExpeditorIdFilterParameter, filterContractExpBkInfoFilterParameter, filterCarrierInfoFilterParameter, filterContractInfoFilterParameter, filterCarModelInfoFilterParameter, filterCarRegNumFilterParameter, filterCarCapacityFilterParameter, filterCarDriverInfoFilterParameter, filterDriverCardInfoFilterParameter, filterDriverContactInfoFilterParameter, filterCommentsFilterParameter, filterFactShipperBegParameter, filterFactShipperEndParameter, filterFactConsigneeBegParameter, filterFactConsigneeEndParameter, filterOrderExDateBegParameter, filterOrderExDateEndParameter, filterOrderEndDateBegParameter, filterOrderEndDateEndParameter, useStatusesFilterParameter, useOrderCreatorFilterParameter, useOrderExecuterFilterParameter, useOrderTypeFilterParameter, useOrderClientFilterParameter, useOrderPriorityFilterParameter, useOrderDateFilterParameter, useFinalStatusFilterParameter, useProjectFilterParameter, useOrderPayerFilterParameter, useOrderOrgFromFilterParameter, useOrderOrgToFilterParameter, filterStatusIdParameter, filterOrderCreatorIdParameter, filterOrderExecuterIdParameter, filterOrderTypeIdParameter, filterOrderClientIdParameter, filterOrderPriorityParameter, filterOrderDateBegParameter, filterOrderDateEndParameter, filterFinalStatusParameter, filterProjectIdParameter, filterOrderPayerIdParameter, filterOrderOrgFromIdParameter, filterOrderOrgToIdParameter);
        }
    
        public virtual ObjectResult<GetTruckReportDetails_Result> GetTruckReportDetails(string userId, Nullable<bool> isAdmin, Nullable<int> orgId, Nullable<System.DateTime> reportDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTruckReportDetails_Result>("GetTruckReportDetails", userIdParameter, isAdminParameter, orgIdParameter, reportDateParameter);
        }
    
        public virtual int OrdersInsert(string projectNum, string shortName, string priotityType, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> сonfirmedDate, Nullable<System.DateTime> acceptedDate, string tripType, string fromCountry, string fromCity, string adressFrom, string orgFrom, Nullable<System.DateTime> startDateTimeOfTrip, Nullable<System.DateTime> startDateTimeOfTrip2, string toCountry, string toCity, string adressTo, string orgTo, Nullable<System.DateTime> finishDateTimeOfTrip, Nullable<System.DateTime> finishDateTimeOfTrip2, string needReturn, Nullable<System.DateTime> returnStartDateTimeOfTrip, Nullable<System.DateTime> returnStartDateTimeOfTrip2, Nullable<System.DateTime> returnFinishDateTimeOfTrip, Nullable<System.DateTime> returnFinishDateTimeOfTrip2, string passInfo, string tripDescription, string clientCFO, string clientName, string projectNumber, string payerName, string createdByUser, string orderExecuter, string creatorPosition, string creatorContact, string attachment, string expeditorName, string contractInfo, string carrierInfo, string carModelInfo, string carRegNum, string carDriverInfo, string driverCardInfo, string driverContactInfo, string comments, Nullable<System.DateTime> createDatetime)
        {
            var projectNumParameter = projectNum != null ?
                new ObjectParameter("ProjectNum", projectNum) :
                new ObjectParameter("ProjectNum", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var priotityTypeParameter = priotityType != null ?
                new ObjectParameter("PriotityType", priotityType) :
                new ObjectParameter("PriotityType", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var сonfirmedDateParameter = сonfirmedDate.HasValue ?
                new ObjectParameter("СonfirmedDate", сonfirmedDate) :
                new ObjectParameter("СonfirmedDate", typeof(System.DateTime));
    
            var acceptedDateParameter = acceptedDate.HasValue ?
                new ObjectParameter("AcceptedDate", acceptedDate) :
                new ObjectParameter("AcceptedDate", typeof(System.DateTime));
    
            var tripTypeParameter = tripType != null ?
                new ObjectParameter("TripType", tripType) :
                new ObjectParameter("TripType", typeof(string));
    
            var fromCountryParameter = fromCountry != null ?
                new ObjectParameter("FromCountry", fromCountry) :
                new ObjectParameter("FromCountry", typeof(string));
    
            var fromCityParameter = fromCity != null ?
                new ObjectParameter("FromCity", fromCity) :
                new ObjectParameter("FromCity", typeof(string));
    
            var adressFromParameter = adressFrom != null ?
                new ObjectParameter("AdressFrom", adressFrom) :
                new ObjectParameter("AdressFrom", typeof(string));
    
            var orgFromParameter = orgFrom != null ?
                new ObjectParameter("OrgFrom", orgFrom) :
                new ObjectParameter("OrgFrom", typeof(string));
    
            var startDateTimeOfTripParameter = startDateTimeOfTrip.HasValue ?
                new ObjectParameter("StartDateTimeOfTrip", startDateTimeOfTrip) :
                new ObjectParameter("StartDateTimeOfTrip", typeof(System.DateTime));
    
            var startDateTimeOfTrip2Parameter = startDateTimeOfTrip2.HasValue ?
                new ObjectParameter("StartDateTimeOfTrip2", startDateTimeOfTrip2) :
                new ObjectParameter("StartDateTimeOfTrip2", typeof(System.DateTime));
    
            var toCountryParameter = toCountry != null ?
                new ObjectParameter("ToCountry", toCountry) :
                new ObjectParameter("ToCountry", typeof(string));
    
            var toCityParameter = toCity != null ?
                new ObjectParameter("ToCity", toCity) :
                new ObjectParameter("ToCity", typeof(string));
    
            var adressToParameter = adressTo != null ?
                new ObjectParameter("AdressTo", adressTo) :
                new ObjectParameter("AdressTo", typeof(string));
    
            var orgToParameter = orgTo != null ?
                new ObjectParameter("OrgTo", orgTo) :
                new ObjectParameter("OrgTo", typeof(string));
    
            var finishDateTimeOfTripParameter = finishDateTimeOfTrip.HasValue ?
                new ObjectParameter("FinishDateTimeOfTrip", finishDateTimeOfTrip) :
                new ObjectParameter("FinishDateTimeOfTrip", typeof(System.DateTime));
    
            var finishDateTimeOfTrip2Parameter = finishDateTimeOfTrip2.HasValue ?
                new ObjectParameter("FinishDateTimeOfTrip2", finishDateTimeOfTrip2) :
                new ObjectParameter("FinishDateTimeOfTrip2", typeof(System.DateTime));
    
            var needReturnParameter = needReturn != null ?
                new ObjectParameter("NeedReturn", needReturn) :
                new ObjectParameter("NeedReturn", typeof(string));
    
            var returnStartDateTimeOfTripParameter = returnStartDateTimeOfTrip.HasValue ?
                new ObjectParameter("ReturnStartDateTimeOfTrip", returnStartDateTimeOfTrip) :
                new ObjectParameter("ReturnStartDateTimeOfTrip", typeof(System.DateTime));
    
            var returnStartDateTimeOfTrip2Parameter = returnStartDateTimeOfTrip2.HasValue ?
                new ObjectParameter("ReturnStartDateTimeOfTrip2", returnStartDateTimeOfTrip2) :
                new ObjectParameter("ReturnStartDateTimeOfTrip2", typeof(System.DateTime));
    
            var returnFinishDateTimeOfTripParameter = returnFinishDateTimeOfTrip.HasValue ?
                new ObjectParameter("ReturnFinishDateTimeOfTrip", returnFinishDateTimeOfTrip) :
                new ObjectParameter("ReturnFinishDateTimeOfTrip", typeof(System.DateTime));
    
            var returnFinishDateTimeOfTrip2Parameter = returnFinishDateTimeOfTrip2.HasValue ?
                new ObjectParameter("ReturnFinishDateTimeOfTrip2", returnFinishDateTimeOfTrip2) :
                new ObjectParameter("ReturnFinishDateTimeOfTrip2", typeof(System.DateTime));
    
            var passInfoParameter = passInfo != null ?
                new ObjectParameter("PassInfo", passInfo) :
                new ObjectParameter("PassInfo", typeof(string));
    
            var tripDescriptionParameter = tripDescription != null ?
                new ObjectParameter("TripDescription", tripDescription) :
                new ObjectParameter("TripDescription", typeof(string));
    
            var clientCFOParameter = clientCFO != null ?
                new ObjectParameter("ClientCFO", clientCFO) :
                new ObjectParameter("ClientCFO", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var projectNumberParameter = projectNumber != null ?
                new ObjectParameter("ProjectNumber", projectNumber) :
                new ObjectParameter("ProjectNumber", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var createdByUserParameter = createdByUser != null ?
                new ObjectParameter("CreatedByUser", createdByUser) :
                new ObjectParameter("CreatedByUser", typeof(string));
    
            var orderExecuterParameter = orderExecuter != null ?
                new ObjectParameter("OrderExecuter", orderExecuter) :
                new ObjectParameter("OrderExecuter", typeof(string));
    
            var creatorPositionParameter = creatorPosition != null ?
                new ObjectParameter("CreatorPosition", creatorPosition) :
                new ObjectParameter("CreatorPosition", typeof(string));
    
            var creatorContactParameter = creatorContact != null ?
                new ObjectParameter("CreatorContact", creatorContact) :
                new ObjectParameter("CreatorContact", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            var expeditorNameParameter = expeditorName != null ?
                new ObjectParameter("ExpeditorName", expeditorName) :
                new ObjectParameter("ExpeditorName", typeof(string));
    
            var contractInfoParameter = contractInfo != null ?
                new ObjectParameter("ContractInfo", contractInfo) :
                new ObjectParameter("ContractInfo", typeof(string));
    
            var carrierInfoParameter = carrierInfo != null ?
                new ObjectParameter("CarrierInfo", carrierInfo) :
                new ObjectParameter("CarrierInfo", typeof(string));
    
            var carModelInfoParameter = carModelInfo != null ?
                new ObjectParameter("CarModelInfo", carModelInfo) :
                new ObjectParameter("CarModelInfo", typeof(string));
    
            var carRegNumParameter = carRegNum != null ?
                new ObjectParameter("CarRegNum", carRegNum) :
                new ObjectParameter("CarRegNum", typeof(string));
    
            var carDriverInfoParameter = carDriverInfo != null ?
                new ObjectParameter("CarDriverInfo", carDriverInfo) :
                new ObjectParameter("CarDriverInfo", typeof(string));
    
            var driverCardInfoParameter = driverCardInfo != null ?
                new ObjectParameter("DriverCardInfo", driverCardInfo) :
                new ObjectParameter("DriverCardInfo", typeof(string));
    
            var driverContactInfoParameter = driverContactInfo != null ?
                new ObjectParameter("DriverContactInfo", driverContactInfo) :
                new ObjectParameter("DriverContactInfo", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createDatetimeParameter = createDatetime.HasValue ?
                new ObjectParameter("CreateDatetime", createDatetime) :
                new ObjectParameter("CreateDatetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrdersInsert", projectNumParameter, shortNameParameter, priotityTypeParameter, orderDateParameter, сonfirmedDateParameter, acceptedDateParameter, tripTypeParameter, fromCountryParameter, fromCityParameter, adressFromParameter, orgFromParameter, startDateTimeOfTripParameter, startDateTimeOfTrip2Parameter, toCountryParameter, toCityParameter, adressToParameter, orgToParameter, finishDateTimeOfTripParameter, finishDateTimeOfTrip2Parameter, needReturnParameter, returnStartDateTimeOfTripParameter, returnStartDateTimeOfTrip2Parameter, returnFinishDateTimeOfTripParameter, returnFinishDateTimeOfTrip2Parameter, passInfoParameter, tripDescriptionParameter, clientCFOParameter, clientNameParameter, projectNumberParameter, payerNameParameter, createdByUserParameter, orderExecuterParameter, creatorPositionParameter, creatorContactParameter, attachmentParameter, expeditorNameParameter, contractInfoParameter, carrierInfoParameter, carModelInfoParameter, carRegNumParameter, carDriverInfoParameter, driverCardInfoParameter, driverContactInfoParameter, commentsParameter, createDatetimeParameter);
        }
    
        public virtual ObjectResult<GetTruckReport_Result> GetTruckReport(string userId, Nullable<bool> isAdmin, Nullable<bool> useOrderTypeFilter, string filterOrderTypeId, Nullable<System.DateTime> filterOrderDate, Nullable<bool> useOrderDateFilter)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            var useOrderTypeFilterParameter = useOrderTypeFilter.HasValue ?
                new ObjectParameter("UseOrderTypeFilter", useOrderTypeFilter) :
                new ObjectParameter("UseOrderTypeFilter", typeof(bool));
    
            var filterOrderTypeIdParameter = filterOrderTypeId != null ?
                new ObjectParameter("FilterOrderTypeId", filterOrderTypeId) :
                new ObjectParameter("FilterOrderTypeId", typeof(string));
    
            var filterOrderDateParameter = filterOrderDate.HasValue ?
                new ObjectParameter("FilterOrderDate", filterOrderDate) :
                new ObjectParameter("FilterOrderDate", typeof(System.DateTime));
    
            var useOrderDateFilterParameter = useOrderDateFilter.HasValue ?
                new ObjectParameter("UseOrderDateFilter", useOrderDateFilter) :
                new ObjectParameter("UseOrderDateFilter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTruckReport_Result>("GetTruckReport", userIdParameter, isAdminParameter, useOrderTypeFilterParameter, filterOrderTypeIdParameter, filterOrderDateParameter, useOrderDateFilterParameter);
        }
    
        public virtual ObjectResult<GetRestDataByInnerPartyKey_Result> GetRestDataByInnerPartyKey(Nullable<int> snapShotId, string innerPartyKey)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var innerPartyKeyParameter = innerPartyKey != null ?
                new ObjectParameter("InnerPartyKey", innerPartyKey) :
                new ObjectParameter("InnerPartyKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRestDataByInnerPartyKey_Result>("GetRestDataByInnerPartyKey", snapShotIdParameter, innerPartyKeyParameter);
        }
    
        [DbFunction("Entities", "GetRestInfoByRestMultiKey")]
        public virtual IQueryable<GetRestInfoByRestMultiKey_Result> GetRestInfoByRestMultiKey(Nullable<int> snapShotId, string product, string shifr, string figure, string measure, string storage, string shifr_MDM, string bacodeProduct, string bacodeConsignment, string bacodesAll)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var shifrParameter = shifr != null ?
                new ObjectParameter("Shifr", shifr) :
                new ObjectParameter("Shifr", typeof(string));
    
            var figureParameter = figure != null ?
                new ObjectParameter("Figure", figure) :
                new ObjectParameter("Figure", typeof(string));
    
            var measureParameter = measure != null ?
                new ObjectParameter("Measure", measure) :
                new ObjectParameter("Measure", typeof(string));
    
            var storageParameter = storage != null ?
                new ObjectParameter("Storage", storage) :
                new ObjectParameter("Storage", typeof(string));
    
            var shifr_MDMParameter = shifr_MDM != null ?
                new ObjectParameter("Shifr_MDM", shifr_MDM) :
                new ObjectParameter("Shifr_MDM", typeof(string));
    
            var bacodeProductParameter = bacodeProduct != null ?
                new ObjectParameter("BacodeProduct", bacodeProduct) :
                new ObjectParameter("BacodeProduct", typeof(string));
    
            var bacodeConsignmentParameter = bacodeConsignment != null ?
                new ObjectParameter("BacodeConsignment", bacodeConsignment) :
                new ObjectParameter("BacodeConsignment", typeof(string));
    
            var bacodesAllParameter = bacodesAll != null ?
                new ObjectParameter("BacodesAll", bacodesAll) :
                new ObjectParameter("BacodesAll", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetRestInfoByRestMultiKey_Result>("[Entities].[GetRestInfoByRestMultiKey](@snapShotId, @Product, @Shifr, @Figure, @Measure, @Storage, @Shifr_MDM, @BacodeProduct, @BacodeConsignment, @BacodesAll)", snapShotIdParameter, productParameter, shifrParameter, figureParameter, measureParameter, storageParameter, shifr_MDMParameter, bacodeProductParameter, bacodeConsignmentParameter, bacodesAllParameter);
        }
    
        [DbFunction("Entities", "GetProductBarcodeFilter")]
        public virtual IQueryable<GetProductBarcodeFilter_Result> GetProductBarcodeFilter(string searchTerm, Nullable<long> snapShot)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            var snapShotParameter = snapShot.HasValue ?
                new ObjectParameter("snapShot", snapShot) :
                new ObjectParameter("snapShot", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetProductBarcodeFilter_Result>("[Entities].[GetProductBarcodeFilter](@searchTerm, @snapShot)", searchTermParameter, snapShotParameter);
        }
    
        public virtual ObjectResult<GetRestDataBySnapshot_Result> GetRestDataBySnapshot(Nullable<int> snapShotId, string filterStorageId, string filterCenterId, string filterRecieverPlanId, string filterRecieverFactId, string filterKeeperId, string filterProducerId, string filterOrderProjectId, string filterProductBarcodeId, Nullable<int> useStorageFilter, Nullable<int> useCenterFilter, Nullable<int> useRecieverPlanFilter, Nullable<int> useRecieverFactFilter, Nullable<int> useKeeperFilter, Nullable<int> useProducerFilter, Nullable<int> useOrderProjectFilter, Nullable<int> useProductBarcodeFilter)
        {
            var snapShotIdParameter = snapShotId.HasValue ?
                new ObjectParameter("snapShotId", snapShotId) :
                new ObjectParameter("snapShotId", typeof(int));
    
            var filterStorageIdParameter = filterStorageId != null ?
                new ObjectParameter("FilterStorageId", filterStorageId) :
                new ObjectParameter("FilterStorageId", typeof(string));
    
            var filterCenterIdParameter = filterCenterId != null ?
                new ObjectParameter("FilterCenterId", filterCenterId) :
                new ObjectParameter("FilterCenterId", typeof(string));
    
            var filterRecieverPlanIdParameter = filterRecieverPlanId != null ?
                new ObjectParameter("FilterRecieverPlanId", filterRecieverPlanId) :
                new ObjectParameter("FilterRecieverPlanId", typeof(string));
    
            var filterRecieverFactIdParameter = filterRecieverFactId != null ?
                new ObjectParameter("FilterRecieverFactId", filterRecieverFactId) :
                new ObjectParameter("FilterRecieverFactId", typeof(string));
    
            var filterKeeperIdParameter = filterKeeperId != null ?
                new ObjectParameter("FilterKeeperId", filterKeeperId) :
                new ObjectParameter("FilterKeeperId", typeof(string));
    
            var filterProducerIdParameter = filterProducerId != null ?
                new ObjectParameter("FilterProducerId", filterProducerId) :
                new ObjectParameter("FilterProducerId", typeof(string));
    
            var filterOrderProjectIdParameter = filterOrderProjectId != null ?
                new ObjectParameter("FilterOrderProjectId", filterOrderProjectId) :
                new ObjectParameter("FilterOrderProjectId", typeof(string));
    
            var filterProductBarcodeIdParameter = filterProductBarcodeId != null ?
                new ObjectParameter("FilterProductBarcodeId", filterProductBarcodeId) :
                new ObjectParameter("FilterProductBarcodeId", typeof(string));
    
            var useStorageFilterParameter = useStorageFilter.HasValue ?
                new ObjectParameter("UseStorageFilter", useStorageFilter) :
                new ObjectParameter("UseStorageFilter", typeof(int));
    
            var useCenterFilterParameter = useCenterFilter.HasValue ?
                new ObjectParameter("UseCenterFilter", useCenterFilter) :
                new ObjectParameter("UseCenterFilter", typeof(int));
    
            var useRecieverPlanFilterParameter = useRecieverPlanFilter.HasValue ?
                new ObjectParameter("UseRecieverPlanFilter", useRecieverPlanFilter) :
                new ObjectParameter("UseRecieverPlanFilter", typeof(int));
    
            var useRecieverFactFilterParameter = useRecieverFactFilter.HasValue ?
                new ObjectParameter("UseRecieverFactFilter", useRecieverFactFilter) :
                new ObjectParameter("UseRecieverFactFilter", typeof(int));
    
            var useKeeperFilterParameter = useKeeperFilter.HasValue ?
                new ObjectParameter("UseKeeperFilter", useKeeperFilter) :
                new ObjectParameter("UseKeeperFilter", typeof(int));
    
            var useProducerFilterParameter = useProducerFilter.HasValue ?
                new ObjectParameter("UseProducerFilter", useProducerFilter) :
                new ObjectParameter("UseProducerFilter", typeof(int));
    
            var useOrderProjectFilterParameter = useOrderProjectFilter.HasValue ?
                new ObjectParameter("UseOrderProjectFilter", useOrderProjectFilter) :
                new ObjectParameter("UseOrderProjectFilter", typeof(int));
    
            var useProductBarcodeFilterParameter = useProductBarcodeFilter.HasValue ?
                new ObjectParameter("UseProductBarcodeFilter", useProductBarcodeFilter) :
                new ObjectParameter("UseProductBarcodeFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRestDataBySnapshot_Result>("GetRestDataBySnapshot", snapShotIdParameter, filterStorageIdParameter, filterCenterIdParameter, filterRecieverPlanIdParameter, filterRecieverFactIdParameter, filterKeeperIdParameter, filterProducerIdParameter, filterOrderProjectIdParameter, filterProductBarcodeIdParameter, useStorageFilterParameter, useCenterFilterParameter, useRecieverPlanFilterParameter, useRecieverFactFilterParameter, useKeeperFilterParameter, useProducerFilterParameter, useOrderProjectFilterParameter, useProductBarcodeFilterParameter);
        }
    }
}
